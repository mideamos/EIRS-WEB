@model EIRS.Web.Models.GenerateViewModel
@using EIRS.Common

@{
    ViewBag.Title = "Generate Certificate";
    usp_GetCertificateDetails_Result mObjCertificateData = (usp_GetCertificateDetails_Result)ViewBag.CertificateData;
    IList<PDFTemplateFieldList> lstTemplateField = (IList<PDFTemplateFieldList>)ViewBag.TemplateFieldList;
    int intTabIndex = 0;
}

@section Header {
    <link href="~/Content/Plugins/bootstrap-fileinput/bootstrap-fileinput.css" rel="stylesheet" />
}


<div class="title">
    <h1>
        Manage Digital Certificate - Generate Certificate
    </h1>
    <hr>
</div>

<div class="portlet light">
    <div class="portlet-title">
        <div class="caption">
            Certificate Details
        </div>
        <div class="actions">
            <a href="@Url.Action("List", "ProcessCertificate")" class="btn btn-theme">Cancel</a>
        </div>
    </div>
    <div class="row view-form">
        <div class="col-sm-6">
            <div class="form-group">
                <label class="control-label bold">Certificate Type: </label>
                <div class="form-control-static">
                    @mObjCertificateData.CertificateTypeName
                </div>
            </div>
            <div class="form-group">
                <label class="control-label bold">Certificate Number : </label>
                <div class="form-control-static">
                    @mObjCertificateData.CertificateNumber
                </div>
            </div>
            <div class="form-group">
                <label class="control-label bold">Profile: </label>
                <div class="form-control-static">
                    @mObjCertificateData.ProfileDescription
                </div>
            </div>
            <div class="form-group">
                <label class="control-label bold">Status: </label>
                <div class="form-control-static">
                    @mObjCertificateData.CertificateStatusName
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="form-group">
                <label class="control-label bold">Tax Payer Type: </label>
                <div class="form-control-static">
                    @mObjCertificateData.TaxPayerTypeName
                </div>
            </div>
            <div class="form-group">
                <label class="control-label bold">Tax Payer: </label>
                <div class="form-control-static">
                    @mObjCertificateData.TaxPayerName (@mObjCertificateData.TaxPayerRIN)
                </div>
            </div>
            <div class="form-group">
                <label class="control-label bold">Asset Type: </label>
                <div class="form-control-static">
                    @mObjCertificateData.AssetTypeName
                </div>
            </div>
            <div class="form-group">
                <label class="control-label bold">Asset: </label>
                <div class="form-control-static">
                    @mObjCertificateData.AssetName
                </div>
            </div>
        </div>
    </div>
</div>



@using (Html.BeginForm("Generate", "ProcessCertificate", FormMethod.Post, htmlAttributes: new { @id = "frmGenerate" }))
{
    <div class="portlet light">
        <div class="portlet-title">
            <div class="caption">Generate Certificate</div>
            <div class="actions">

            </div>
        </div>
        <div class="portlet-body">

            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.CGID, htmlAttributes: new { @value = Model.CGID })
            @Html.HiddenFor(model => model.CertificateID, htmlAttributes: new { @value = Model.CertificateID })
            @Html.HiddenFor(model => model.SEDE_DocumentID, htmlAttributes: new { @value = Model.SEDE_DocumentID })


            @if (ViewBag.Message != null)
            {
                <div class="alert alert-danger">
                    @ViewBag.Message
                </div>
            }

            @foreach (var item in lstTemplateField)
            {
                if (intTabIndex % 2 == 0)
                {
                    @:<div class="row">
                    }

                    <div class="col-sm-6">
                        <div class="form-group">
                            <label class="control-label @(item.IsRequired.GetValueOrDefault()?"required-star":"")">@item.FieldName</label>
                            @if (item.FieldTypeID == (int)EnumList.FieldType.Text)
                            {
                                if (item.IsRequired.GetValueOrDefault())
                                {
                                    @Html.TextBox("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @data_val_required = "Enter " + item.FieldName, @type = "text", @data_val = "true", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                    @Html.ValidationMessage("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new { @class = "red-text" })
                                }
                                else
                                {
                                    @Html.TextBox("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @type = "text", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                }
                            }
                            else if (item.FieldTypeID == (int)EnumList.FieldType.Number)
                            {
                                if (item.IsRequired.GetValueOrDefault())
                                {
                                    @Html.TextBox("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @data_val_required = "Enter " + item.FieldName, @type = "text", @data_val = "true", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                    @Html.ValidationMessage("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new { @class = "red-text" })
                                }
                                else
                                {
                                    @Html.TextBox("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @type = "text", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                }
                            }
                            else if (item.FieldTypeID == (int)EnumList.FieldType.Date)
                            {
                                if (item.IsRequired.GetValueOrDefault())
                                {
                                    @Html.TextBox("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control datepicker custfield", @placeholder = "Enter " + item.FieldName, @data_val_required = "Enter " + item.FieldName, @type = "text", @data_val = "true", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                    @Html.ValidationMessage("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new { @class = "red-text" })
                                }
                                else
                                {
                                    @Html.TextBox("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @type = "text", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                }
                            }
                            else if (item.FieldTypeID == (int)EnumList.FieldType.Combo)
                            {
                                if (item.IsRequired.GetValueOrDefault())
                                {
                                    @Html.DropDownList("cbo_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new SelectList(item.FieldComboValue.Split(new char[] { 'ψ' }), item.FieldValue), "Select " + item.FieldName, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control bs-select", @data_val_required = "Enter " + item.FieldName, @data_val = "true", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                    @Html.ValidationMessage("cbo_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new { @class = "red-text" })
                                }
                                else
                                {
                                    @Html.DropDownList("cbo_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new SelectList(item.FieldComboValue.Split(new char[] { 'ψ' }), item.FieldValue), "Select " + item.FieldName, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control bs-select", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                }
                            }
                            else if (item.FieldTypeID == (int)EnumList.FieldType.Memo)
                            {
                                if (item.IsRequired.GetValueOrDefault())
                                {
                                    @Html.TextArea("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @data_val_required = "Enter " + item.FieldName, @type = "text", @data_val = "true", @Rows = "5", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                    @Html.ValidationMessage("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), new { @class = "red-text" })
                                }
                                else
                                {
                                    @Html.TextArea("txt_" + item.FieldID + "_" + item.FieldName.ToSeoUrl(), item.FieldValue, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control custfield", @placeholder = "Enter " + item.FieldName, @type = "text", @Rows = "5", @data_readonly=(!string.IsNullOrWhiteSpace(item.ETX_OrderFieldName) ? "true" : "false") })
                                }
                            }
                        </div>
                    </div>
                    if (intTabIndex % 2 == 0)
                    {
                    @:</div>
                }
                else if (intTabIndex == lstTemplateField.Count)
                {
                @:</div>
            }

        }

            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label></label>
                        <div class="input-group">
                            <div class="icheck-list">
                                <label>
                                    @Html.CheckBoxFor(model => model.IsExpirable, new { @class = "icheck", @data_checkbox = "icheckbox_square-green", @tabindex = ++intTabIndex, @id = "chkIsExpirable" }) Does Not Expiry
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ExpiryDate, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.ExpiryDate, "{0:dd/MM/yyyy}", htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control", @placeholder = "Enter Expiry Date", @id = "txtExpiryDate" })
                        @Html.ValidationMessageFor(m => m.ExpiryDate, "", new { @class = "red-text" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Reason, htmlAttributes: new { @class = "control-label required-star" })
                        @Html.TextBoxFor(model => model.Reason, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control", @placeholder = "Enter Reason" })
                        @Html.ValidationMessageFor(m => m.Reason, "", new { @class = "red-text" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label required-star" })
                        @Html.TextBoxFor(model => model.Location, htmlAttributes: new { @tabindex = ++intTabIndex, @class = "form-control", @placeholder = "Enter Location" })
                        @Html.ValidationMessageFor(m => m.Location, "", new { @class = "red-text" })
                    </div>
                </div>
            </div>

        </div>
        <div class="portlet-footer text-right">

            <button type="submit" class="btn btn-theme"> Save </button>
        </div>
        </div>
    }

@section Footer {
    <script src="~/Content/Plugins/bootstrap-fileinput/bootstrap-fileinput.js" type="text/javascript"></script>
    <script type="text/javascript" src="~/Scripts/jsGenerateDigitalCertificate.js?v=@GlobalDefaultValues.VersionNumber"></script>
}