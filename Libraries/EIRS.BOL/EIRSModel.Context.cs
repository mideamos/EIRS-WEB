//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EIRS.BOL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EIRSEntities : DbContext
    {
        public EIRSEntities()
            : base("name=EIRSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address_Types> Address_Types { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<Agency_Types> Agency_Types { get; set; }
        public virtual DbSet<Assessment_Group> Assessment_Group { get; set; }
        public virtual DbSet<Assessment_Item_Category> Assessment_Item_Category { get; set; }
        public virtual DbSet<Assessment_Item_SubCategory> Assessment_Item_SubCategory { get; set; }
        public virtual DbSet<Assessment_Items> Assessment_Items { get; set; }
        public virtual DbSet<Assessment_Rules> Assessment_Rules { get; set; }
        public virtual DbSet<Assessment_SubGroup> Assessment_SubGroup { get; set; }
        public virtual DbSet<Asset_Types> Asset_Types { get; set; }
        public virtual DbSet<Building> Buildings { get; set; }
        public virtual DbSet<Building_Completion> Building_Completion { get; set; }
        public virtual DbSet<Building_Ownership> Building_Ownership { get; set; }
        public virtual DbSet<Building_Purpose> Building_Purpose { get; set; }
        public virtual DbSet<Building_Types> Building_Types { get; set; }
        public virtual DbSet<Building_Unit> Building_Unit { get; set; }
        public virtual DbSet<Business> Businesses { get; set; }
        public virtual DbSet<Business_Category> Business_Category { get; set; }
        public virtual DbSet<Business_Operation> Business_Operation { get; set; }
        public virtual DbSet<Business_Sector> Business_Sector { get; set; }
        public virtual DbSet<Business_Structure> Business_Structure { get; set; }
        public virtual DbSet<Business_SubSector> Business_SubSector { get; set; }
        public virtual DbSet<Business_Types> Business_Types { get; set; }
        public virtual DbSet<Dealer_Types> Dealer_Types { get; set; }
        public virtual DbSet<Directorate> Directorates { get; set; }
        public virtual DbSet<Economic_Activities> Economic_Activities { get; set; }
        public virtual DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public virtual DbSet<Exception_Type> Exception_Type { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Government> Governments { get; set; }
        public virtual DbSet<Government_Types> Government_Types { get; set; }
        public virtual DbSet<Individual> Individuals { get; set; }
        public virtual DbSet<Land> Lands { get; set; }
        public virtual DbSet<Land_Development> Land_Development { get; set; }
        public virtual DbSet<Land_Function> Land_Function { get; set; }
        public virtual DbSet<Land_Ownership> Land_Ownership { get; set; }
        public virtual DbSet<Land_Purpose> Land_Purpose { get; set; }
        public virtual DbSet<Land_StreetCondition> Land_StreetCondition { get; set; }
        public virtual DbSet<LGA> LGAs { get; set; }
        public virtual DbSet<LGAClass> LGAClasses { get; set; }
        public virtual DbSet<MAP_Assessment_AssessmentItem> MAP_Assessment_AssessmentItem { get; set; }
        public virtual DbSet<MAP_AssessmentRule_AssessmentItem> MAP_AssessmentRule_AssessmentItem { get; set; }
        public virtual DbSet<MAP_AssessmentRule_SettlementMethod> MAP_AssessmentRule_SettlementMethod { get; set; }
        public virtual DbSet<MAP_Building_BuildingUnit> MAP_Building_BuildingUnit { get; set; }
        public virtual DbSet<MAP_Building_Land> MAP_Building_Land { get; set; }
        public virtual DbSet<MAP_Business_Building> MAP_Business_Building { get; set; }
        public virtual DbSet<MAP_Company_AddressInformation> MAP_Company_AddressInformation { get; set; }
        public virtual DbSet<MAP_Directorates_RevenueStream> MAP_Directorates_RevenueStream { get; set; }
        public virtual DbSet<MAP_Government_AddressInformation> MAP_Government_AddressInformation { get; set; }
        public virtual DbSet<MAP_Individual_AddressInformation> MAP_Individual_AddressInformation { get; set; }
        public virtual DbSet<MAP_MDAService_MDAServiceItem> MAP_MDAService_MDAServiceItem { get; set; }
        public virtual DbSet<MAP_MDAService_SettlementMethod> MAP_MDAService_SettlementMethod { get; set; }
        public virtual DbSet<MAP_ServiceBill_MDAServiceItem> MAP_ServiceBill_MDAServiceItem { get; set; }
        public virtual DbSet<MAP_Settlement_SettlementItem> MAP_Settlement_SettlementItem { get; set; }
        public virtual DbSet<MAP_Special_AddressInformation> MAP_Special_AddressInformation { get; set; }
        public virtual DbSet<MAP_TaxPayer_Asset> MAP_TaxPayer_Asset { get; set; }
        public virtual DbSet<MAP_TaxPayer_Asset_Profile> MAP_TaxPayer_Asset_Profile { get; set; }
        public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }
        public virtual DbSet<MDA_Service_Items> MDA_Service_Items { get; set; }
        public virtual DbSet<MDA_Services> MDA_Services { get; set; }
        public virtual DbSet<MST_Computation> MST_Computation { get; set; }
        public virtual DbSet<MST_LastNumber> MST_LastNumber { get; set; }
        public virtual DbSet<MST_PaymentStatus> MST_PaymentStatus { get; set; }
        public virtual DbSet<MST_RuleRun> MST_RuleRun { get; set; }
        public virtual DbSet<Nationality> Nationalities { get; set; }
        public virtual DbSet<Notification_Method> Notification_Method { get; set; }
        public virtual DbSet<Notification_Mode> Notification_Mode { get; set; }
        public virtual DbSet<Notification_Type> Notification_Type { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Payment_Account> Payment_Account { get; set; }
        public virtual DbSet<Payment_Frequency> Payment_Frequency { get; set; }
        public virtual DbSet<Payment_Options> Payment_Options { get; set; }
        public virtual DbSet<ProfileAttribute> ProfileAttributes { get; set; }
        public virtual DbSet<ProfileGroup> ProfileGroups { get; set; }
        public virtual DbSet<Profile> Profiles { get; set; }
        public virtual DbSet<ProfileSector> ProfileSectors { get; set; }
        public virtual DbSet<ProfileSectorElement> ProfileSectorElements { get; set; }
        public virtual DbSet<ProfileSectorSubElement> ProfileSectorSubElements { get; set; }
        public virtual DbSet<ProfileSubAttribute> ProfileSubAttributes { get; set; }
        public virtual DbSet<ProfileSubGroup> ProfileSubGroups { get; set; }
        public virtual DbSet<ProfileSubSector> ProfileSubSectors { get; set; }
        public virtual DbSet<ProfileTaxPayerRole> ProfileTaxPayerRoles { get; set; }
        public virtual DbSet<ProfileTaxPayerType> ProfileTaxPayerTypes { get; set; }
        public virtual DbSet<Revenue_Stream> Revenue_Stream { get; set; }
        public virtual DbSet<Revenue_SubStream> Revenue_SubStream { get; set; }
        public virtual DbSet<Scratch_Card_Dealers> Scratch_Card_Dealers { get; set; }
        public virtual DbSet<Scratch_Card_Printer> Scratch_Card_Printer { get; set; }
        public virtual DbSet<ScratchCard_PurchaseRequest> ScratchCard_PurchaseRequest { get; set; }
        public virtual DbSet<Settlement_Method> Settlement_Method { get; set; }
        public virtual DbSet<Settlement_Status> Settlement_Status { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<Special> Specials { get; set; }
        public virtual DbSet<SystemRole> SystemRoles { get; set; }
        public virtual DbSet<SystemUser> SystemUsers { get; set; }
        public virtual DbSet<TaxPayer_Roles> TaxPayer_Roles { get; set; }
        public virtual DbSet<TaxPayer_Types> TaxPayer_Types { get; set; }
        public virtual DbSet<TaxPayerPayment> TaxPayerPayments { get; set; }
        public virtual DbSet<Title> Titles { get; set; }
        public virtual DbSet<Town> Towns { get; set; }
        public virtual DbSet<Unit_Function> Unit_Function { get; set; }
        public virtual DbSet<Unit_Occupancy> Unit_Occupancy { get; set; }
        public virtual DbSet<Unit_Purpose> Unit_Purpose { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<Vehicle_Function> Vehicle_Function { get; set; }
        public virtual DbSet<Vehicle_Insurance> Vehicle_Insurance { get; set; }
        public virtual DbSet<Vehicle_Licenses> Vehicle_Licenses { get; set; }
        public virtual DbSet<Vehicle_Ownership> Vehicle_Ownership { get; set; }
        public virtual DbSet<Vehicle_Purpose> Vehicle_Purpose { get; set; }
        public virtual DbSet<Vehicle_SubTypes> Vehicle_SubTypes { get; set; }
        public virtual DbSet<Vehicle_Types> Vehicle_Types { get; set; }
        public virtual DbSet<Ward> Wards { get; set; }
        public virtual DbSet<vw_AssessmentRule> vw_AssessmentRule { get; set; }
        public virtual DbSet<vw_Building> vw_Building { get; set; }
        public virtual DbSet<vw_Business> vw_Business { get; set; }
        public virtual DbSet<vw_Land> vw_Land { get; set; }
        public virtual DbSet<vw_MDAServices> vw_MDAServices { get; set; }
        public virtual DbSet<vw_Notifications> vw_Notifications { get; set; }
        public virtual DbSet<vw_Vehicle> vw_Vehicle { get; set; }
        public virtual DbSet<PayDirect_Notifications> PayDirect_Notifications { get; set; }
        public virtual DbSet<MST_RegisterationStatus> MST_RegisterationStatus { get; set; }
        public virtual DbSet<vw_PaymentAccountOperation> vw_PaymentAccountOperation { get; set; }
        public virtual DbSet<vw_PaymentAccount> vw_PaymentAccount { get; set; }
        public virtual DbSet<Review_Status> Review_Status { get; set; }
        public virtual DbSet<MAP_TaxPayer_Review> MAP_TaxPayer_Review { get; set; }
        public virtual DbSet<JTB_NonIndividual> JTB_NonIndividual { get; set; }
        public virtual DbSet<MAP_TaxOffice_Target> MAP_TaxOffice_Target { get; set; }
        public virtual DbSet<MAP_TaxOfficer_Target> MAP_TaxOfficer_Target { get; set; }
        public virtual DbSet<Late_Charges> Late_Charges { get; set; }
        public virtual DbSet<MAP_Assessment_LateCharge> MAP_Assessment_LateCharge { get; set; }
        public virtual DbSet<MAP_Assessment_Adjustment> MAP_Assessment_Adjustment { get; set; }
        public virtual DbSet<MAP_ServiceBill_Adjustment> MAP_ServiceBill_Adjustment { get; set; }
        public virtual DbSet<MAP_ServiceBill_LateCharge> MAP_ServiceBill_LateCharge { get; set; }
        public virtual DbSet<Receipt_Status> Receipt_Status { get; set; }
        public virtual DbSet<EM_Bank> EM_Bank { get; set; }
        public virtual DbSet<EM_Category> EM_Category { get; set; }
        public virtual DbSet<EM_DataSource> EM_DataSource { get; set; }
        public virtual DbSet<EM_IGRClassification> EM_IGRClassification { get; set; }
        public virtual DbSet<EM_ImportLog> EM_ImportLog { get; set; }
        public virtual DbSet<EM_RevenueHead> EM_RevenueHead { get; set; }
        public virtual DbSet<Operation_Types> Operation_Types { get; set; }
        public virtual DbSet<EM_MAP_IGRClassification_Entry> EM_MAP_IGRClassification_Entry { get; set; }
        public virtual DbSet<EM_BankStatement> EM_BankStatement { get; set; }
        public virtual DbSet<EM_PD_Main_Authorized> EM_PD_Main_Authorized { get; set; }
        public virtual DbSet<EM_PD_Main_Pending> EM_PD_Main_Pending { get; set; }
        public virtual DbSet<EM_PD_MVA_Pending> EM_PD_MVA_Pending { get; set; }
        public virtual DbSet<vw_EM_BankStatement> vw_EM_BankStatement { get; set; }
        public virtual DbSet<vw_EM_PD_Main_Authorized> vw_EM_PD_Main_Authorized { get; set; }
        public virtual DbSet<vw_EM_PD_Main_Pending> vw_EM_PD_Main_Pending { get; set; }
        public virtual DbSet<vw_EM_PD_MVA_Pending> vw_EM_PD_MVA_Pending { get; set; }
        public virtual DbSet<EM_PD_MVA_Authorized> EM_PD_MVA_Authorized { get; set; }
        public virtual DbSet<vw_EM_PD_MVA_Authorized> vw_EM_PD_MVA_Authorized { get; set; }
        public virtual DbSet<TCCDetail> TCCDetails { get; set; }
        public virtual DbSet<Tax_Offices> Tax_Offices { get; set; }
        public virtual DbSet<MAP_TCCRequest_Generate> MAP_TCCRequest_Generate { get; set; }
        public virtual DbSet<MAP_TCCRequest_GenerateTCCDetail> MAP_TCCRequest_GenerateTCCDetail { get; set; }
        public virtual DbSet<MAP_TCCRequest_PrepareTCCDraft> MAP_TCCRequest_PrepareTCCDraft { get; set; }
        public virtual DbSet<MAP_TCCRequest_Seal> MAP_TCCRequest_Seal { get; set; }
        public virtual DbSet<MAP_TCCRequest_Stages> MAP_TCCRequest_Stages { get; set; }
        public virtual DbSet<MAP_TCCRequest_Validate> MAP_TCCRequest_Validate { get; set; }
        public virtual DbSet<MAP_TCCRequest_ValidateTaxPayerIncome> MAP_TCCRequest_ValidateTaxPayerIncome { get; set; }
        public virtual DbSet<MAP_TCCRequest_ValidateTaxPayerInformation> MAP_TCCRequest_ValidateTaxPayerInformation { get; set; }
        public virtual DbSet<MST_TCCRequestStatus> MST_TCCRequestStatus { get; set; }
        public virtual DbSet<MST_TCCStage> MST_TCCStage { get; set; }
        public virtual DbSet<MAP_TCCRequest_Generate_Field> MAP_TCCRequest_Generate_Field { get; set; }
        public virtual DbSet<vw_TCCRequestList> vw_TCCRequestList { get; set; }
        public virtual DbSet<MST_TCCStatus> MST_TCCStatus { get; set; }
        public virtual DbSet<TaxClearanceCertificate> TaxClearanceCertificates { get; set; }
        public virtual DbSet<MAP_TCCRequest_SignVisible> MAP_TCCRequest_SignVisible { get; set; }
        public virtual DbSet<MAP_TCCRequest_SignDigital> MAP_TCCRequest_SignDigital { get; set; }
        public virtual DbSet<MAP_TCCRequest_Issue> MAP_TCCRequest_Issue { get; set; }
        public virtual DbSet<MAP_ServiceBill_MDAService> MAP_ServiceBill_MDAService { get; set; }
        public virtual DbSet<ServiceBill> ServiceBills { get; set; }
        public virtual DbSet<Settlement> Settlements { get; set; }
        public virtual DbSet<MAP_Assessment_AssessmentRule> MAP_Assessment_AssessmentRule { get; set; }
        public virtual DbSet<TCC_Request> TCC_Request { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<MAP_TreasuryReceipt_Settlement> MAP_TreasuryReceipt_Settlement { get; set; }
        public virtual DbSet<vw_Company> vw_Company { get; set; }
        public virtual DbSet<vw_Government> vw_Government { get; set; }
        public virtual DbSet<vw_Individual> vw_Individual { get; set; }
        public virtual DbSet<vw_Special> vw_Special { get; set; }
        public virtual DbSet<SFTP_DataSubmissionType> SFTP_DataSubmissionType { get; set; }
        public virtual DbSet<SFTP_DataSubmitter> SFTP_DataSubmitter { get; set; }
        public virtual DbSet<vw_BillForPoASettlement> vw_BillForPoASettlement { get; set; }
        public virtual DbSet<Certificate_Types> Certificate_Types { get; set; }
        public virtual DbSet<MAP_CertificateType_Field> MAP_CertificateType_Field { get; set; }
        public virtual DbSet<MAP_CertificateType_Items> MAP_CertificateType_Items { get; set; }
        public virtual DbSet<MST_FieldType> MST_FieldType { get; set; }
        public virtual DbSet<Profile_Types> Profile_Types { get; set; }
        public virtual DbSet<MAP_Certificate_CustomField> MAP_Certificate_CustomField { get; set; }
        public virtual DbSet<MST_CertificateStatus> MST_CertificateStatus { get; set; }
        public virtual DbSet<vw_CertificateList> vw_CertificateList { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<MAP_TCCRequest_IncomeStream> MAP_TCCRequest_IncomeStream { get; set; }
        public virtual DbSet<MAP_Certificate_Generate> MAP_Certificate_Generate { get; set; }
        public virtual DbSet<MAP_Certificate_Generate_Field> MAP_Certificate_Generate_Field { get; set; }
        public virtual DbSet<MAP_Certificate_Seal> MAP_Certificate_Seal { get; set; }
        public virtual DbSet<MAP_Certificate_Validate> MAP_Certificate_Validate { get; set; }
        public virtual DbSet<MAP_Certificate_Issue> MAP_Certificate_Issue { get; set; }
        public virtual DbSet<MAP_Certificate_SignDigital> MAP_Certificate_SignDigital { get; set; }
        public virtual DbSet<MAP_Certificate_SignVisible> MAP_Certificate_SignVisible { get; set; }
        public virtual DbSet<MAP_Certificate_Stages> MAP_Certificate_Stages { get; set; }
        public virtual DbSet<MST_CertificateStage> MST_CertificateStage { get; set; }
        public virtual DbSet<SFTP_MAP_DataSubmitter_DataSubmissionType> SFTP_MAP_DataSubmitter_DataSubmissionType { get; set; }
        public virtual DbSet<SFTP_DataSubmission> SFTP_DataSubmission { get; set; }
        public virtual DbSet<vw_AssessmentBill> vw_AssessmentBill { get; set; }
        public virtual DbSet<JTB_Individual> JTB_Individual { get; set; }
        public virtual DbSet<MAP_PaymentAccount_Operation> MAP_PaymentAccount_Operation { get; set; }
        public virtual DbSet<AL_Screen> AL_Screen { get; set; }
        public virtual DbSet<MAP_TCCRequest_Notes_Document> MAP_TCCRequest_Notes_Document { get; set; }
        public virtual DbSet<MAP_TaxPayer_Document> MAP_TaxPayer_Document { get; set; }
        public virtual DbSet<MAP_TaxPayer_Message> MAP_TaxPayer_Message { get; set; }
        public virtual DbSet<MAP_TaxPayer_Message_Document> MAP_TaxPayer_Message_Document { get; set; }
        public virtual DbSet<MAP_TCCRequest_Notes> MAP_TCCRequest_Notes { get; set; }
        public virtual DbSet<Assessment> Assessments { get; set; }
        public virtual DbSet<Audit_Log> Audit_Log { get; set; }
        public virtual DbSet<MAP_TCCRequest_Revoke> MAP_TCCRequest_Revoke { get; set; }
        public virtual DbSet<MAP_Certificate_Revoke> MAP_Certificate_Revoke { get; set; }
        public virtual DbSet<Treasury_Receipt> Treasury_Receipt { get; set; }
        public virtual DbSet<vw_ServiceBillNew> vw_ServiceBillNew { get; set; }
        public virtual DbSet<PayeTccHolder> PayeTccHolders { get; set; }
        public virtual DbSet<NewERASTccHolder> NewERASTccHolders { get; set; }
        public virtual DbSet<TccRefHolder> TccRefHolders { get; set; }
        public virtual DbSet<Zone> Zones { get; set; }
        public virtual DbSet<ZoneLGA> ZoneLGAs { get; set; }
        public virtual DbSet<ValidateTcc> ValidateTccs { get; set; }
        public virtual DbSet<NatureOfBusiness> NatureOfBusinesses { get; set; }
        public virtual DbSet<MapAssessmentDisapprove_> MapAssessmentDisapprove_ { get; set; }
        public virtual DbSet<DA_And_PAYE_TCC_Details> DA_And_PAYE_TCC_Details { get; set; }
        public virtual DbSet<NewTCCDetailsHold> NewTCCDetailsHolds { get; set; }
        public virtual DbSet<BusinessName> BusinessNames { get; set; }
    
        public virtual ObjectResult<string> ELMAH_GetErrorsXml(string application, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorsXml", applicationParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorXml(string application, Nullable<System.Guid> errorId)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorXml", applicationParameter, errorIdParameter);
        }
    
        public virtual int ELMAH_LogError(Nullable<System.Guid> errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELMAH_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    
        public virtual ObjectResult<usp_DC_GetAssessmentItemWithoutRule_Result> usp_DC_GetAssessmentItemWithoutRule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DC_GetAssessmentItemWithoutRule_Result>("usp_DC_GetAssessmentItemWithoutRule");
        }
    
        public virtual ObjectResult<usp_DC_GetCompanyWithoutAssessment_Result> usp_DC_GetCompanyWithoutAssessment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DC_GetCompanyWithoutAssessment_Result>("usp_DC_GetCompanyWithoutAssessment");
        }
    
        public virtual ObjectResult<usp_DC_GetIndividualWithoutAssessment_Result> usp_DC_GetIndividualWithoutAssessment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DC_GetIndividualWithoutAssessment_Result>("usp_DC_GetIndividualWithoutAssessment");
        }
    
        public virtual ObjectResult<usp_DC_GetProfileWithoutRule_Result> usp_DC_GetProfileWithoutRule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DC_GetProfileWithoutRule_Result>("usp_DC_GetProfileWithoutRule");
        }
    
        public virtual ObjectResult<usp_DC_GetTaxPayerWithoutAsset_Result> usp_DC_GetTaxPayerWithoutAsset(string taxPayerTypeIds, string assetTypeIds)
        {
            var taxPayerTypeIdsParameter = taxPayerTypeIds != null ?
                new ObjectParameter("TaxPayerTypeIds", taxPayerTypeIds) :
                new ObjectParameter("TaxPayerTypeIds", typeof(string));
    
            var assetTypeIdsParameter = assetTypeIds != null ?
                new ObjectParameter("AssetTypeIds", assetTypeIds) :
                new ObjectParameter("AssetTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DC_GetTaxPayerWithoutAsset_Result>("usp_DC_GetTaxPayerWithoutAsset", taxPayerTypeIdsParameter, assetTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAddressTypeList_Result> usp_GetAddressTypeList(string addressTypeName, Nullable<int> addressTypeID, string addressTypeIds, Nullable<int> intStatus, string includeAddressTypeIds, string excludeAddressTypeIds)
        {
            var addressTypeNameParameter = addressTypeName != null ?
                new ObjectParameter("AddressTypeName", addressTypeName) :
                new ObjectParameter("AddressTypeName", typeof(string));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var addressTypeIdsParameter = addressTypeIds != null ?
                new ObjectParameter("AddressTypeIds", addressTypeIds) :
                new ObjectParameter("AddressTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAddressTypeIdsParameter = includeAddressTypeIds != null ?
                new ObjectParameter("IncludeAddressTypeIds", includeAddressTypeIds) :
                new ObjectParameter("IncludeAddressTypeIds", typeof(string));
    
            var excludeAddressTypeIdsParameter = excludeAddressTypeIds != null ?
                new ObjectParameter("ExcludeAddressTypeIds", excludeAddressTypeIds) :
                new ObjectParameter("ExcludeAddressTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAddressTypeList_Result>("usp_GetAddressTypeList", addressTypeNameParameter, addressTypeIDParameter, addressTypeIdsParameter, intStatusParameter, includeAddressTypeIdsParameter, excludeAddressTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAgencyList_Result> usp_GetAgencyList(string agencyName, Nullable<int> agencyID, Nullable<int> agencyTypeID, string agencyIds, Nullable<int> intStatus, string includeAgencyIds, string excludeAgencyIds)
        {
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var agencyTypeIDParameter = agencyTypeID.HasValue ?
                new ObjectParameter("AgencyTypeID", agencyTypeID) :
                new ObjectParameter("AgencyTypeID", typeof(int));
    
            var agencyIdsParameter = agencyIds != null ?
                new ObjectParameter("AgencyIds", agencyIds) :
                new ObjectParameter("AgencyIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAgencyIdsParameter = includeAgencyIds != null ?
                new ObjectParameter("IncludeAgencyIds", includeAgencyIds) :
                new ObjectParameter("IncludeAgencyIds", typeof(string));
    
            var excludeAgencyIdsParameter = excludeAgencyIds != null ?
                new ObjectParameter("ExcludeAgencyIds", excludeAgencyIds) :
                new ObjectParameter("ExcludeAgencyIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgencyList_Result>("usp_GetAgencyList", agencyNameParameter, agencyIDParameter, agencyTypeIDParameter, agencyIdsParameter, intStatusParameter, includeAgencyIdsParameter, excludeAgencyIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAgencyTypeList_Result> usp_GetAgencyTypeList(string agencyTypeName, Nullable<int> agencyTypeID, string agencyTypeIds, Nullable<int> intStatus, string includeAgencyTypeIds, string excludeAgencyTypeIds)
        {
            var agencyTypeNameParameter = agencyTypeName != null ?
                new ObjectParameter("AgencyTypeName", agencyTypeName) :
                new ObjectParameter("AgencyTypeName", typeof(string));
    
            var agencyTypeIDParameter = agencyTypeID.HasValue ?
                new ObjectParameter("AgencyTypeID", agencyTypeID) :
                new ObjectParameter("AgencyTypeID", typeof(int));
    
            var agencyTypeIdsParameter = agencyTypeIds != null ?
                new ObjectParameter("AgencyTypeIds", agencyTypeIds) :
                new ObjectParameter("AgencyTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAgencyTypeIdsParameter = includeAgencyTypeIds != null ?
                new ObjectParameter("IncludeAgencyTypeIds", includeAgencyTypeIds) :
                new ObjectParameter("IncludeAgencyTypeIds", typeof(string));
    
            var excludeAgencyTypeIdsParameter = excludeAgencyTypeIds != null ?
                new ObjectParameter("ExcludeAgencyTypeIds", excludeAgencyTypeIds) :
                new ObjectParameter("ExcludeAgencyTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAgencyTypeList_Result>("usp_GetAgencyTypeList", agencyTypeNameParameter, agencyTypeIDParameter, agencyTypeIdsParameter, intStatusParameter, includeAgencyTypeIdsParameter, excludeAgencyTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessment_AssessmentRuleList_Result> usp_GetAssessment_AssessmentRuleList(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessment_AssessmentRuleList_Result>("usp_GetAssessment_AssessmentRuleList", assessmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentGroupList_Result> usp_GetAssessmentGroupList(string assessmentGroupName, Nullable<int> assessmentGroupID, Nullable<int> assetTypeID, string assessmentGroupIds, Nullable<int> intStatus, string includeAssessmentGroupIds, string excludeAssessmentGroupIds)
        {
            var assessmentGroupNameParameter = assessmentGroupName != null ?
                new ObjectParameter("AssessmentGroupName", assessmentGroupName) :
                new ObjectParameter("AssessmentGroupName", typeof(string));
    
            var assessmentGroupIDParameter = assessmentGroupID.HasValue ?
                new ObjectParameter("AssessmentGroupID", assessmentGroupID) :
                new ObjectParameter("AssessmentGroupID", typeof(int));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assessmentGroupIdsParameter = assessmentGroupIds != null ?
                new ObjectParameter("AssessmentGroupIds", assessmentGroupIds) :
                new ObjectParameter("AssessmentGroupIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAssessmentGroupIdsParameter = includeAssessmentGroupIds != null ?
                new ObjectParameter("IncludeAssessmentGroupIds", includeAssessmentGroupIds) :
                new ObjectParameter("IncludeAssessmentGroupIds", typeof(string));
    
            var excludeAssessmentGroupIdsParameter = excludeAssessmentGroupIds != null ?
                new ObjectParameter("ExcludeAssessmentGroupIds", excludeAssessmentGroupIds) :
                new ObjectParameter("ExcludeAssessmentGroupIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentGroupList_Result>("usp_GetAssessmentGroupList", assessmentGroupNameParameter, assessmentGroupIDParameter, assetTypeIDParameter, assessmentGroupIdsParameter, intStatusParameter, includeAssessmentGroupIdsParameter, excludeAssessmentGroupIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentItemCategoryList_Result> usp_GetAssessmentItemCategoryList(string assessmentItemCategoryName, Nullable<int> assessmentItemCategoryID, string assessmentItemCategoryIds, Nullable<int> intStatus, string includeAssessmentItemCategoryIds, string excludeAssessmentItemCategoryIds)
        {
            var assessmentItemCategoryNameParameter = assessmentItemCategoryName != null ?
                new ObjectParameter("AssessmentItemCategoryName", assessmentItemCategoryName) :
                new ObjectParameter("AssessmentItemCategoryName", typeof(string));
    
            var assessmentItemCategoryIDParameter = assessmentItemCategoryID.HasValue ?
                new ObjectParameter("AssessmentItemCategoryID", assessmentItemCategoryID) :
                new ObjectParameter("AssessmentItemCategoryID", typeof(int));
    
            var assessmentItemCategoryIdsParameter = assessmentItemCategoryIds != null ?
                new ObjectParameter("AssessmentItemCategoryIds", assessmentItemCategoryIds) :
                new ObjectParameter("AssessmentItemCategoryIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAssessmentItemCategoryIdsParameter = includeAssessmentItemCategoryIds != null ?
                new ObjectParameter("IncludeAssessmentItemCategoryIds", includeAssessmentItemCategoryIds) :
                new ObjectParameter("IncludeAssessmentItemCategoryIds", typeof(string));
    
            var excludeAssessmentItemCategoryIdsParameter = excludeAssessmentItemCategoryIds != null ?
                new ObjectParameter("ExcludeAssessmentItemCategoryIds", excludeAssessmentItemCategoryIds) :
                new ObjectParameter("ExcludeAssessmentItemCategoryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentItemCategoryList_Result>("usp_GetAssessmentItemCategoryList", assessmentItemCategoryNameParameter, assessmentItemCategoryIDParameter, assessmentItemCategoryIdsParameter, intStatusParameter, includeAssessmentItemCategoryIdsParameter, excludeAssessmentItemCategoryIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentItemList_Result> usp_GetAssessmentItemList(Nullable<int> assessmentItemID, string assessmentItemReferenceNo, Nullable<int> intStatus)
        {
            var assessmentItemIDParameter = assessmentItemID.HasValue ?
                new ObjectParameter("AssessmentItemID", assessmentItemID) :
                new ObjectParameter("AssessmentItemID", typeof(int));
    
            var assessmentItemReferenceNoParameter = assessmentItemReferenceNo != null ?
                new ObjectParameter("AssessmentItemReferenceNo", assessmentItemReferenceNo) :
                new ObjectParameter("AssessmentItemReferenceNo", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentItemList_Result>("usp_GetAssessmentItemList", assessmentItemIDParameter, assessmentItemReferenceNoParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentItemSubCategoryList_Result> usp_GetAssessmentItemSubCategoryList(string assessmentItemSubCategoryName, Nullable<int> assessmentItemSubCategoryID, Nullable<int> assessmentItemCategoryID, string assessmentItemSubCategoryIds, Nullable<int> intStatus, string includeAssessmentItemSubCategoryIds, string excludeAssessmentItemSubCategoryIds)
        {
            var assessmentItemSubCategoryNameParameter = assessmentItemSubCategoryName != null ?
                new ObjectParameter("AssessmentItemSubCategoryName", assessmentItemSubCategoryName) :
                new ObjectParameter("AssessmentItemSubCategoryName", typeof(string));
    
            var assessmentItemSubCategoryIDParameter = assessmentItemSubCategoryID.HasValue ?
                new ObjectParameter("AssessmentItemSubCategoryID", assessmentItemSubCategoryID) :
                new ObjectParameter("AssessmentItemSubCategoryID", typeof(int));
    
            var assessmentItemCategoryIDParameter = assessmentItemCategoryID.HasValue ?
                new ObjectParameter("AssessmentItemCategoryID", assessmentItemCategoryID) :
                new ObjectParameter("AssessmentItemCategoryID", typeof(int));
    
            var assessmentItemSubCategoryIdsParameter = assessmentItemSubCategoryIds != null ?
                new ObjectParameter("AssessmentItemSubCategoryIds", assessmentItemSubCategoryIds) :
                new ObjectParameter("AssessmentItemSubCategoryIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAssessmentItemSubCategoryIdsParameter = includeAssessmentItemSubCategoryIds != null ?
                new ObjectParameter("IncludeAssessmentItemSubCategoryIds", includeAssessmentItemSubCategoryIds) :
                new ObjectParameter("IncludeAssessmentItemSubCategoryIds", typeof(string));
    
            var excludeAssessmentItemSubCategoryIdsParameter = excludeAssessmentItemSubCategoryIds != null ?
                new ObjectParameter("ExcludeAssessmentItemSubCategoryIds", excludeAssessmentItemSubCategoryIds) :
                new ObjectParameter("ExcludeAssessmentItemSubCategoryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentItemSubCategoryList_Result>("usp_GetAssessmentItemSubCategoryList", assessmentItemSubCategoryNameParameter, assessmentItemSubCategoryIDParameter, assessmentItemCategoryIDParameter, assessmentItemSubCategoryIdsParameter, intStatusParameter, includeAssessmentItemSubCategoryIdsParameter, excludeAssessmentItemSubCategoryIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentList_Result> usp_GetAssessmentList(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<long> assessmentID, string assessmentRefNo, Nullable<int> intStatus)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(long));
    
            var assessmentRefNoParameter = assessmentRefNo != null ?
                new ObjectParameter("AssessmentRefNo", assessmentRefNo) :
                new ObjectParameter("AssessmentRefNo", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentList_Result>("usp_GetAssessmentList", taxPayerTypeIDParameter, taxPayerIDParameter, assessmentIDParameter, assessmentRefNoParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleBasedSettlement_Result> usp_GetAssessmentRuleBasedSettlement(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleBasedSettlement_Result>("usp_GetAssessmentRuleBasedSettlement", assessmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleForAssessment_Result> usp_GetAssessmentRuleForAssessment(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleForAssessment_Result>("usp_GetAssessmentRuleForAssessment", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleInformation_Result> usp_GetAssessmentRuleInformation(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleInformation_Result>("usp_GetAssessmentRuleInformation", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleItemList_Result> usp_GetAssessmentRuleItemList(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleItemList_Result>("usp_GetAssessmentRuleItemList", assessmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleList_Result> usp_GetAssessmentRuleList(Nullable<int> assessmentRuleID, Nullable<int> profileID, Nullable<int> intStatus)
        {
            var assessmentRuleIDParameter = assessmentRuleID.HasValue ?
                new ObjectParameter("AssessmentRuleID", assessmentRuleID) :
                new ObjectParameter("AssessmentRuleID", typeof(int));
    
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleList_Result>("usp_GetAssessmentRuleList", assessmentRuleIDParameter, profileIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentSubGroupList_Result> usp_GetAssessmentSubGroupList(string assessmentSubGroupName, Nullable<int> assessmentSubGroupID, Nullable<int> assetTypeID, Nullable<int> assessmentGroupID, string assessmentSubGroupIds, Nullable<int> intStatus, string includeAssessmentSubGroupIds, string excludeAssessmentSubGroupIds)
        {
            var assessmentSubGroupNameParameter = assessmentSubGroupName != null ?
                new ObjectParameter("AssessmentSubGroupName", assessmentSubGroupName) :
                new ObjectParameter("AssessmentSubGroupName", typeof(string));
    
            var assessmentSubGroupIDParameter = assessmentSubGroupID.HasValue ?
                new ObjectParameter("AssessmentSubGroupID", assessmentSubGroupID) :
                new ObjectParameter("AssessmentSubGroupID", typeof(int));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assessmentGroupIDParameter = assessmentGroupID.HasValue ?
                new ObjectParameter("AssessmentGroupID", assessmentGroupID) :
                new ObjectParameter("AssessmentGroupID", typeof(int));
    
            var assessmentSubGroupIdsParameter = assessmentSubGroupIds != null ?
                new ObjectParameter("AssessmentSubGroupIds", assessmentSubGroupIds) :
                new ObjectParameter("AssessmentSubGroupIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAssessmentSubGroupIdsParameter = includeAssessmentSubGroupIds != null ?
                new ObjectParameter("IncludeAssessmentSubGroupIds", includeAssessmentSubGroupIds) :
                new ObjectParameter("IncludeAssessmentSubGroupIds", typeof(string));
    
            var excludeAssessmentSubGroupIdsParameter = excludeAssessmentSubGroupIds != null ?
                new ObjectParameter("ExcludeAssessmentSubGroupIds", excludeAssessmentSubGroupIds) :
                new ObjectParameter("ExcludeAssessmentSubGroupIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentSubGroupList_Result>("usp_GetAssessmentSubGroupList", assessmentSubGroupNameParameter, assessmentSubGroupIDParameter, assetTypeIDParameter, assessmentGroupIDParameter, assessmentSubGroupIdsParameter, intStatusParameter, includeAssessmentSubGroupIdsParameter, excludeAssessmentSubGroupIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetAssetTypeList_Result> usp_GetAssetTypeList(string assetTypeName, Nullable<int> assetTypeID, string assetTypeIds, Nullable<int> intStatus, string includeAssetTypeIds, string excludeAssetTypeIds)
        {
            var assetTypeNameParameter = assetTypeName != null ?
                new ObjectParameter("AssetTypeName", assetTypeName) :
                new ObjectParameter("AssetTypeName", typeof(string));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assetTypeIdsParameter = assetTypeIds != null ?
                new ObjectParameter("AssetTypeIds", assetTypeIds) :
                new ObjectParameter("AssetTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeAssetTypeIdsParameter = includeAssetTypeIds != null ?
                new ObjectParameter("IncludeAssetTypeIds", includeAssetTypeIds) :
                new ObjectParameter("IncludeAssetTypeIds", typeof(string));
    
            var excludeAssetTypeIdsParameter = excludeAssetTypeIds != null ?
                new ObjectParameter("ExcludeAssetTypeIds", excludeAssetTypeIds) :
                new ObjectParameter("ExcludeAssetTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetTypeList_Result>("usp_GetAssetTypeList", assetTypeNameParameter, assetTypeIDParameter, assetTypeIdsParameter, intStatusParameter, includeAssetTypeIdsParameter, excludeAssetTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingCompletionList_Result> usp_GetBuildingCompletionList(string buildingCompletionName, Nullable<int> buildingCompletionID, string buildingCompletionIds, Nullable<int> intStatus, string includeBuildingCompletionIds, string excludeBuildingCompletionIds)
        {
            var buildingCompletionNameParameter = buildingCompletionName != null ?
                new ObjectParameter("BuildingCompletionName", buildingCompletionName) :
                new ObjectParameter("BuildingCompletionName", typeof(string));
    
            var buildingCompletionIDParameter = buildingCompletionID.HasValue ?
                new ObjectParameter("BuildingCompletionID", buildingCompletionID) :
                new ObjectParameter("BuildingCompletionID", typeof(int));
    
            var buildingCompletionIdsParameter = buildingCompletionIds != null ?
                new ObjectParameter("BuildingCompletionIds", buildingCompletionIds) :
                new ObjectParameter("BuildingCompletionIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBuildingCompletionIdsParameter = includeBuildingCompletionIds != null ?
                new ObjectParameter("IncludeBuildingCompletionIds", includeBuildingCompletionIds) :
                new ObjectParameter("IncludeBuildingCompletionIds", typeof(string));
    
            var excludeBuildingCompletionIdsParameter = excludeBuildingCompletionIds != null ?
                new ObjectParameter("ExcludeBuildingCompletionIds", excludeBuildingCompletionIds) :
                new ObjectParameter("ExcludeBuildingCompletionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingCompletionList_Result>("usp_GetBuildingCompletionList", buildingCompletionNameParameter, buildingCompletionIDParameter, buildingCompletionIdsParameter, intStatusParameter, includeBuildingCompletionIdsParameter, excludeBuildingCompletionIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingLandList_Result> usp_GetBuildingLandList(Nullable<int> buildingID, Nullable<int> landID, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var buildingIDParameter = buildingID.HasValue ?
                new ObjectParameter("BuildingID", buildingID) :
                new ObjectParameter("BuildingID", typeof(int));
    
            var landIDParameter = landID.HasValue ?
                new ObjectParameter("LandID", landID) :
                new ObjectParameter("LandID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingLandList_Result>("usp_GetBuildingLandList", buildingIDParameter, landIDParameter, taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingList_Result> usp_GetBuildingList(Nullable<int> buildingID, string buildingRIN, string buildingName, string streetName, Nullable<int> lGAID, Nullable<int> townID, Nullable<int> wardID, Nullable<int> intStatus)
        {
            var buildingIDParameter = buildingID.HasValue ?
                new ObjectParameter("BuildingID", buildingID) :
                new ObjectParameter("BuildingID", typeof(int));
    
            var buildingRINParameter = buildingRIN != null ?
                new ObjectParameter("BuildingRIN", buildingRIN) :
                new ObjectParameter("BuildingRIN", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("TownID", townID) :
                new ObjectParameter("TownID", typeof(int));
    
            var wardIDParameter = wardID.HasValue ?
                new ObjectParameter("WardID", wardID) :
                new ObjectParameter("WardID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingList_Result>("usp_GetBuildingList", buildingIDParameter, buildingRINParameter, buildingNameParameter, streetNameParameter, lGAIDParameter, townIDParameter, wardIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingOwnershipList_Result> usp_GetBuildingOwnershipList(string buildingOwnershipName, Nullable<int> buildingOwnershipID, string buildingOwnershipIds, Nullable<int> intStatus, string includeBuildingOwnershipIds, string excludeBuildingOwnershipIds)
        {
            var buildingOwnershipNameParameter = buildingOwnershipName != null ?
                new ObjectParameter("BuildingOwnershipName", buildingOwnershipName) :
                new ObjectParameter("BuildingOwnershipName", typeof(string));
    
            var buildingOwnershipIDParameter = buildingOwnershipID.HasValue ?
                new ObjectParameter("BuildingOwnershipID", buildingOwnershipID) :
                new ObjectParameter("BuildingOwnershipID", typeof(int));
    
            var buildingOwnershipIdsParameter = buildingOwnershipIds != null ?
                new ObjectParameter("BuildingOwnershipIds", buildingOwnershipIds) :
                new ObjectParameter("BuildingOwnershipIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBuildingOwnershipIdsParameter = includeBuildingOwnershipIds != null ?
                new ObjectParameter("IncludeBuildingOwnershipIds", includeBuildingOwnershipIds) :
                new ObjectParameter("IncludeBuildingOwnershipIds", typeof(string));
    
            var excludeBuildingOwnershipIdsParameter = excludeBuildingOwnershipIds != null ?
                new ObjectParameter("ExcludeBuildingOwnershipIds", excludeBuildingOwnershipIds) :
                new ObjectParameter("ExcludeBuildingOwnershipIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingOwnershipList_Result>("usp_GetBuildingOwnershipList", buildingOwnershipNameParameter, buildingOwnershipIDParameter, buildingOwnershipIdsParameter, intStatusParameter, includeBuildingOwnershipIdsParameter, excludeBuildingOwnershipIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingPurposeList_Result> usp_GetBuildingPurposeList(string buildingPurposeName, Nullable<int> buildingPurposeID, string buildingPurposeIds, Nullable<int> intStatus, string includeBuildingPurposeIds, string excludeBuildingPurposeIds)
        {
            var buildingPurposeNameParameter = buildingPurposeName != null ?
                new ObjectParameter("BuildingPurposeName", buildingPurposeName) :
                new ObjectParameter("BuildingPurposeName", typeof(string));
    
            var buildingPurposeIDParameter = buildingPurposeID.HasValue ?
                new ObjectParameter("BuildingPurposeID", buildingPurposeID) :
                new ObjectParameter("BuildingPurposeID", typeof(int));
    
            var buildingPurposeIdsParameter = buildingPurposeIds != null ?
                new ObjectParameter("BuildingPurposeIds", buildingPurposeIds) :
                new ObjectParameter("BuildingPurposeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBuildingPurposeIdsParameter = includeBuildingPurposeIds != null ?
                new ObjectParameter("IncludeBuildingPurposeIds", includeBuildingPurposeIds) :
                new ObjectParameter("IncludeBuildingPurposeIds", typeof(string));
    
            var excludeBuildingPurposeIdsParameter = excludeBuildingPurposeIds != null ?
                new ObjectParameter("ExcludeBuildingPurposeIds", excludeBuildingPurposeIds) :
                new ObjectParameter("ExcludeBuildingPurposeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingPurposeList_Result>("usp_GetBuildingPurposeList", buildingPurposeNameParameter, buildingPurposeIDParameter, buildingPurposeIdsParameter, intStatusParameter, includeBuildingPurposeIdsParameter, excludeBuildingPurposeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingTypeList_Result> usp_GetBuildingTypeList(string buildingTypeName, Nullable<int> buildingTypeID, string buildingTypeIds, Nullable<int> intStatus, string includeBuildingTypeIds, string excludeBuildingTypeIds)
        {
            var buildingTypeNameParameter = buildingTypeName != null ?
                new ObjectParameter("BuildingTypeName", buildingTypeName) :
                new ObjectParameter("BuildingTypeName", typeof(string));
    
            var buildingTypeIDParameter = buildingTypeID.HasValue ?
                new ObjectParameter("BuildingTypeID", buildingTypeID) :
                new ObjectParameter("BuildingTypeID", typeof(int));
    
            var buildingTypeIdsParameter = buildingTypeIds != null ?
                new ObjectParameter("BuildingTypeIds", buildingTypeIds) :
                new ObjectParameter("BuildingTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBuildingTypeIdsParameter = includeBuildingTypeIds != null ?
                new ObjectParameter("IncludeBuildingTypeIds", includeBuildingTypeIds) :
                new ObjectParameter("IncludeBuildingTypeIds", typeof(string));
    
            var excludeBuildingTypeIdsParameter = excludeBuildingTypeIds != null ?
                new ObjectParameter("ExcludeBuildingTypeIds", excludeBuildingTypeIds) :
                new ObjectParameter("ExcludeBuildingTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingTypeList_Result>("usp_GetBuildingTypeList", buildingTypeNameParameter, buildingTypeIDParameter, buildingTypeIdsParameter, intStatusParameter, includeBuildingTypeIdsParameter, excludeBuildingTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingUnitList_Result> usp_GetBuildingUnitList(string unitNumber, Nullable<int> buildingUnitID, string buildingUnitIds, Nullable<int> intStatus, string includeBuildingUnitIds, string excludeBuildingUnitIds)
        {
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var buildingUnitIDParameter = buildingUnitID.HasValue ?
                new ObjectParameter("BuildingUnitID", buildingUnitID) :
                new ObjectParameter("BuildingUnitID", typeof(int));
    
            var buildingUnitIdsParameter = buildingUnitIds != null ?
                new ObjectParameter("BuildingUnitIds", buildingUnitIds) :
                new ObjectParameter("BuildingUnitIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBuildingUnitIdsParameter = includeBuildingUnitIds != null ?
                new ObjectParameter("IncludeBuildingUnitIds", includeBuildingUnitIds) :
                new ObjectParameter("IncludeBuildingUnitIds", typeof(string));
    
            var excludeBuildingUnitIdsParameter = excludeBuildingUnitIds != null ?
                new ObjectParameter("ExcludeBuildingUnitIds", excludeBuildingUnitIds) :
                new ObjectParameter("ExcludeBuildingUnitIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingUnitList_Result>("usp_GetBuildingUnitList", unitNumberParameter, buildingUnitIDParameter, buildingUnitIdsParameter, intStatusParameter, includeBuildingUnitIdsParameter, excludeBuildingUnitIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingUnitNumberList_Result> usp_GetBuildingUnitNumberList(Nullable<int> buildingID, Nullable<int> buildingUnitID)
        {
            var buildingIDParameter = buildingID.HasValue ?
                new ObjectParameter("BuildingID", buildingID) :
                new ObjectParameter("BuildingID", typeof(int));
    
            var buildingUnitIDParameter = buildingUnitID.HasValue ?
                new ObjectParameter("BuildingUnitID", buildingUnitID) :
                new ObjectParameter("BuildingUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingUnitNumberList_Result>("usp_GetBuildingUnitNumberList", buildingIDParameter, buildingUnitIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessBuildingList_Result> usp_GetBusinessBuildingList(Nullable<int> buildingID, Nullable<int> businessID)
        {
            var buildingIDParameter = buildingID.HasValue ?
                new ObjectParameter("BuildingID", buildingID) :
                new ObjectParameter("BuildingID", typeof(int));
    
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessBuildingList_Result>("usp_GetBusinessBuildingList", buildingIDParameter, businessIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessCategoryList_Result> usp_GetBusinessCategoryList(string businessCategoryName, Nullable<int> businessCategoryID, Nullable<int> businessTypeID, string businessCategoryIds, Nullable<int> intStatus, string includeBusinessCategoryIds, string excludeBusinessCategoryIds)
        {
            var businessCategoryNameParameter = businessCategoryName != null ?
                new ObjectParameter("BusinessCategoryName", businessCategoryName) :
                new ObjectParameter("BusinessCategoryName", typeof(string));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessCategoryIdsParameter = businessCategoryIds != null ?
                new ObjectParameter("BusinessCategoryIds", businessCategoryIds) :
                new ObjectParameter("BusinessCategoryIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBusinessCategoryIdsParameter = includeBusinessCategoryIds != null ?
                new ObjectParameter("IncludeBusinessCategoryIds", includeBusinessCategoryIds) :
                new ObjectParameter("IncludeBusinessCategoryIds", typeof(string));
    
            var excludeBusinessCategoryIdsParameter = excludeBusinessCategoryIds != null ?
                new ObjectParameter("ExcludeBusinessCategoryIds", excludeBusinessCategoryIds) :
                new ObjectParameter("ExcludeBusinessCategoryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessCategoryList_Result>("usp_GetBusinessCategoryList", businessCategoryNameParameter, businessCategoryIDParameter, businessTypeIDParameter, businessCategoryIdsParameter, intStatusParameter, includeBusinessCategoryIdsParameter, excludeBusinessCategoryIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessList_Result> usp_GetBusinessList(Nullable<int> businessID, string businessRIN, string businessName, string businessAddress, Nullable<int> lGAID, Nullable<int> intStatus)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var businessRINParameter = businessRIN != null ?
                new ObjectParameter("BusinessRIN", businessRIN) :
                new ObjectParameter("BusinessRIN", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessAddressParameter = businessAddress != null ?
                new ObjectParameter("BusinessAddress", businessAddress) :
                new ObjectParameter("BusinessAddress", typeof(string));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessList_Result>("usp_GetBusinessList", businessIDParameter, businessRINParameter, businessNameParameter, businessAddressParameter, lGAIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessOperationList_Result> usp_GetBusinessOperationList(string businessOperationName, Nullable<int> businessOperationID, Nullable<int> businessTypeID, string businessOperationIds, Nullable<int> intStatus, string includeBusinessOperationIds, string excludeBusinessOperationIds)
        {
            var businessOperationNameParameter = businessOperationName != null ?
                new ObjectParameter("BusinessOperationName", businessOperationName) :
                new ObjectParameter("BusinessOperationName", typeof(string));
    
            var businessOperationIDParameter = businessOperationID.HasValue ?
                new ObjectParameter("BusinessOperationID", businessOperationID) :
                new ObjectParameter("BusinessOperationID", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessOperationIdsParameter = businessOperationIds != null ?
                new ObjectParameter("BusinessOperationIds", businessOperationIds) :
                new ObjectParameter("BusinessOperationIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBusinessOperationIdsParameter = includeBusinessOperationIds != null ?
                new ObjectParameter("IncludeBusinessOperationIds", includeBusinessOperationIds) :
                new ObjectParameter("IncludeBusinessOperationIds", typeof(string));
    
            var excludeBusinessOperationIdsParameter = excludeBusinessOperationIds != null ?
                new ObjectParameter("ExcludeBusinessOperationIds", excludeBusinessOperationIds) :
                new ObjectParameter("ExcludeBusinessOperationIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessOperationList_Result>("usp_GetBusinessOperationList", businessOperationNameParameter, businessOperationIDParameter, businessTypeIDParameter, businessOperationIdsParameter, intStatusParameter, includeBusinessOperationIdsParameter, excludeBusinessOperationIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessSectorList_Result> usp_GetBusinessSectorList(string businessSectorName, Nullable<int> businessSectorID, Nullable<int> businessTypeID, Nullable<int> businessCategoryID, string businessSectorIds, Nullable<int> intStatus, string includeBusinessSectorIds, string excludeBusinessSectorIds)
        {
            var businessSectorNameParameter = businessSectorName != null ?
                new ObjectParameter("BusinessSectorName", businessSectorName) :
                new ObjectParameter("BusinessSectorName", typeof(string));
    
            var businessSectorIDParameter = businessSectorID.HasValue ?
                new ObjectParameter("BusinessSectorID", businessSectorID) :
                new ObjectParameter("BusinessSectorID", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var businessSectorIdsParameter = businessSectorIds != null ?
                new ObjectParameter("BusinessSectorIds", businessSectorIds) :
                new ObjectParameter("BusinessSectorIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBusinessSectorIdsParameter = includeBusinessSectorIds != null ?
                new ObjectParameter("IncludeBusinessSectorIds", includeBusinessSectorIds) :
                new ObjectParameter("IncludeBusinessSectorIds", typeof(string));
    
            var excludeBusinessSectorIdsParameter = excludeBusinessSectorIds != null ?
                new ObjectParameter("ExcludeBusinessSectorIds", excludeBusinessSectorIds) :
                new ObjectParameter("ExcludeBusinessSectorIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessSectorList_Result>("usp_GetBusinessSectorList", businessSectorNameParameter, businessSectorIDParameter, businessTypeIDParameter, businessCategoryIDParameter, businessSectorIdsParameter, intStatusParameter, includeBusinessSectorIdsParameter, excludeBusinessSectorIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessStructureList_Result> usp_GetBusinessStructureList(string businessStructureName, Nullable<int> businessStructureID, Nullable<int> businessTypeID, string businessStructureIds, Nullable<int> intStatus, string includeBusinessStructureIds, string excludeBusinessStructureIds)
        {
            var businessStructureNameParameter = businessStructureName != null ?
                new ObjectParameter("BusinessStructureName", businessStructureName) :
                new ObjectParameter("BusinessStructureName", typeof(string));
    
            var businessStructureIDParameter = businessStructureID.HasValue ?
                new ObjectParameter("BusinessStructureID", businessStructureID) :
                new ObjectParameter("BusinessStructureID", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessStructureIdsParameter = businessStructureIds != null ?
                new ObjectParameter("BusinessStructureIds", businessStructureIds) :
                new ObjectParameter("BusinessStructureIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBusinessStructureIdsParameter = includeBusinessStructureIds != null ?
                new ObjectParameter("IncludeBusinessStructureIds", includeBusinessStructureIds) :
                new ObjectParameter("IncludeBusinessStructureIds", typeof(string));
    
            var excludeBusinessStructureIdsParameter = excludeBusinessStructureIds != null ?
                new ObjectParameter("ExcludeBusinessStructureIds", excludeBusinessStructureIds) :
                new ObjectParameter("ExcludeBusinessStructureIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessStructureList_Result>("usp_GetBusinessStructureList", businessStructureNameParameter, businessStructureIDParameter, businessTypeIDParameter, businessStructureIdsParameter, intStatusParameter, includeBusinessStructureIdsParameter, excludeBusinessStructureIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessSubSectorList_Result> usp_GetBusinessSubSectorList(string businessSubSectorName, Nullable<int> businessSubSectorID, Nullable<int> businessTypeID, Nullable<int> businessCategoryID, Nullable<int> businessSectorID, string businessSubSectorIds, Nullable<int> intStatus, string includeBusinessSubSectorIds, string excludeBusinessSubSectorIds)
        {
            var businessSubSectorNameParameter = businessSubSectorName != null ?
                new ObjectParameter("BusinessSubSectorName", businessSubSectorName) :
                new ObjectParameter("BusinessSubSectorName", typeof(string));
    
            var businessSubSectorIDParameter = businessSubSectorID.HasValue ?
                new ObjectParameter("BusinessSubSectorID", businessSubSectorID) :
                new ObjectParameter("BusinessSubSectorID", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            var businessSectorIDParameter = businessSectorID.HasValue ?
                new ObjectParameter("BusinessSectorID", businessSectorID) :
                new ObjectParameter("BusinessSectorID", typeof(int));
    
            var businessSubSectorIdsParameter = businessSubSectorIds != null ?
                new ObjectParameter("BusinessSubSectorIds", businessSubSectorIds) :
                new ObjectParameter("BusinessSubSectorIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBusinessSubSectorIdsParameter = includeBusinessSubSectorIds != null ?
                new ObjectParameter("IncludeBusinessSubSectorIds", includeBusinessSubSectorIds) :
                new ObjectParameter("IncludeBusinessSubSectorIds", typeof(string));
    
            var excludeBusinessSubSectorIdsParameter = excludeBusinessSubSectorIds != null ?
                new ObjectParameter("ExcludeBusinessSubSectorIds", excludeBusinessSubSectorIds) :
                new ObjectParameter("ExcludeBusinessSubSectorIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessSubSectorList_Result>("usp_GetBusinessSubSectorList", businessSubSectorNameParameter, businessSubSectorIDParameter, businessTypeIDParameter, businessCategoryIDParameter, businessSectorIDParameter, businessSubSectorIdsParameter, intStatusParameter, includeBusinessSubSectorIdsParameter, excludeBusinessSubSectorIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessTypeList_Result> usp_GetBusinessTypeList(string businessTypeName, Nullable<int> businessTypeID, string businessTypeIds, Nullable<int> intStatus, string includeBusinessTypeIds, string excludeBusinessTypeIds)
        {
            var businessTypeNameParameter = businessTypeName != null ?
                new ObjectParameter("BusinessTypeName", businessTypeName) :
                new ObjectParameter("BusinessTypeName", typeof(string));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessTypeIdsParameter = businessTypeIds != null ?
                new ObjectParameter("BusinessTypeIds", businessTypeIds) :
                new ObjectParameter("BusinessTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBusinessTypeIdsParameter = includeBusinessTypeIds != null ?
                new ObjectParameter("IncludeBusinessTypeIds", includeBusinessTypeIds) :
                new ObjectParameter("IncludeBusinessTypeIds", typeof(string));
    
            var excludeBusinessTypeIdsParameter = excludeBusinessTypeIds != null ?
                new ObjectParameter("ExcludeBusinessTypeIds", excludeBusinessTypeIds) :
                new ObjectParameter("ExcludeBusinessTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessTypeList_Result>("usp_GetBusinessTypeList", businessTypeNameParameter, businessTypeIDParameter, businessTypeIdsParameter, intStatusParameter, includeBusinessTypeIdsParameter, excludeBusinessTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetCompanyAddressInformation_Result> usp_GetCompanyAddressInformation(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompanyAddressInformation_Result>("usp_GetCompanyAddressInformation", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCompanyList_Result> usp_GetCompanyList(Nullable<int> companyID, string tIN, string companyRIN, string companyName, string cACRegistrationNumber, string mobileNumber, Nullable<int> intStatus)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var companyRINParameter = companyRIN != null ?
                new ObjectParameter("CompanyRIN", companyRIN) :
                new ObjectParameter("CompanyRIN", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var cACRegistrationNumberParameter = cACRegistrationNumber != null ?
                new ObjectParameter("CACRegistrationNumber", cACRegistrationNumber) :
                new ObjectParameter("CACRegistrationNumber", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompanyList_Result>("usp_GetCompanyList", companyIDParameter, tINParameter, companyRINParameter, companyNameParameter, cACRegistrationNumberParameter, mobileNumberParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetDirectorateList_Result> usp_GetDirectorateList(string directorateName, Nullable<int> directorateID, string directorateIds, Nullable<int> intStatus, string includeDirectorateIds, string excludeDirectorateIds)
        {
            var directorateNameParameter = directorateName != null ?
                new ObjectParameter("DirectorateName", directorateName) :
                new ObjectParameter("DirectorateName", typeof(string));
    
            var directorateIDParameter = directorateID.HasValue ?
                new ObjectParameter("DirectorateID", directorateID) :
                new ObjectParameter("DirectorateID", typeof(int));
    
            var directorateIdsParameter = directorateIds != null ?
                new ObjectParameter("DirectorateIds", directorateIds) :
                new ObjectParameter("DirectorateIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeDirectorateIdsParameter = includeDirectorateIds != null ?
                new ObjectParameter("IncludeDirectorateIds", includeDirectorateIds) :
                new ObjectParameter("IncludeDirectorateIds", typeof(string));
    
            var excludeDirectorateIdsParameter = excludeDirectorateIds != null ?
                new ObjectParameter("ExcludeDirectorateIds", excludeDirectorateIds) :
                new ObjectParameter("ExcludeDirectorateIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDirectorateList_Result>("usp_GetDirectorateList", directorateNameParameter, directorateIDParameter, directorateIdsParameter, intStatusParameter, includeDirectorateIdsParameter, excludeDirectorateIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetEconomicActivitiesList_Result> usp_GetEconomicActivitiesList(string economicActivitiesName, Nullable<int> economicActivitiesID, Nullable<int> taxPayerTypeID, string economicActivitiesIds, Nullable<int> intStatus, string includeEconomicActivitiesIds, string excludeEconomicActivitiesIds)
        {
            var economicActivitiesNameParameter = economicActivitiesName != null ?
                new ObjectParameter("EconomicActivitiesName", economicActivitiesName) :
                new ObjectParameter("EconomicActivitiesName", typeof(string));
    
            var economicActivitiesIDParameter = economicActivitiesID.HasValue ?
                new ObjectParameter("EconomicActivitiesID", economicActivitiesID) :
                new ObjectParameter("EconomicActivitiesID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var economicActivitiesIdsParameter = economicActivitiesIds != null ?
                new ObjectParameter("EconomicActivitiesIds", economicActivitiesIds) :
                new ObjectParameter("EconomicActivitiesIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeEconomicActivitiesIdsParameter = includeEconomicActivitiesIds != null ?
                new ObjectParameter("IncludeEconomicActivitiesIds", includeEconomicActivitiesIds) :
                new ObjectParameter("IncludeEconomicActivitiesIds", typeof(string));
    
            var excludeEconomicActivitiesIdsParameter = excludeEconomicActivitiesIds != null ?
                new ObjectParameter("ExcludeEconomicActivitiesIds", excludeEconomicActivitiesIds) :
                new ObjectParameter("ExcludeEconomicActivitiesIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEconomicActivitiesList_Result>("usp_GetEconomicActivitiesList", economicActivitiesNameParameter, economicActivitiesIDParameter, taxPayerTypeIDParameter, economicActivitiesIdsParameter, intStatusParameter, includeEconomicActivitiesIdsParameter, excludeEconomicActivitiesIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetExceptionTypeList_Result> usp_GetExceptionTypeList(Nullable<int> exceptionTypeID, string exceptionTypeName, string exceptionTypeIds, Nullable<int> intStatus, string includeExceptionTypeIds, string excludeExceptionTypeIds)
        {
            var exceptionTypeIDParameter = exceptionTypeID.HasValue ?
                new ObjectParameter("ExceptionTypeID", exceptionTypeID) :
                new ObjectParameter("ExceptionTypeID", typeof(int));
    
            var exceptionTypeNameParameter = exceptionTypeName != null ?
                new ObjectParameter("ExceptionTypeName", exceptionTypeName) :
                new ObjectParameter("ExceptionTypeName", typeof(string));
    
            var exceptionTypeIdsParameter = exceptionTypeIds != null ?
                new ObjectParameter("ExceptionTypeIds", exceptionTypeIds) :
                new ObjectParameter("ExceptionTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeExceptionTypeIdsParameter = includeExceptionTypeIds != null ?
                new ObjectParameter("IncludeExceptionTypeIds", includeExceptionTypeIds) :
                new ObjectParameter("IncludeExceptionTypeIds", typeof(string));
    
            var excludeExceptionTypeIdsParameter = excludeExceptionTypeIds != null ?
                new ObjectParameter("ExcludeExceptionTypeIds", excludeExceptionTypeIds) :
                new ObjectParameter("ExcludeExceptionTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetExceptionTypeList_Result>("usp_GetExceptionTypeList", exceptionTypeIDParameter, exceptionTypeNameParameter, exceptionTypeIdsParameter, intStatusParameter, includeExceptionTypeIdsParameter, excludeExceptionTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetGovernmentAddressInformation_Result> usp_GetGovernmentAddressInformation(Nullable<int> governmentID)
        {
            var governmentIDParameter = governmentID.HasValue ?
                new ObjectParameter("GovernmentID", governmentID) :
                new ObjectParameter("GovernmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGovernmentAddressInformation_Result>("usp_GetGovernmentAddressInformation", governmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetGovernmentList_Result> usp_GetGovernmentList(Nullable<int> governmentID, string governmentName, string tIN, string governmentRIN, string contactNumber, Nullable<int> intStatus)
        {
            var governmentIDParameter = governmentID.HasValue ?
                new ObjectParameter("GovernmentID", governmentID) :
                new ObjectParameter("GovernmentID", typeof(int));
    
            var governmentNameParameter = governmentName != null ?
                new ObjectParameter("GovernmentName", governmentName) :
                new ObjectParameter("GovernmentName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var governmentRINParameter = governmentRIN != null ?
                new ObjectParameter("GovernmentRIN", governmentRIN) :
                new ObjectParameter("GovernmentRIN", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGovernmentList_Result>("usp_GetGovernmentList", governmentIDParameter, governmentNameParameter, tINParameter, governmentRINParameter, contactNumberParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetGovernmentTypeList_Result> usp_GetGovernmentTypeList(string governmentTypeName, Nullable<int> governmentTypeID, string governmentTypeIds, Nullable<int> intStatus, string includeGovernmentTypeIds, string excludeGovernmentTypeIds)
        {
            var governmentTypeNameParameter = governmentTypeName != null ?
                new ObjectParameter("GovernmentTypeName", governmentTypeName) :
                new ObjectParameter("GovernmentTypeName", typeof(string));
    
            var governmentTypeIDParameter = governmentTypeID.HasValue ?
                new ObjectParameter("GovernmentTypeID", governmentTypeID) :
                new ObjectParameter("GovernmentTypeID", typeof(int));
    
            var governmentTypeIdsParameter = governmentTypeIds != null ?
                new ObjectParameter("GovernmentTypeIds", governmentTypeIds) :
                new ObjectParameter("GovernmentTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeGovernmentTypeIdsParameter = includeGovernmentTypeIds != null ?
                new ObjectParameter("IncludeGovernmentTypeIds", includeGovernmentTypeIds) :
                new ObjectParameter("IncludeGovernmentTypeIds", typeof(string));
    
            var excludeGovernmentTypeIdsParameter = excludeGovernmentTypeIds != null ?
                new ObjectParameter("ExcludeGovernmentTypeIds", excludeGovernmentTypeIds) :
                new ObjectParameter("ExcludeGovernmentTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGovernmentTypeList_Result>("usp_GetGovernmentTypeList", governmentTypeNameParameter, governmentTypeIDParameter, governmentTypeIdsParameter, intStatusParameter, includeGovernmentTypeIdsParameter, excludeGovernmentTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetIndividualAddressInformation_Result> usp_GetIndividualAddressInformation(Nullable<int> individualID)
        {
            var individualIDParameter = individualID.HasValue ?
                new ObjectParameter("IndividualID", individualID) :
                new ObjectParameter("IndividualID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIndividualAddressInformation_Result>("usp_GetIndividualAddressInformation", individualIDParameter);
        }
    
        public virtual ObjectResult<usp_GetIndividualList_Result> usp_GetIndividualList(Nullable<int> individualID, string individualName, string tIN, string individualRIN, string nIN, string mobileNumber, Nullable<int> intStatus)
        {
            var individualIDParameter = individualID.HasValue ?
                new ObjectParameter("IndividualID", individualID) :
                new ObjectParameter("IndividualID", typeof(int));
    
            var individualNameParameter = individualName != null ?
                new ObjectParameter("IndividualName", individualName) :
                new ObjectParameter("IndividualName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var individualRINParameter = individualRIN != null ?
                new ObjectParameter("IndividualRIN", individualRIN) :
                new ObjectParameter("IndividualRIN", typeof(string));
    
            var nINParameter = nIN != null ?
                new ObjectParameter("NIN", nIN) :
                new ObjectParameter("NIN", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIndividualList_Result>("usp_GetIndividualList", individualIDParameter, individualNameParameter, tINParameter, individualRINParameter, nINParameter, mobileNumberParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetLandDevelopmentList_Result> usp_GetLandDevelopmentList(string landDevelopmentName, Nullable<int> landDevelopmentID, string landDevelopmentIds, Nullable<int> intStatus, string includeLandDevelopmentIds, string excludeLandDevelopmentIds)
        {
            var landDevelopmentNameParameter = landDevelopmentName != null ?
                new ObjectParameter("LandDevelopmentName", landDevelopmentName) :
                new ObjectParameter("LandDevelopmentName", typeof(string));
    
            var landDevelopmentIDParameter = landDevelopmentID.HasValue ?
                new ObjectParameter("LandDevelopmentID", landDevelopmentID) :
                new ObjectParameter("LandDevelopmentID", typeof(int));
    
            var landDevelopmentIdsParameter = landDevelopmentIds != null ?
                new ObjectParameter("LandDevelopmentIds", landDevelopmentIds) :
                new ObjectParameter("LandDevelopmentIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeLandDevelopmentIdsParameter = includeLandDevelopmentIds != null ?
                new ObjectParameter("IncludeLandDevelopmentIds", includeLandDevelopmentIds) :
                new ObjectParameter("IncludeLandDevelopmentIds", typeof(string));
    
            var excludeLandDevelopmentIdsParameter = excludeLandDevelopmentIds != null ?
                new ObjectParameter("ExcludeLandDevelopmentIds", excludeLandDevelopmentIds) :
                new ObjectParameter("ExcludeLandDevelopmentIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandDevelopmentList_Result>("usp_GetLandDevelopmentList", landDevelopmentNameParameter, landDevelopmentIDParameter, landDevelopmentIdsParameter, intStatusParameter, includeLandDevelopmentIdsParameter, excludeLandDevelopmentIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetLandFunctionList_Result> usp_GetLandFunctionList(string landFunctionName, Nullable<int> landFunctionID, Nullable<int> landPurposeID, string landFunctionIds, Nullable<int> intStatus, string includeLandFunctionIds, string excludeLandFunctionIds)
        {
            var landFunctionNameParameter = landFunctionName != null ?
                new ObjectParameter("LandFunctionName", landFunctionName) :
                new ObjectParameter("LandFunctionName", typeof(string));
    
            var landFunctionIDParameter = landFunctionID.HasValue ?
                new ObjectParameter("LandFunctionID", landFunctionID) :
                new ObjectParameter("LandFunctionID", typeof(int));
    
            var landPurposeIDParameter = landPurposeID.HasValue ?
                new ObjectParameter("LandPurposeID", landPurposeID) :
                new ObjectParameter("LandPurposeID", typeof(int));
    
            var landFunctionIdsParameter = landFunctionIds != null ?
                new ObjectParameter("LandFunctionIds", landFunctionIds) :
                new ObjectParameter("LandFunctionIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeLandFunctionIdsParameter = includeLandFunctionIds != null ?
                new ObjectParameter("IncludeLandFunctionIds", includeLandFunctionIds) :
                new ObjectParameter("IncludeLandFunctionIds", typeof(string));
    
            var excludeLandFunctionIdsParameter = excludeLandFunctionIds != null ?
                new ObjectParameter("ExcludeLandFunctionIds", excludeLandFunctionIds) :
                new ObjectParameter("ExcludeLandFunctionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandFunctionList_Result>("usp_GetLandFunctionList", landFunctionNameParameter, landFunctionIDParameter, landPurposeIDParameter, landFunctionIdsParameter, intStatusParameter, includeLandFunctionIdsParameter, excludeLandFunctionIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetLandList_Result> usp_GetLandList(Nullable<int> landID, string landRIN, string plotNumber, string landOccupier, string c_OF_O_Ref, Nullable<int> lGAID, Nullable<int> townID, Nullable<int> wardID, Nullable<int> intStatus)
        {
            var landIDParameter = landID.HasValue ?
                new ObjectParameter("LandID", landID) :
                new ObjectParameter("LandID", typeof(int));
    
            var landRINParameter = landRIN != null ?
                new ObjectParameter("LandRIN", landRIN) :
                new ObjectParameter("LandRIN", typeof(string));
    
            var plotNumberParameter = plotNumber != null ?
                new ObjectParameter("PlotNumber", plotNumber) :
                new ObjectParameter("PlotNumber", typeof(string));
    
            var landOccupierParameter = landOccupier != null ?
                new ObjectParameter("LandOccupier", landOccupier) :
                new ObjectParameter("LandOccupier", typeof(string));
    
            var c_OF_O_RefParameter = c_OF_O_Ref != null ?
                new ObjectParameter("C_OF_O_Ref", c_OF_O_Ref) :
                new ObjectParameter("C_OF_O_Ref", typeof(string));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("TownID", townID) :
                new ObjectParameter("TownID", typeof(int));
    
            var wardIDParameter = wardID.HasValue ?
                new ObjectParameter("WardID", wardID) :
                new ObjectParameter("WardID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandList_Result>("usp_GetLandList", landIDParameter, landRINParameter, plotNumberParameter, landOccupierParameter, c_OF_O_RefParameter, lGAIDParameter, townIDParameter, wardIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetLandOwnershipList_Result> usp_GetLandOwnershipList(string landOwnershipName, Nullable<int> landOwnershipID, string landOwnershipIds, Nullable<int> intStatus, string includeLandOwnershipIds, string excludeLandOwnershipIds)
        {
            var landOwnershipNameParameter = landOwnershipName != null ?
                new ObjectParameter("LandOwnershipName", landOwnershipName) :
                new ObjectParameter("LandOwnershipName", typeof(string));
    
            var landOwnershipIDParameter = landOwnershipID.HasValue ?
                new ObjectParameter("LandOwnershipID", landOwnershipID) :
                new ObjectParameter("LandOwnershipID", typeof(int));
    
            var landOwnershipIdsParameter = landOwnershipIds != null ?
                new ObjectParameter("LandOwnershipIds", landOwnershipIds) :
                new ObjectParameter("LandOwnershipIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeLandOwnershipIdsParameter = includeLandOwnershipIds != null ?
                new ObjectParameter("IncludeLandOwnershipIds", includeLandOwnershipIds) :
                new ObjectParameter("IncludeLandOwnershipIds", typeof(string));
    
            var excludeLandOwnershipIdsParameter = excludeLandOwnershipIds != null ?
                new ObjectParameter("ExcludeLandOwnershipIds", excludeLandOwnershipIds) :
                new ObjectParameter("ExcludeLandOwnershipIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandOwnershipList_Result>("usp_GetLandOwnershipList", landOwnershipNameParameter, landOwnershipIDParameter, landOwnershipIdsParameter, intStatusParameter, includeLandOwnershipIdsParameter, excludeLandOwnershipIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetLandPurposeList_Result> usp_GetLandPurposeList(string landPurposeName, Nullable<int> landPurposeID, string landPurposeIds, Nullable<int> intStatus, string includeLandPurposeIds, string excludeLandPurposeIds)
        {
            var landPurposeNameParameter = landPurposeName != null ?
                new ObjectParameter("LandPurposeName", landPurposeName) :
                new ObjectParameter("LandPurposeName", typeof(string));
    
            var landPurposeIDParameter = landPurposeID.HasValue ?
                new ObjectParameter("LandPurposeID", landPurposeID) :
                new ObjectParameter("LandPurposeID", typeof(int));
    
            var landPurposeIdsParameter = landPurposeIds != null ?
                new ObjectParameter("LandPurposeIds", landPurposeIds) :
                new ObjectParameter("LandPurposeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeLandPurposeIdsParameter = includeLandPurposeIds != null ?
                new ObjectParameter("IncludeLandPurposeIds", includeLandPurposeIds) :
                new ObjectParameter("IncludeLandPurposeIds", typeof(string));
    
            var excludeLandPurposeIdsParameter = excludeLandPurposeIds != null ?
                new ObjectParameter("ExcludeLandPurposeIds", excludeLandPurposeIds) :
                new ObjectParameter("ExcludeLandPurposeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandPurposeList_Result>("usp_GetLandPurposeList", landPurposeNameParameter, landPurposeIDParameter, landPurposeIdsParameter, intStatusParameter, includeLandPurposeIdsParameter, excludeLandPurposeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetLandStreetConditionList_Result> usp_GetLandStreetConditionList(string landStreetConditionName, Nullable<int> landStreetConditionID, string landStreetConditionIds, Nullable<int> intStatus, string includeLandStreetConditionIds, string excludeLandStreetConditionIds)
        {
            var landStreetConditionNameParameter = landStreetConditionName != null ?
                new ObjectParameter("LandStreetConditionName", landStreetConditionName) :
                new ObjectParameter("LandStreetConditionName", typeof(string));
    
            var landStreetConditionIDParameter = landStreetConditionID.HasValue ?
                new ObjectParameter("LandStreetConditionID", landStreetConditionID) :
                new ObjectParameter("LandStreetConditionID", typeof(int));
    
            var landStreetConditionIdsParameter = landStreetConditionIds != null ?
                new ObjectParameter("LandStreetConditionIds", landStreetConditionIds) :
                new ObjectParameter("LandStreetConditionIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeLandStreetConditionIdsParameter = includeLandStreetConditionIds != null ?
                new ObjectParameter("IncludeLandStreetConditionIds", includeLandStreetConditionIds) :
                new ObjectParameter("IncludeLandStreetConditionIds", typeof(string));
    
            var excludeLandStreetConditionIdsParameter = excludeLandStreetConditionIds != null ?
                new ObjectParameter("ExcludeLandStreetConditionIds", excludeLandStreetConditionIds) :
                new ObjectParameter("ExcludeLandStreetConditionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandStreetConditionList_Result>("usp_GetLandStreetConditionList", landStreetConditionNameParameter, landStreetConditionIDParameter, landStreetConditionIdsParameter, intStatusParameter, includeLandStreetConditionIdsParameter, excludeLandStreetConditionIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetLGAList_Result> usp_GetLGAList(string lGAName, Nullable<int> lGAID, Nullable<int> lGAClassID, string lGAIds, Nullable<int> intStatus, string includeLGAIds, string excludeLGAIds)
        {
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var lGAClassIDParameter = lGAClassID.HasValue ?
                new ObjectParameter("LGAClassID", lGAClassID) :
                new ObjectParameter("LGAClassID", typeof(int));
    
            var lGAIdsParameter = lGAIds != null ?
                new ObjectParameter("LGAIds", lGAIds) :
                new ObjectParameter("LGAIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeLGAIdsParameter = includeLGAIds != null ?
                new ObjectParameter("IncludeLGAIds", includeLGAIds) :
                new ObjectParameter("IncludeLGAIds", typeof(string));
    
            var excludeLGAIdsParameter = excludeLGAIds != null ?
                new ObjectParameter("ExcludeLGAIds", excludeLGAIds) :
                new ObjectParameter("ExcludeLGAIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLGAList_Result>("usp_GetLGAList", lGANameParameter, lGAIDParameter, lGAClassIDParameter, lGAIdsParameter, intStatusParameter, includeLGAIdsParameter, excludeLGAIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetMDAServiceBasedSettlement_Result> usp_GetMDAServiceBasedSettlement(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMDAServiceBasedSettlement_Result>("usp_GetMDAServiceBasedSettlement", serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetMDAServiceForServiceBill_Result> usp_GetMDAServiceForServiceBill(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMDAServiceForServiceBill_Result>("usp_GetMDAServiceForServiceBill", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetMDAServiceItemList_Result> usp_GetMDAServiceItemList(Nullable<int> mDAServiceItemID, string mDAServiceItemReferenceNo, Nullable<int> intStatus)
        {
            var mDAServiceItemIDParameter = mDAServiceItemID.HasValue ?
                new ObjectParameter("MDAServiceItemID", mDAServiceItemID) :
                new ObjectParameter("MDAServiceItemID", typeof(int));
    
            var mDAServiceItemReferenceNoParameter = mDAServiceItemReferenceNo != null ?
                new ObjectParameter("MDAServiceItemReferenceNo", mDAServiceItemReferenceNo) :
                new ObjectParameter("MDAServiceItemReferenceNo", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMDAServiceItemList_Result>("usp_GetMDAServiceItemList", mDAServiceItemIDParameter, mDAServiceItemReferenceNoParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetMDAServiceList_Result> usp_GetMDAServiceList(Nullable<int> mDAServiceID, Nullable<int> taxYear, string mDAServiceName, Nullable<int> intStatus)
        {
            var mDAServiceIDParameter = mDAServiceID.HasValue ?
                new ObjectParameter("MDAServiceID", mDAServiceID) :
                new ObjectParameter("MDAServiceID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var mDAServiceNameParameter = mDAServiceName != null ?
                new ObjectParameter("MDAServiceName", mDAServiceName) :
                new ObjectParameter("MDAServiceName", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMDAServiceList_Result>("usp_GetMDAServiceList", mDAServiceIDParameter, taxYearParameter, mDAServiceNameParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationList_Result> usp_GetNotificationList(Nullable<long> notificationID, string notificationRefNo, Nullable<int> notificationMethodID, Nullable<int> notificationTypeID, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<int> intNotificationStatus)
        {
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("NotificationID", notificationID) :
                new ObjectParameter("NotificationID", typeof(long));
    
            var notificationRefNoParameter = notificationRefNo != null ?
                new ObjectParameter("NotificationRefNo", notificationRefNo) :
                new ObjectParameter("NotificationRefNo", typeof(string));
    
            var notificationMethodIDParameter = notificationMethodID.HasValue ?
                new ObjectParameter("NotificationMethodID", notificationMethodID) :
                new ObjectParameter("NotificationMethodID", typeof(int));
    
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var intNotificationStatusParameter = intNotificationStatus.HasValue ?
                new ObjectParameter("intNotificationStatus", intNotificationStatus) :
                new ObjectParameter("intNotificationStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationList_Result>("usp_GetNotificationList", notificationIDParameter, notificationRefNoParameter, notificationMethodIDParameter, notificationTypeIDParameter, taxPayerTypeIDParameter, taxPayerIDParameter, intNotificationStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationMethodList_Result> usp_GetNotificationMethodList(Nullable<int> notificationMethodID, string notificationMethodName, string notificationMethodIds, Nullable<int> intStatus, string includeNotificationMethodIds, string excludeNotificationMethodIds)
        {
            var notificationMethodIDParameter = notificationMethodID.HasValue ?
                new ObjectParameter("NotificationMethodID", notificationMethodID) :
                new ObjectParameter("NotificationMethodID", typeof(int));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var notificationMethodIdsParameter = notificationMethodIds != null ?
                new ObjectParameter("NotificationMethodIds", notificationMethodIds) :
                new ObjectParameter("NotificationMethodIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeNotificationMethodIdsParameter = includeNotificationMethodIds != null ?
                new ObjectParameter("IncludeNotificationMethodIds", includeNotificationMethodIds) :
                new ObjectParameter("IncludeNotificationMethodIds", typeof(string));
    
            var excludeNotificationMethodIdsParameter = excludeNotificationMethodIds != null ?
                new ObjectParameter("ExcludeNotificationMethodIds", excludeNotificationMethodIds) :
                new ObjectParameter("ExcludeNotificationMethodIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationMethodList_Result>("usp_GetNotificationMethodList", notificationMethodIDParameter, notificationMethodNameParameter, notificationMethodIdsParameter, intStatusParameter, includeNotificationMethodIdsParameter, excludeNotificationMethodIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetNotificationTypeList_Result> usp_GetNotificationTypeList(Nullable<int> notificationTypeID, string notificationTypeName, string notificationTypeIds, Nullable<int> intStatus, string includeNotificationTypeIds, string excludeNotificationTypeIds)
        {
            var notificationTypeIDParameter = notificationTypeID.HasValue ?
                new ObjectParameter("NotificationTypeID", notificationTypeID) :
                new ObjectParameter("NotificationTypeID", typeof(int));
    
            var notificationTypeNameParameter = notificationTypeName != null ?
                new ObjectParameter("NotificationTypeName", notificationTypeName) :
                new ObjectParameter("NotificationTypeName", typeof(string));
    
            var notificationTypeIdsParameter = notificationTypeIds != null ?
                new ObjectParameter("NotificationTypeIds", notificationTypeIds) :
                new ObjectParameter("NotificationTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeNotificationTypeIdsParameter = includeNotificationTypeIds != null ?
                new ObjectParameter("IncludeNotificationTypeIds", includeNotificationTypeIds) :
                new ObjectParameter("IncludeNotificationTypeIds", typeof(string));
    
            var excludeNotificationTypeIdsParameter = excludeNotificationTypeIds != null ?
                new ObjectParameter("ExcludeNotificationTypeIds", excludeNotificationTypeIds) :
                new ObjectParameter("ExcludeNotificationTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetNotificationTypeList_Result>("usp_GetNotificationTypeList", notificationTypeIDParameter, notificationTypeNameParameter, notificationTypeIdsParameter, intStatusParameter, includeNotificationTypeIdsParameter, excludeNotificationTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentFrequencyList_Result> usp_GetPaymentFrequencyList(string paymentFrequencyName, Nullable<int> paymentFrequencyID, string paymentFrequencyIds, Nullable<int> intStatus, string includePaymentFrequencyIds, string excludePaymentFrequencyIds)
        {
            var paymentFrequencyNameParameter = paymentFrequencyName != null ?
                new ObjectParameter("PaymentFrequencyName", paymentFrequencyName) :
                new ObjectParameter("PaymentFrequencyName", typeof(string));
    
            var paymentFrequencyIDParameter = paymentFrequencyID.HasValue ?
                new ObjectParameter("PaymentFrequencyID", paymentFrequencyID) :
                new ObjectParameter("PaymentFrequencyID", typeof(int));
    
            var paymentFrequencyIdsParameter = paymentFrequencyIds != null ?
                new ObjectParameter("PaymentFrequencyIds", paymentFrequencyIds) :
                new ObjectParameter("PaymentFrequencyIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includePaymentFrequencyIdsParameter = includePaymentFrequencyIds != null ?
                new ObjectParameter("IncludePaymentFrequencyIds", includePaymentFrequencyIds) :
                new ObjectParameter("IncludePaymentFrequencyIds", typeof(string));
    
            var excludePaymentFrequencyIdsParameter = excludePaymentFrequencyIds != null ?
                new ObjectParameter("ExcludePaymentFrequencyIds", excludePaymentFrequencyIds) :
                new ObjectParameter("ExcludePaymentFrequencyIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentFrequencyList_Result>("usp_GetPaymentFrequencyList", paymentFrequencyNameParameter, paymentFrequencyIDParameter, paymentFrequencyIdsParameter, intStatusParameter, includePaymentFrequencyIdsParameter, excludePaymentFrequencyIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentOptionList_Result> usp_GetPaymentOptionList(string paymentOptionName, Nullable<int> paymentOptionID, string paymentOptionIds, Nullable<int> intStatus, string includePaymentOptionIds, string excludePaymentOptionIds)
        {
            var paymentOptionNameParameter = paymentOptionName != null ?
                new ObjectParameter("PaymentOptionName", paymentOptionName) :
                new ObjectParameter("PaymentOptionName", typeof(string));
    
            var paymentOptionIDParameter = paymentOptionID.HasValue ?
                new ObjectParameter("PaymentOptionID", paymentOptionID) :
                new ObjectParameter("PaymentOptionID", typeof(int));
    
            var paymentOptionIdsParameter = paymentOptionIds != null ?
                new ObjectParameter("PaymentOptionIds", paymentOptionIds) :
                new ObjectParameter("PaymentOptionIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includePaymentOptionIdsParameter = includePaymentOptionIds != null ?
                new ObjectParameter("IncludePaymentOptionIds", includePaymentOptionIds) :
                new ObjectParameter("IncludePaymentOptionIds", typeof(string));
    
            var excludePaymentOptionIdsParameter = excludePaymentOptionIds != null ?
                new ObjectParameter("ExcludePaymentOptionIds", excludePaymentOptionIds) :
                new ObjectParameter("ExcludePaymentOptionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentOptionList_Result>("usp_GetPaymentOptionList", paymentOptionNameParameter, paymentOptionIDParameter, paymentOptionIdsParameter, intStatusParameter, includePaymentOptionIdsParameter, excludePaymentOptionIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetProfileInformation_Result> usp_GetProfileInformation(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProfileInformation_Result>("usp_GetProfileInformation", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetProfileList_Result> usp_GetProfileList(Nullable<int> profileID, Nullable<int> assetTypeID, Nullable<int> intStatus)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProfileList_Result>("usp_GetProfileList", profileIDParameter, assetTypeIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetRevenueStreamBasedReport_Result> usp_GetRevenueStreamBasedReport(Nullable<int> taxYear, Nullable<int> taxMonth)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRevenueStreamBasedReport_Result>("usp_GetRevenueStreamBasedReport", taxYearParameter, taxMonthParameter);
        }
    
        public virtual ObjectResult<usp_GetRevenueStreamList_Result> usp_GetRevenueStreamList(string revenueStreamName, Nullable<int> revenueStreamID, string revenueStreamIds, Nullable<int> intStatus, string includeRevenueStreamIds, string excludeRevenueStreamIds)
        {
            var revenueStreamNameParameter = revenueStreamName != null ?
                new ObjectParameter("RevenueStreamName", revenueStreamName) :
                new ObjectParameter("RevenueStreamName", typeof(string));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var revenueStreamIdsParameter = revenueStreamIds != null ?
                new ObjectParameter("RevenueStreamIds", revenueStreamIds) :
                new ObjectParameter("RevenueStreamIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeRevenueStreamIdsParameter = includeRevenueStreamIds != null ?
                new ObjectParameter("IncludeRevenueStreamIds", includeRevenueStreamIds) :
                new ObjectParameter("IncludeRevenueStreamIds", typeof(string));
    
            var excludeRevenueStreamIdsParameter = excludeRevenueStreamIds != null ?
                new ObjectParameter("ExcludeRevenueStreamIds", excludeRevenueStreamIds) :
                new ObjectParameter("ExcludeRevenueStreamIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRevenueStreamList_Result>("usp_GetRevenueStreamList", revenueStreamNameParameter, revenueStreamIDParameter, revenueStreamIdsParameter, intStatusParameter, includeRevenueStreamIdsParameter, excludeRevenueStreamIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetRevenueSubStreamList_Result> usp_GetRevenueSubStreamList(string revenueSubStreamName, Nullable<int> revenueSubStreamID, Nullable<int> revenueStreamID, string revenueSubStreamIds, Nullable<int> intStatus, string includeRevenueSubStreamIds, string excludeRevenueSubStreamIds)
        {
            var revenueSubStreamNameParameter = revenueSubStreamName != null ?
                new ObjectParameter("RevenueSubStreamName", revenueSubStreamName) :
                new ObjectParameter("RevenueSubStreamName", typeof(string));
    
            var revenueSubStreamIDParameter = revenueSubStreamID.HasValue ?
                new ObjectParameter("RevenueSubStreamID", revenueSubStreamID) :
                new ObjectParameter("RevenueSubStreamID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var revenueSubStreamIdsParameter = revenueSubStreamIds != null ?
                new ObjectParameter("RevenueSubStreamIds", revenueSubStreamIds) :
                new ObjectParameter("RevenueSubStreamIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeRevenueSubStreamIdsParameter = includeRevenueSubStreamIds != null ?
                new ObjectParameter("IncludeRevenueSubStreamIds", includeRevenueSubStreamIds) :
                new ObjectParameter("IncludeRevenueSubStreamIds", typeof(string));
    
            var excludeRevenueSubStreamIdsParameter = excludeRevenueSubStreamIds != null ?
                new ObjectParameter("ExcludeRevenueSubStreamIds", excludeRevenueSubStreamIds) :
                new ObjectParameter("ExcludeRevenueSubStreamIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRevenueSubStreamList_Result>("usp_GetRevenueSubStreamList", revenueSubStreamNameParameter, revenueSubStreamIDParameter, revenueStreamIDParameter, revenueSubStreamIdsParameter, intStatusParameter, includeRevenueSubStreamIdsParameter, excludeRevenueSubStreamIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetScratchCardDealerList_Result> usp_GetScratchCardDealerList(Nullable<int> scratchCardDealerID, string scratchCardDealerName, string scratchCardDealerIds, Nullable<int> intStatus, string includeScratchCardDealerIds, string excludeScratchCardDealerIds, Nullable<int> companyID)
        {
            var scratchCardDealerIDParameter = scratchCardDealerID.HasValue ?
                new ObjectParameter("ScratchCardDealerID", scratchCardDealerID) :
                new ObjectParameter("ScratchCardDealerID", typeof(int));
    
            var scratchCardDealerNameParameter = scratchCardDealerName != null ?
                new ObjectParameter("ScratchCardDealerName", scratchCardDealerName) :
                new ObjectParameter("ScratchCardDealerName", typeof(string));
    
            var scratchCardDealerIdsParameter = scratchCardDealerIds != null ?
                new ObjectParameter("ScratchCardDealerIds", scratchCardDealerIds) :
                new ObjectParameter("ScratchCardDealerIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeScratchCardDealerIdsParameter = includeScratchCardDealerIds != null ?
                new ObjectParameter("IncludeScratchCardDealerIds", includeScratchCardDealerIds) :
                new ObjectParameter("IncludeScratchCardDealerIds", typeof(string));
    
            var excludeScratchCardDealerIdsParameter = excludeScratchCardDealerIds != null ?
                new ObjectParameter("ExcludeScratchCardDealerIds", excludeScratchCardDealerIds) :
                new ObjectParameter("ExcludeScratchCardDealerIds", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetScratchCardDealerList_Result>("usp_GetScratchCardDealerList", scratchCardDealerIDParameter, scratchCardDealerNameParameter, scratchCardDealerIdsParameter, intStatusParameter, includeScratchCardDealerIdsParameter, excludeScratchCardDealerIdsParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<usp_GetScratchCardPrinterList_Result> usp_GetScratchCardPrinterList(Nullable<int> scratchCardPrinterID, string scratchCardPrinterName, string scratchCardPrinterIds, Nullable<int> intStatus, string includeScratchCardPrinterIds, string excludeScratchCardPrinterIds, Nullable<int> companyID)
        {
            var scratchCardPrinterIDParameter = scratchCardPrinterID.HasValue ?
                new ObjectParameter("ScratchCardPrinterID", scratchCardPrinterID) :
                new ObjectParameter("ScratchCardPrinterID", typeof(int));
    
            var scratchCardPrinterNameParameter = scratchCardPrinterName != null ?
                new ObjectParameter("ScratchCardPrinterName", scratchCardPrinterName) :
                new ObjectParameter("ScratchCardPrinterName", typeof(string));
    
            var scratchCardPrinterIdsParameter = scratchCardPrinterIds != null ?
                new ObjectParameter("ScratchCardPrinterIds", scratchCardPrinterIds) :
                new ObjectParameter("ScratchCardPrinterIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeScratchCardPrinterIdsParameter = includeScratchCardPrinterIds != null ?
                new ObjectParameter("IncludeScratchCardPrinterIds", includeScratchCardPrinterIds) :
                new ObjectParameter("IncludeScratchCardPrinterIds", typeof(string));
    
            var excludeScratchCardPrinterIdsParameter = excludeScratchCardPrinterIds != null ?
                new ObjectParameter("ExcludeScratchCardPrinterIds", excludeScratchCardPrinterIds) :
                new ObjectParameter("ExcludeScratchCardPrinterIds", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetScratchCardPrinterList_Result>("usp_GetScratchCardPrinterList", scratchCardPrinterIDParameter, scratchCardPrinterNameParameter, scratchCardPrinterIdsParameter, intStatusParameter, includeScratchCardPrinterIdsParameter, excludeScratchCardPrinterIdsParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBill_MDAServiceList_Result> usp_GetServiceBill_MDAServiceList(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBill_MDAServiceList_Result>("usp_GetServiceBill_MDAServiceList", serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBillItemList_Result> usp_GetServiceBillItemList(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBillItemList_Result>("usp_GetServiceBillItemList", serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBillList_Result> usp_GetServiceBillList(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<long> serviceBillID, string serviceBillRefNo, Nullable<int> intStatus)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(long));
    
            var serviceBillRefNoParameter = serviceBillRefNo != null ?
                new ObjectParameter("ServiceBillRefNo", serviceBillRefNo) :
                new ObjectParameter("ServiceBillRefNo", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBillList_Result>("usp_GetServiceBillList", taxPayerTypeIDParameter, taxPayerIDParameter, serviceBillIDParameter, serviceBillRefNoParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetSettlementItemList_Result> usp_GetSettlementItemList(Nullable<int> settlementID)
        {
            var settlementIDParameter = settlementID.HasValue ?
                new ObjectParameter("SettlementID", settlementID) :
                new ObjectParameter("SettlementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettlementItemList_Result>("usp_GetSettlementItemList", settlementIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSettlementList_Result> usp_GetSettlementList(Nullable<int> settlementID, Nullable<int> assessmentID, Nullable<int> serviceBillID, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var settlementIDParameter = settlementID.HasValue ?
                new ObjectParameter("SettlementID", settlementID) :
                new ObjectParameter("SettlementID", typeof(int));
    
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettlementList_Result>("usp_GetSettlementList", settlementIDParameter, assessmentIDParameter, serviceBillIDParameter, taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSettlementMethodList_Result> usp_GetSettlementMethodList(string settlementMethodName, Nullable<int> settlementMethodID, string settlementMethodIds, Nullable<int> intStatus, string includeSettlementMethodIds, string excludeSettlementMethodIds)
        {
            var settlementMethodNameParameter = settlementMethodName != null ?
                new ObjectParameter("SettlementMethodName", settlementMethodName) :
                new ObjectParameter("SettlementMethodName", typeof(string));
    
            var settlementMethodIDParameter = settlementMethodID.HasValue ?
                new ObjectParameter("SettlementMethodID", settlementMethodID) :
                new ObjectParameter("SettlementMethodID", typeof(int));
    
            var settlementMethodIdsParameter = settlementMethodIds != null ?
                new ObjectParameter("SettlementMethodIds", settlementMethodIds) :
                new ObjectParameter("SettlementMethodIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeSettlementMethodIdsParameter = includeSettlementMethodIds != null ?
                new ObjectParameter("IncludeSettlementMethodIds", includeSettlementMethodIds) :
                new ObjectParameter("IncludeSettlementMethodIds", typeof(string));
    
            var excludeSettlementMethodIdsParameter = excludeSettlementMethodIds != null ?
                new ObjectParameter("ExcludeSettlementMethodIds", excludeSettlementMethodIds) :
                new ObjectParameter("ExcludeSettlementMethodIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettlementMethodList_Result>("usp_GetSettlementMethodList", settlementMethodNameParameter, settlementMethodIDParameter, settlementMethodIdsParameter, intStatusParameter, includeSettlementMethodIdsParameter, excludeSettlementMethodIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetSettlementStatusList_Result> usp_GetSettlementStatusList(Nullable<int> settlementStatusID, string settlementStatusName, string settlementStatusIds, Nullable<int> intStatus, string includeSettlementStatusIds, string excludeSettlementStatusIds)
        {
            var settlementStatusIDParameter = settlementStatusID.HasValue ?
                new ObjectParameter("SettlementStatusID", settlementStatusID) :
                new ObjectParameter("SettlementStatusID", typeof(int));
    
            var settlementStatusNameParameter = settlementStatusName != null ?
                new ObjectParameter("SettlementStatusName", settlementStatusName) :
                new ObjectParameter("SettlementStatusName", typeof(string));
    
            var settlementStatusIdsParameter = settlementStatusIds != null ?
                new ObjectParameter("SettlementStatusIds", settlementStatusIds) :
                new ObjectParameter("SettlementStatusIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeSettlementStatusIdsParameter = includeSettlementStatusIds != null ?
                new ObjectParameter("IncludeSettlementStatusIds", includeSettlementStatusIds) :
                new ObjectParameter("IncludeSettlementStatusIds", typeof(string));
    
            var excludeSettlementStatusIdsParameter = excludeSettlementStatusIds != null ?
                new ObjectParameter("ExcludeSettlementStatusIds", excludeSettlementStatusIds) :
                new ObjectParameter("ExcludeSettlementStatusIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettlementStatusList_Result>("usp_GetSettlementStatusList", settlementStatusIDParameter, settlementStatusNameParameter, settlementStatusIdsParameter, intStatusParameter, includeSettlementStatusIdsParameter, excludeSettlementStatusIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetSizeList_Result> usp_GetSizeList(string sizeName, Nullable<int> sizeID, string sizeIds, Nullable<int> intStatus, string includeSizeIds, string excludeSizeIds)
        {
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var sizeIDParameter = sizeID.HasValue ?
                new ObjectParameter("SizeID", sizeID) :
                new ObjectParameter("SizeID", typeof(int));
    
            var sizeIdsParameter = sizeIds != null ?
                new ObjectParameter("SizeIds", sizeIds) :
                new ObjectParameter("SizeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeSizeIdsParameter = includeSizeIds != null ?
                new ObjectParameter("IncludeSizeIds", includeSizeIds) :
                new ObjectParameter("IncludeSizeIds", typeof(string));
    
            var excludeSizeIdsParameter = excludeSizeIds != null ?
                new ObjectParameter("ExcludeSizeIds", excludeSizeIds) :
                new ObjectParameter("ExcludeSizeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSizeList_Result>("usp_GetSizeList", sizeNameParameter, sizeIDParameter, sizeIdsParameter, intStatusParameter, includeSizeIdsParameter, excludeSizeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetSpecialAddressInformation_Result> usp_GetSpecialAddressInformation(Nullable<int> specialID)
        {
            var specialIDParameter = specialID.HasValue ?
                new ObjectParameter("SpecialID", specialID) :
                new ObjectParameter("SpecialID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSpecialAddressInformation_Result>("usp_GetSpecialAddressInformation", specialIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSpecialList_Result> usp_GetSpecialList(Nullable<int> specialID, string specialTaxPayerName, string tIN, string specialRIN, string contactNumber, Nullable<int> intStatus)
        {
            var specialIDParameter = specialID.HasValue ?
                new ObjectParameter("SpecialID", specialID) :
                new ObjectParameter("SpecialID", typeof(int));
    
            var specialTaxPayerNameParameter = specialTaxPayerName != null ?
                new ObjectParameter("SpecialTaxPayerName", specialTaxPayerName) :
                new ObjectParameter("SpecialTaxPayerName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var specialRINParameter = specialRIN != null ?
                new ObjectParameter("SpecialRIN", specialRIN) :
                new ObjectParameter("SpecialRIN", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSpecialList_Result>("usp_GetSpecialList", specialIDParameter, specialTaxPayerNameParameter, tINParameter, specialRINParameter, contactNumberParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetSystemUserList_Result> usp_GetSystemUserList(string systemUserName, Nullable<int> systemUserID, string systemUserIds, Nullable<int> intStatus, string includeSystemUserIds, string excludeSystemUserIds)
        {
            var systemUserNameParameter = systemUserName != null ?
                new ObjectParameter("SystemUserName", systemUserName) :
                new ObjectParameter("SystemUserName", typeof(string));
    
            var systemUserIDParameter = systemUserID.HasValue ?
                new ObjectParameter("SystemUserID", systemUserID) :
                new ObjectParameter("SystemUserID", typeof(int));
    
            var systemUserIdsParameter = systemUserIds != null ?
                new ObjectParameter("SystemUserIds", systemUserIds) :
                new ObjectParameter("SystemUserIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeSystemUserIdsParameter = includeSystemUserIds != null ?
                new ObjectParameter("IncludeSystemUserIds", includeSystemUserIds) :
                new ObjectParameter("IncludeSystemUserIds", typeof(string));
    
            var excludeSystemUserIdsParameter = excludeSystemUserIds != null ?
                new ObjectParameter("ExcludeSystemUserIds", excludeSystemUserIds) :
                new ObjectParameter("ExcludeSystemUserIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSystemUserList_Result>("usp_GetSystemUserList", systemUserNameParameter, systemUserIDParameter, systemUserIdsParameter, intStatusParameter, includeSystemUserIdsParameter, excludeSystemUserIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxOfficeList_Result> usp_GetTaxOfficeList(string taxOfficeName, Nullable<int> taxOfficeID, Nullable<int> addressTypeID, string taxOfficeIds, Nullable<int> intStatus, string includeTaxOfficeIds, string excludeTaxOfficeIds)
        {
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var taxOfficeIdsParameter = taxOfficeIds != null ?
                new ObjectParameter("TaxOfficeIds", taxOfficeIds) :
                new ObjectParameter("TaxOfficeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeTaxOfficeIdsParameter = includeTaxOfficeIds != null ?
                new ObjectParameter("IncludeTaxOfficeIds", includeTaxOfficeIds) :
                new ObjectParameter("IncludeTaxOfficeIds", typeof(string));
    
            var excludeTaxOfficeIdsParameter = excludeTaxOfficeIds != null ?
                new ObjectParameter("ExcludeTaxOfficeIds", excludeTaxOfficeIds) :
                new ObjectParameter("ExcludeTaxOfficeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxOfficeList_Result>("usp_GetTaxOfficeList", taxOfficeNameParameter, taxOfficeIDParameter, addressTypeIDParameter, taxOfficeIdsParameter, intStatusParameter, includeTaxOfficeIdsParameter, excludeTaxOfficeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerAssetList_Result> usp_GetTaxPayerAssetList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> assetTypeID, Nullable<int> assetID, Nullable<long> tPAID, Nullable<int> profileID, Nullable<int> intStatus)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var tPAIDParameter = tPAID.HasValue ?
                new ObjectParameter("TPAID", tPAID) :
                new ObjectParameter("TPAID", typeof(long));
    
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerAssetList_Result>("usp_GetTaxPayerAssetList", taxPayerIDParameter, taxPayerTypeIDParameter, assetTypeIDParameter, assetIDParameter, tPAIDParameter, profileIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBill_Result> usp_GetTaxPayerBill(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> statusID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBill_Result>("usp_GetTaxPayerBill", taxPayerIDParameter, taxPayerTypeIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerMDAService_Result> usp_GetTaxPayerMDAService(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerMDAService_Result>("usp_GetTaxPayerMDAService", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerRoleList_Result> usp_GetTaxPayerRoleList(string taxPayerRoleName, Nullable<int> taxPayerRoleID, Nullable<int> assetTypeID, Nullable<int> taxPayerTypeID, string taxPayerRoleIds, Nullable<int> intStatus, string includeTaxPayerRoleIds, string excludeTaxPayerRoleIds)
        {
            var taxPayerRoleNameParameter = taxPayerRoleName != null ?
                new ObjectParameter("TaxPayerRoleName", taxPayerRoleName) :
                new ObjectParameter("TaxPayerRoleName", typeof(string));
    
            var taxPayerRoleIDParameter = taxPayerRoleID.HasValue ?
                new ObjectParameter("TaxPayerRoleID", taxPayerRoleID) :
                new ObjectParameter("TaxPayerRoleID", typeof(int));
    
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerRoleIdsParameter = taxPayerRoleIds != null ?
                new ObjectParameter("TaxPayerRoleIds", taxPayerRoleIds) :
                new ObjectParameter("TaxPayerRoleIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeTaxPayerRoleIdsParameter = includeTaxPayerRoleIds != null ?
                new ObjectParameter("IncludeTaxPayerRoleIds", includeTaxPayerRoleIds) :
                new ObjectParameter("IncludeTaxPayerRoleIds", typeof(string));
    
            var excludeTaxPayerRoleIdsParameter = excludeTaxPayerRoleIds != null ?
                new ObjectParameter("ExcludeTaxPayerRoleIds", excludeTaxPayerRoleIds) :
                new ObjectParameter("ExcludeTaxPayerRoleIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerRoleList_Result>("usp_GetTaxPayerRoleList", taxPayerRoleNameParameter, taxPayerRoleIDParameter, assetTypeIDParameter, taxPayerTypeIDParameter, taxPayerRoleIdsParameter, intStatusParameter, includeTaxPayerRoleIdsParameter, excludeTaxPayerRoleIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerTypeList_Result> usp_GetTaxPayerTypeList(string taxPayerTypeName, Nullable<int> taxPayerTypeID, string taxPayerTypeIds, Nullable<int> intStatus, string includeTaxPayerTypeIds, string excludeTaxPayerTypeIds)
        {
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerTypeIdsParameter = taxPayerTypeIds != null ?
                new ObjectParameter("TaxPayerTypeIds", taxPayerTypeIds) :
                new ObjectParameter("TaxPayerTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeTaxPayerTypeIdsParameter = includeTaxPayerTypeIds != null ?
                new ObjectParameter("IncludeTaxPayerTypeIds", includeTaxPayerTypeIds) :
                new ObjectParameter("IncludeTaxPayerTypeIds", typeof(string));
    
            var excludeTaxPayerTypeIdsParameter = excludeTaxPayerTypeIds != null ?
                new ObjectParameter("ExcludeTaxPayerTypeIds", excludeTaxPayerTypeIds) :
                new ObjectParameter("ExcludeTaxPayerTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerTypeList_Result>("usp_GetTaxPayerTypeList", taxPayerTypeNameParameter, taxPayerTypeIDParameter, taxPayerTypeIdsParameter, intStatusParameter, includeTaxPayerTypeIdsParameter, excludeTaxPayerTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetTitleList_Result> usp_GetTitleList(string titleName, Nullable<int> titleID, Nullable<int> genderID, string titleIds, Nullable<int> intStatus, string includeTitleIds, string excludeTitleIds)
        {
            var titleNameParameter = titleName != null ?
                new ObjectParameter("TitleName", titleName) :
                new ObjectParameter("TitleName", typeof(string));
    
            var titleIDParameter = titleID.HasValue ?
                new ObjectParameter("TitleID", titleID) :
                new ObjectParameter("TitleID", typeof(int));
    
            var genderIDParameter = genderID.HasValue ?
                new ObjectParameter("GenderID", genderID) :
                new ObjectParameter("GenderID", typeof(int));
    
            var titleIdsParameter = titleIds != null ?
                new ObjectParameter("TitleIds", titleIds) :
                new ObjectParameter("TitleIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeTitleIdsParameter = includeTitleIds != null ?
                new ObjectParameter("IncludeTitleIds", includeTitleIds) :
                new ObjectParameter("IncludeTitleIds", typeof(string));
    
            var excludeTitleIdsParameter = excludeTitleIds != null ?
                new ObjectParameter("ExcludeTitleIds", excludeTitleIds) :
                new ObjectParameter("ExcludeTitleIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTitleList_Result>("usp_GetTitleList", titleNameParameter, titleIDParameter, genderIDParameter, titleIdsParameter, intStatusParameter, includeTitleIdsParameter, excludeTitleIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetTownList_Result> usp_GetTownList(string townName, Nullable<int> townID, Nullable<int> lGAID, string townIds, Nullable<int> intStatus, string includeTownIds, string excludeTownIds)
        {
            var townNameParameter = townName != null ?
                new ObjectParameter("TownName", townName) :
                new ObjectParameter("TownName", typeof(string));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("TownID", townID) :
                new ObjectParameter("TownID", typeof(int));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var townIdsParameter = townIds != null ?
                new ObjectParameter("TownIds", townIds) :
                new ObjectParameter("TownIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeTownIdsParameter = includeTownIds != null ?
                new ObjectParameter("IncludeTownIds", includeTownIds) :
                new ObjectParameter("IncludeTownIds", typeof(string));
    
            var excludeTownIdsParameter = excludeTownIds != null ?
                new ObjectParameter("ExcludeTownIds", excludeTownIds) :
                new ObjectParameter("ExcludeTownIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTownList_Result>("usp_GetTownList", townNameParameter, townIDParameter, lGAIDParameter, townIdsParameter, intStatusParameter, includeTownIdsParameter, excludeTownIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetUnitFunctionList_Result> usp_GetUnitFunctionList(string unitFunctionName, Nullable<int> unitFunctionID, Nullable<int> unitPurposeID, string unitFunctionIds, Nullable<int> intStatus, string includeUnitFunctionIds, string excludeUnitFunctionIds)
        {
            var unitFunctionNameParameter = unitFunctionName != null ?
                new ObjectParameter("UnitFunctionName", unitFunctionName) :
                new ObjectParameter("UnitFunctionName", typeof(string));
    
            var unitFunctionIDParameter = unitFunctionID.HasValue ?
                new ObjectParameter("UnitFunctionID", unitFunctionID) :
                new ObjectParameter("UnitFunctionID", typeof(int));
    
            var unitPurposeIDParameter = unitPurposeID.HasValue ?
                new ObjectParameter("UnitPurposeID", unitPurposeID) :
                new ObjectParameter("UnitPurposeID", typeof(int));
    
            var unitFunctionIdsParameter = unitFunctionIds != null ?
                new ObjectParameter("UnitFunctionIds", unitFunctionIds) :
                new ObjectParameter("UnitFunctionIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeUnitFunctionIdsParameter = includeUnitFunctionIds != null ?
                new ObjectParameter("IncludeUnitFunctionIds", includeUnitFunctionIds) :
                new ObjectParameter("IncludeUnitFunctionIds", typeof(string));
    
            var excludeUnitFunctionIdsParameter = excludeUnitFunctionIds != null ?
                new ObjectParameter("ExcludeUnitFunctionIds", excludeUnitFunctionIds) :
                new ObjectParameter("ExcludeUnitFunctionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUnitFunctionList_Result>("usp_GetUnitFunctionList", unitFunctionNameParameter, unitFunctionIDParameter, unitPurposeIDParameter, unitFunctionIdsParameter, intStatusParameter, includeUnitFunctionIdsParameter, excludeUnitFunctionIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetUnitOccupancyList_Result> usp_GetUnitOccupancyList(string unitOccupancyName, Nullable<int> unitOccupancyID, string unitOccupancyIds, Nullable<int> intStatus, string includeUnitOccupancyIds, string excludeUnitOccupancyIds)
        {
            var unitOccupancyNameParameter = unitOccupancyName != null ?
                new ObjectParameter("UnitOccupancyName", unitOccupancyName) :
                new ObjectParameter("UnitOccupancyName", typeof(string));
    
            var unitOccupancyIDParameter = unitOccupancyID.HasValue ?
                new ObjectParameter("UnitOccupancyID", unitOccupancyID) :
                new ObjectParameter("UnitOccupancyID", typeof(int));
    
            var unitOccupancyIdsParameter = unitOccupancyIds != null ?
                new ObjectParameter("UnitOccupancyIds", unitOccupancyIds) :
                new ObjectParameter("UnitOccupancyIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeUnitOccupancyIdsParameter = includeUnitOccupancyIds != null ?
                new ObjectParameter("IncludeUnitOccupancyIds", includeUnitOccupancyIds) :
                new ObjectParameter("IncludeUnitOccupancyIds", typeof(string));
    
            var excludeUnitOccupancyIdsParameter = excludeUnitOccupancyIds != null ?
                new ObjectParameter("ExcludeUnitOccupancyIds", excludeUnitOccupancyIds) :
                new ObjectParameter("ExcludeUnitOccupancyIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUnitOccupancyList_Result>("usp_GetUnitOccupancyList", unitOccupancyNameParameter, unitOccupancyIDParameter, unitOccupancyIdsParameter, intStatusParameter, includeUnitOccupancyIdsParameter, excludeUnitOccupancyIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetUnitPurposeList_Result> usp_GetUnitPurposeList(string unitPurposeName, Nullable<int> unitPurposeID, string unitPurposeIds, Nullable<int> intStatus, string includeUnitPurposeIds, string excludeUnitPurposeIds)
        {
            var unitPurposeNameParameter = unitPurposeName != null ?
                new ObjectParameter("UnitPurposeName", unitPurposeName) :
                new ObjectParameter("UnitPurposeName", typeof(string));
    
            var unitPurposeIDParameter = unitPurposeID.HasValue ?
                new ObjectParameter("UnitPurposeID", unitPurposeID) :
                new ObjectParameter("UnitPurposeID", typeof(int));
    
            var unitPurposeIdsParameter = unitPurposeIds != null ?
                new ObjectParameter("UnitPurposeIds", unitPurposeIds) :
                new ObjectParameter("UnitPurposeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeUnitPurposeIdsParameter = includeUnitPurposeIds != null ?
                new ObjectParameter("IncludeUnitPurposeIds", includeUnitPurposeIds) :
                new ObjectParameter("IncludeUnitPurposeIds", typeof(string));
    
            var excludeUnitPurposeIdsParameter = excludeUnitPurposeIds != null ?
                new ObjectParameter("ExcludeUnitPurposeIds", excludeUnitPurposeIds) :
                new ObjectParameter("ExcludeUnitPurposeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUnitPurposeList_Result>("usp_GetUnitPurposeList", unitPurposeNameParameter, unitPurposeIDParameter, unitPurposeIdsParameter, intStatusParameter, includeUnitPurposeIdsParameter, excludeUnitPurposeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleFunctionList_Result> usp_GetVehicleFunctionList(string vehicleFunctionName, Nullable<int> vehicleFunctionID, Nullable<int> vehiclePurposeID, string vehicleFunctionIds, Nullable<int> intStatus, string includeVehicleFunctionIds, string excludeVehicleFunctionIds)
        {
            var vehicleFunctionNameParameter = vehicleFunctionName != null ?
                new ObjectParameter("VehicleFunctionName", vehicleFunctionName) :
                new ObjectParameter("VehicleFunctionName", typeof(string));
    
            var vehicleFunctionIDParameter = vehicleFunctionID.HasValue ?
                new ObjectParameter("VehicleFunctionID", vehicleFunctionID) :
                new ObjectParameter("VehicleFunctionID", typeof(int));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var vehicleFunctionIdsParameter = vehicleFunctionIds != null ?
                new ObjectParameter("VehicleFunctionIds", vehicleFunctionIds) :
                new ObjectParameter("VehicleFunctionIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeVehicleFunctionIdsParameter = includeVehicleFunctionIds != null ?
                new ObjectParameter("IncludeVehicleFunctionIds", includeVehicleFunctionIds) :
                new ObjectParameter("IncludeVehicleFunctionIds", typeof(string));
    
            var excludeVehicleFunctionIdsParameter = excludeVehicleFunctionIds != null ?
                new ObjectParameter("ExcludeVehicleFunctionIds", excludeVehicleFunctionIds) :
                new ObjectParameter("ExcludeVehicleFunctionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleFunctionList_Result>("usp_GetVehicleFunctionList", vehicleFunctionNameParameter, vehicleFunctionIDParameter, vehiclePurposeIDParameter, vehicleFunctionIdsParameter, intStatusParameter, includeVehicleFunctionIdsParameter, excludeVehicleFunctionIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleInsuranceList_Result> usp_GetVehicleInsuranceList(string insuranceCertificateNumber, Nullable<int> vehicleInsuranceID, Nullable<int> vehicleID, Nullable<int> intStatus)
        {
            var insuranceCertificateNumberParameter = insuranceCertificateNumber != null ?
                new ObjectParameter("InsuranceCertificateNumber", insuranceCertificateNumber) :
                new ObjectParameter("InsuranceCertificateNumber", typeof(string));
    
            var vehicleInsuranceIDParameter = vehicleInsuranceID.HasValue ?
                new ObjectParameter("VehicleInsuranceID", vehicleInsuranceID) :
                new ObjectParameter("VehicleInsuranceID", typeof(int));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleInsuranceList_Result>("usp_GetVehicleInsuranceList", insuranceCertificateNumberParameter, vehicleInsuranceIDParameter, vehicleIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleLicenseList_Result> usp_GetVehicleLicenseList(string licenseNumber, Nullable<int> vehicleLicenseID, Nullable<int> vehicleID, Nullable<int> intStatus)
        {
            var licenseNumberParameter = licenseNumber != null ?
                new ObjectParameter("LicenseNumber", licenseNumber) :
                new ObjectParameter("LicenseNumber", typeof(string));
    
            var vehicleLicenseIDParameter = vehicleLicenseID.HasValue ?
                new ObjectParameter("VehicleLicenseID", vehicleLicenseID) :
                new ObjectParameter("VehicleLicenseID", typeof(int));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleLicenseList_Result>("usp_GetVehicleLicenseList", licenseNumberParameter, vehicleLicenseIDParameter, vehicleIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleList_Result> usp_GetVehicleList(Nullable<int> vehicleID, string vehicleRIN, string vehicleRegNumber, string vehicleDescription, Nullable<int> lGAID, Nullable<int> intStatus)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            var vehicleRINParameter = vehicleRIN != null ?
                new ObjectParameter("VehicleRIN", vehicleRIN) :
                new ObjectParameter("VehicleRIN", typeof(string));
    
            var vehicleRegNumberParameter = vehicleRegNumber != null ?
                new ObjectParameter("VehicleRegNumber", vehicleRegNumber) :
                new ObjectParameter("VehicleRegNumber", typeof(string));
    
            var vehicleDescriptionParameter = vehicleDescription != null ?
                new ObjectParameter("VehicleDescription", vehicleDescription) :
                new ObjectParameter("VehicleDescription", typeof(string));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleList_Result>("usp_GetVehicleList", vehicleIDParameter, vehicleRINParameter, vehicleRegNumberParameter, vehicleDescriptionParameter, lGAIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleOwnershipList_Result> usp_GetVehicleOwnershipList(string vehicleOwnershipName, Nullable<int> vehicleOwnershipID, string vehicleOwnershipIds, Nullable<int> intStatus, string includeVehicleOwnershipIds, string excludeVehicleOwnershipIds)
        {
            var vehicleOwnershipNameParameter = vehicleOwnershipName != null ?
                new ObjectParameter("VehicleOwnershipName", vehicleOwnershipName) :
                new ObjectParameter("VehicleOwnershipName", typeof(string));
    
            var vehicleOwnershipIDParameter = vehicleOwnershipID.HasValue ?
                new ObjectParameter("VehicleOwnershipID", vehicleOwnershipID) :
                new ObjectParameter("VehicleOwnershipID", typeof(int));
    
            var vehicleOwnershipIdsParameter = vehicleOwnershipIds != null ?
                new ObjectParameter("VehicleOwnershipIds", vehicleOwnershipIds) :
                new ObjectParameter("VehicleOwnershipIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeVehicleOwnershipIdsParameter = includeVehicleOwnershipIds != null ?
                new ObjectParameter("IncludeVehicleOwnershipIds", includeVehicleOwnershipIds) :
                new ObjectParameter("IncludeVehicleOwnershipIds", typeof(string));
    
            var excludeVehicleOwnershipIdsParameter = excludeVehicleOwnershipIds != null ?
                new ObjectParameter("ExcludeVehicleOwnershipIds", excludeVehicleOwnershipIds) :
                new ObjectParameter("ExcludeVehicleOwnershipIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleOwnershipList_Result>("usp_GetVehicleOwnershipList", vehicleOwnershipNameParameter, vehicleOwnershipIDParameter, vehicleOwnershipIdsParameter, intStatusParameter, includeVehicleOwnershipIdsParameter, excludeVehicleOwnershipIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetVehiclePurposeList_Result> usp_GetVehiclePurposeList(string vehiclePurposeName, Nullable<int> vehiclePurposeID, string vehiclePurposeIds, Nullable<int> intStatus, string includeVehiclePurposeIds, string excludeVehiclePurposeIds)
        {
            var vehiclePurposeNameParameter = vehiclePurposeName != null ?
                new ObjectParameter("VehiclePurposeName", vehiclePurposeName) :
                new ObjectParameter("VehiclePurposeName", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var vehiclePurposeIdsParameter = vehiclePurposeIds != null ?
                new ObjectParameter("VehiclePurposeIds", vehiclePurposeIds) :
                new ObjectParameter("VehiclePurposeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeVehiclePurposeIdsParameter = includeVehiclePurposeIds != null ?
                new ObjectParameter("IncludeVehiclePurposeIds", includeVehiclePurposeIds) :
                new ObjectParameter("IncludeVehiclePurposeIds", typeof(string));
    
            var excludeVehiclePurposeIdsParameter = excludeVehiclePurposeIds != null ?
                new ObjectParameter("ExcludeVehiclePurposeIds", excludeVehiclePurposeIds) :
                new ObjectParameter("ExcludeVehiclePurposeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehiclePurposeList_Result>("usp_GetVehiclePurposeList", vehiclePurposeNameParameter, vehiclePurposeIDParameter, vehiclePurposeIdsParameter, intStatusParameter, includeVehiclePurposeIdsParameter, excludeVehiclePurposeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleSubTypeList_Result> usp_GetVehicleSubTypeList(string vehicleSubTypeName, Nullable<int> vehicleSubTypeID, Nullable<int> vehicleTypeID, string vehicleSubTypeIds, Nullable<int> intStatus, string includeVehicleSubTypeIds, string excludeVehicleSubTypeIds)
        {
            var vehicleSubTypeNameParameter = vehicleSubTypeName != null ?
                new ObjectParameter("VehicleSubTypeName", vehicleSubTypeName) :
                new ObjectParameter("VehicleSubTypeName", typeof(string));
    
            var vehicleSubTypeIDParameter = vehicleSubTypeID.HasValue ?
                new ObjectParameter("VehicleSubTypeID", vehicleSubTypeID) :
                new ObjectParameter("VehicleSubTypeID", typeof(int));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var vehicleSubTypeIdsParameter = vehicleSubTypeIds != null ?
                new ObjectParameter("VehicleSubTypeIds", vehicleSubTypeIds) :
                new ObjectParameter("VehicleSubTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeVehicleSubTypeIdsParameter = includeVehicleSubTypeIds != null ?
                new ObjectParameter("IncludeVehicleSubTypeIds", includeVehicleSubTypeIds) :
                new ObjectParameter("IncludeVehicleSubTypeIds", typeof(string));
    
            var excludeVehicleSubTypeIdsParameter = excludeVehicleSubTypeIds != null ?
                new ObjectParameter("ExcludeVehicleSubTypeIds", excludeVehicleSubTypeIds) :
                new ObjectParameter("ExcludeVehicleSubTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleSubTypeList_Result>("usp_GetVehicleSubTypeList", vehicleSubTypeNameParameter, vehicleSubTypeIDParameter, vehicleTypeIDParameter, vehicleSubTypeIdsParameter, intStatusParameter, includeVehicleSubTypeIdsParameter, excludeVehicleSubTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleTypeList_Result> usp_GetVehicleTypeList(string vehicleTypeName, Nullable<int> vehicleTypeID, string vehicleTypeIds, Nullable<int> intStatus, string includeVehicleTypeIds, string excludeVehicleTypeIds)
        {
            var vehicleTypeNameParameter = vehicleTypeName != null ?
                new ObjectParameter("VehicleTypeName", vehicleTypeName) :
                new ObjectParameter("VehicleTypeName", typeof(string));
    
            var vehicleTypeIDParameter = vehicleTypeID.HasValue ?
                new ObjectParameter("VehicleTypeID", vehicleTypeID) :
                new ObjectParameter("VehicleTypeID", typeof(int));
    
            var vehicleTypeIdsParameter = vehicleTypeIds != null ?
                new ObjectParameter("VehicleTypeIds", vehicleTypeIds) :
                new ObjectParameter("VehicleTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeVehicleTypeIdsParameter = includeVehicleTypeIds != null ?
                new ObjectParameter("IncludeVehicleTypeIds", includeVehicleTypeIds) :
                new ObjectParameter("IncludeVehicleTypeIds", typeof(string));
    
            var excludeVehicleTypeIdsParameter = excludeVehicleTypeIds != null ?
                new ObjectParameter("ExcludeVehicleTypeIds", excludeVehicleTypeIds) :
                new ObjectParameter("ExcludeVehicleTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleTypeList_Result>("usp_GetVehicleTypeList", vehicleTypeNameParameter, vehicleTypeIDParameter, vehicleTypeIdsParameter, intStatusParameter, includeVehicleTypeIdsParameter, excludeVehicleTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetWardList_Result> usp_GetWardList(string wardName, Nullable<int> wardID, Nullable<int> lGAID, string wardIds, Nullable<int> intStatus, string includeWardIds, string excludeWardIds)
        {
            var wardNameParameter = wardName != null ?
                new ObjectParameter("WardName", wardName) :
                new ObjectParameter("WardName", typeof(string));
    
            var wardIDParameter = wardID.HasValue ?
                new ObjectParameter("WardID", wardID) :
                new ObjectParameter("WardID", typeof(int));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var wardIdsParameter = wardIds != null ?
                new ObjectParameter("WardIds", wardIds) :
                new ObjectParameter("WardIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeWardIdsParameter = includeWardIds != null ?
                new ObjectParameter("IncludeWardIds", includeWardIds) :
                new ObjectParameter("IncludeWardIds", typeof(string));
    
            var excludeWardIdsParameter = excludeWardIds != null ?
                new ObjectParameter("ExcludeWardIds", excludeWardIds) :
                new ObjectParameter("ExcludeWardIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetWardList_Result>("usp_GetWardList", wardNameParameter, wardIDParameter, lGAIDParameter, wardIdsParameter, intStatusParameter, includeWardIdsParameter, excludeWardIdsParameter);
        }
    
        public virtual int usp_InsertProfileInformation(Nullable<long> tPAID)
        {
            var tPAIDParameter = tPAID.HasValue ?
                new ObjectParameter("TPAID", tPAID) :
                new ObjectParameter("TPAID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertProfileInformation", tPAIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetAssetTypeReport_Result> usp_RPT_GetAssetTypeReport(Nullable<int> taxYear, Nullable<int> taxMonth)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetAssetTypeReport_Result>("usp_RPT_GetAssetTypeReport", taxYearParameter, taxMonthParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetDashboardReport_Result> usp_RPT_GetDashboardReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetDashboardReport_Result>("usp_RPT_GetDashboardReport");
        }
    
        public virtual ObjectResult<usp_RPT_GetDirectorateReport_Result> usp_RPT_GetDirectorateReport(Nullable<int> taxYear, Nullable<int> taxMonth)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetDirectorateReport_Result>("usp_RPT_GetDirectorateReport", taxYearParameter, taxMonthParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetRevenueStreamReport_Result> usp_RPT_GetRevenueStreamReport(Nullable<int> taxYear, Nullable<int> taxMonth)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetRevenueStreamReport_Result>("usp_RPT_GetRevenueStreamReport", taxYearParameter, taxMonthParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetTaxPayerReport_Result> usp_RPT_GetTaxPayerReport(Nullable<int> taxYear, Nullable<int> taxMonth, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetTaxPayerReport_Result>("usp_RPT_GetTaxPayerReport", taxYearParameter, taxMonthParameter, taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchTaxPayer_Result> usp_SearchTaxPayer(string taxPayerRIN, string mobileNumber, string assetName, string taxPayerName, Nullable<int> taxPayerTypeID, string taxPayerTIN, Nullable<int> taxOfficeID, Nullable<int> searchType)
        {
            var taxPayerRINParameter = taxPayerRIN != null ?
                new ObjectParameter("TaxPayerRIN", taxPayerRIN) :
                new ObjectParameter("TaxPayerRIN", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var assetNameParameter = assetName != null ?
                new ObjectParameter("AssetName", assetName) :
                new ObjectParameter("AssetName", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerTINParameter = taxPayerTIN != null ?
                new ObjectParameter("TaxPayerTIN", taxPayerTIN) :
                new ObjectParameter("TaxPayerTIN", typeof(string));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchTaxPayer_Result>("usp_SearchTaxPayer", taxPayerRINParameter, mobileNumberParameter, assetNameParameter, taxPayerNameParameter, taxPayerTypeIDParameter, taxPayerTINParameter, taxOfficeIDParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentAccountList_Result> usp_GetPaymentAccountList(Nullable<long> paymentAccountID, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<int> revenueStreamID)
        {
            var paymentAccountIDParameter = paymentAccountID.HasValue ?
                new ObjectParameter("PaymentAccountID", paymentAccountID) :
                new ObjectParameter("PaymentAccountID", typeof(long));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentAccountList_Result>("usp_GetPaymentAccountList", paymentAccountIDParameter, taxPayerTypeIDParameter, taxPayerIDParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerPayment_Result> usp_GetTaxPayerPayment(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerPayment_Result>("usp_GetTaxPayerPayment", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetProfileAssetData_Result> usp_GetProfileAssetData(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProfileAssetData_Result>("usp_GetProfileAssetData", profileIDParameter);
        }
    
        public virtual ObjectResult<usp_GetProfileData_Result> usp_GetProfileData(string profileDescription, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProfileData_Result>("usp_GetProfileData", profileDescriptionParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetProfileTaxPayerData_Result> usp_GetProfileTaxPayerData(Nullable<int> profileID)
        {
            var profileIDParameter = profileID.HasValue ?
                new ObjectParameter("ProfileID", profileID) :
                new ObjectParameter("ProfileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProfileTaxPayerData_Result>("usp_GetProfileTaxPayerData", profileIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCompanyPAYEAsset_Result> usp_GetCompanyPAYEAsset(Nullable<int> companyID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompanyPAYEAsset_Result>("usp_GetCompanyPAYEAsset", companyIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBuildingList_Result> usp_GetTaxPayerBuildingList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBuildingList_Result>("usp_GetTaxPayerBuildingList", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBusinessList_Result> usp_GetTaxPayerBusinessList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBusinessList_Result>("usp_GetTaxPayerBusinessList", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerLandList_Result> usp_GetTaxPayerLandList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerLandList_Result>("usp_GetTaxPayerLandList", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerVehicleList_Result> usp_GetTaxPayerVehicleList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerVehicleList_Result>("usp_GetTaxPayerVehicleList", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentBasedOnProfileForSupplier_Result> usp_GetAssessmentBasedOnProfileForSupplier(string profileDescription, Nullable<int> vehiclePurposeID, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentBasedOnProfileForSupplier_Result>("usp_GetAssessmentBasedOnProfileForSupplier", profileDescriptionParameter, vehiclePurposeIDParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentItemBasedOnProfileForSupplier_Result> usp_GetAssessmentItemBasedOnProfileForSupplier(string profileDescription, Nullable<int> vehiclePurposeID, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentItemBasedOnProfileForSupplier_Result>("usp_GetAssessmentItemBasedOnProfileForSupplier", profileDescriptionParameter, vehiclePurposeIDParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleBasedOnProfileForSupplier_Result> usp_GetAssessmentRuleBasedOnProfileForSupplier(string profileDescription, Nullable<int> vehiclePurposeID, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleBasedOnProfileForSupplier_Result>("usp_GetAssessmentRuleBasedOnProfileForSupplier", profileDescriptionParameter, vehiclePurposeIDParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingBasedOnProfileForSupplier_Result> usp_GetBuildingBasedOnProfileForSupplier(string profileDescription)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingBasedOnProfileForSupplier_Result>("usp_GetBuildingBasedOnProfileForSupplier", profileDescriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessBasedOnProfileForSupplier_Result> usp_GetBusinessBasedOnProfileForSupplier(string profileDescription, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessBasedOnProfileForSupplier_Result>("usp_GetBusinessBasedOnProfileForSupplier", profileDescriptionParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetLandBasedOnProfileForSupplier_Result> usp_GetLandBasedOnProfileForSupplier(string profileDescription)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandBasedOnProfileForSupplier_Result>("usp_GetLandBasedOnProfileForSupplier", profileDescriptionParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerAssetProfileBasedOnProfileForSupplier_Result> usp_GetTaxPayerAssetProfileBasedOnProfileForSupplier(string profileDescription, Nullable<int> vehiclePurposeID, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerAssetProfileBasedOnProfileForSupplier_Result>("usp_GetTaxPayerAssetProfileBasedOnProfileForSupplier", profileDescriptionParameter, vehiclePurposeIDParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBasedOnProfileForSupplier_Result> usp_GetTaxPayerBasedOnProfileForSupplier(string profileDescription, Nullable<int> vehiclePurposeID, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBasedOnProfileForSupplier_Result>("usp_GetTaxPayerBasedOnProfileForSupplier", profileDescriptionParameter, vehiclePurposeIDParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleBasedOnProfileForSupplier_Result> usp_GetVehicleBasedOnProfileForSupplier(string profileDescription, Nullable<int> vehiclePurposeID, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleBasedOnProfileForSupplier_Result>("usp_GetVehicleBasedOnProfileForSupplier", profileDescriptionParameter, vehiclePurposeIDParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleInsuranceVerificationMDAServiceForSupplier_Result> usp_GetVehicleInsuranceVerificationMDAServiceForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleInsuranceVerificationMDAServiceForSupplier_Result>("usp_GetVehicleInsuranceVerificationMDAServiceForSupplier");
        }
    
        public virtual ObjectResult<usp_GetVehicleInsuranceVerificationMDAServiceItemForSupplier_Result> usp_GetVehicleInsuranceVerificationMDAServiceItemForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleInsuranceVerificationMDAServiceItemForSupplier_Result>("usp_GetVehicleInsuranceVerificationMDAServiceItemForSupplier");
        }
    
        public virtual ObjectResult<usp_GetVehicleLicenseMDAServiceForSupplier_Result> usp_GetVehicleLicenseMDAServiceForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleLicenseMDAServiceForSupplier_Result>("usp_GetVehicleLicenseMDAServiceForSupplier");
        }
    
        public virtual ObjectResult<usp_GetVehicleLicenseMDAServiceItemForSupplier_Result> usp_GetVehicleLicenseMDAServiceItemForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleLicenseMDAServiceItemForSupplier_Result>("usp_GetVehicleLicenseMDAServiceItemForSupplier");
        }
    
        public virtual ObjectResult<usp_GetVehicleInsuranceVerificationServiceBillForSupplier_Result> usp_GetVehicleInsuranceVerificationServiceBillForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleInsuranceVerificationServiceBillForSupplier_Result>("usp_GetVehicleInsuranceVerificationServiceBillForSupplier");
        }
    
        public virtual ObjectResult<usp_GetVehicleLicenseServiceBillForSupplier_Result> usp_GetVehicleLicenseServiceBillForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleLicenseServiceBillForSupplier_Result>("usp_GetVehicleLicenseServiceBillForSupplier");
        }
    
        public virtual ObjectResult<usp_GetDailySummaryReport_Result> usp_GetDailySummaryReport(Nullable<System.DateTime> reportDate, Nullable<int> referenceID)
        {
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDailySummaryReport_Result>("usp_GetDailySummaryReport", reportDateParameter, referenceIDParameter);
        }
    
        public virtual ObjectResult<usp_GetMonthlySummaryReport_Result> usp_GetMonthlySummaryReport(Nullable<System.DateTime> reportMonth, Nullable<int> referenceID)
        {
            var reportMonthParameter = reportMonth.HasValue ?
                new ObjectParameter("ReportMonth", reportMonth) :
                new ObjectParameter("ReportMonth", typeof(System.DateTime));
    
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMonthlySummaryReport_Result>("usp_GetMonthlySummaryReport", reportMonthParameter, referenceIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> usp_GetWalletBalance(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("usp_GetWalletBalance", taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetMASPriceSheet_Result> usp_GetMASPriceSheet(Nullable<int> requestType)
        {
            var requestTypeParameter = requestType.HasValue ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMASPriceSheet_Result>("usp_GetMASPriceSheet", requestTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetEdoGISMDAServiceForSupplier_Result> usp_GetEdoGISMDAServiceForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEdoGISMDAServiceForSupplier_Result>("usp_GetEdoGISMDAServiceForSupplier");
        }
    
        public virtual ObjectResult<usp_GetEdoGISMDAServiceItemForSupplier_Result> usp_GetEdoGISMDAServiceItemForSupplier()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetEdoGISMDAServiceItemForSupplier_Result>("usp_GetEdoGISMDAServiceItemForSupplier");
        }
    
        public virtual ObjectResult<usp_GetVehicleTaxPayerList_Result> usp_GetVehicleTaxPayerList(Nullable<int> vehicleID)
        {
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleTaxPayerList_Result>("usp_GetVehicleTaxPayerList", vehicleIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchVehicleByRegNumber_Result> usp_SearchVehicleByRegNumber(string vehicleRegNumber)
        {
            var vehicleRegNumberParameter = vehicleRegNumber != null ?
                new ObjectParameter("VehicleRegNumber", vehicleRegNumber) :
                new ObjectParameter("VehicleRegNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchVehicleByRegNumber_Result>("usp_SearchVehicleByRegNumber", vehicleRegNumberParameter);
        }
    
        public virtual ObjectResult<usp_GetSearchLandForEdoGIS_Result> usp_GetSearchLandForEdoGIS(string landRIN, string plotNumber, string landOccupier, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var landRINParameter = landRIN != null ?
                new ObjectParameter("LandRIN", landRIN) :
                new ObjectParameter("LandRIN", typeof(string));
    
            var plotNumberParameter = plotNumber != null ?
                new ObjectParameter("PlotNumber", plotNumber) :
                new ObjectParameter("PlotNumber", typeof(string));
    
            var landOccupierParameter = landOccupier != null ?
                new ObjectParameter("LandOccupier", landOccupier) :
                new ObjectParameter("LandOccupier", typeof(string));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSearchLandForEdoGIS_Result>("usp_GetSearchLandForEdoGIS", landRINParameter, plotNumberParameter, landOccupierParameter, taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSettleTransactionList_Result> usp_GetSettleTransactionList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> transactionTypeID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("TransactionTypeID", transactionTypeID) :
                new ObjectParameter("TransactionTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettleTransactionList_Result>("usp_GetSettleTransactionList", fromDateParameter, toDateParameter, transactionTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentByRevenueStream_Result> usp_GetPaymentByRevenueStream(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> paymentType)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentByRevenueStream_Result>("usp_GetPaymentByRevenueStream", taxYearParameter, fromDateParameter, toDateParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBillAgingByRevenueStream_Result> usp_GetBillAgingByRevenueStream(Nullable<int> billType, Nullable<int> stageID)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillAgingByRevenueStream_Result>("usp_GetBillAgingByRevenueStream", billTypeParameter, stageIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillByRevenueStream_Result> usp_GetBillByRevenueStream(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> billType, Nullable<int> billStatusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var billStatusIDParameter = billStatusID.HasValue ?
                new ObjectParameter("BillStatusID", billStatusID) :
                new ObjectParameter("BillStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillByRevenueStream_Result>("usp_GetBillByRevenueStream", taxYearParameter, fromDateParameter, toDateParameter, billTypeParameter, billStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPOATaxPayerWithoutAsset_Result> usp_GetPOATaxPayerWithoutAsset(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taxPayerTypeID, Nullable<int> taxOfficeID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPOATaxPayerWithoutAsset_Result>("usp_GetPOATaxPayerWithoutAsset", taxYearParameter, fromDateParameter, toDateParameter, taxPayerTypeIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillAgingDetailByRevenueStream_Result> usp_GetBillAgingDetailByRevenueStream(Nullable<int> billType, Nullable<int> stageID, Nullable<int> revenueStreamID)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillAgingDetailByRevenueStream_Result>("usp_GetBillAgingDetailByRevenueStream", billTypeParameter, stageIDParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentByTaxOffice_Result> usp_GetPaymentByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> paymentType)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentByTaxOffice_Result>("usp_GetPaymentByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBillByTaxOffice_Result> usp_GetBillByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> billType, Nullable<int> billStatusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var billStatusIDParameter = billStatusID.HasValue ?
                new ObjectParameter("BillStatusID", billStatusID) :
                new ObjectParameter("BillStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillByTaxOffice_Result>("usp_GetBillByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter, billTypeParameter, billStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillDetailByTaxOffice_Result> usp_GetBillDetailByTaxOffice(Nullable<int> billType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> billStatusID, Nullable<int> taxOfficeID)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var billStatusIDParameter = billStatusID.HasValue ?
                new ObjectParameter("BillStatusID", billStatusID) :
                new ObjectParameter("BillStatusID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillDetailByTaxOffice_Result>("usp_GetBillDetailByTaxOffice", billTypeParameter, fromDateParameter, toDateParameter, billStatusIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillAgingByTaxOffice_Result> usp_GetBillAgingByTaxOffice(Nullable<int> billType, Nullable<int> stageID)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillAgingByTaxOffice_Result>("usp_GetBillAgingByTaxOffice", billTypeParameter, stageIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillAgingDetailByTaxOffice_Result> usp_GetBillAgingDetailByTaxOffice(Nullable<int> billType, Nullable<int> stageID, Nullable<int> taxOfficeID)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillAgingDetailByTaxOffice_Result>("usp_GetBillAgingDetailByTaxOffice", billTypeParameter, stageIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessmentItemForRDMLoad_Result> usp_SearchAssessmentItemForRDMLoad(string assessmentItemReferenceNo, string assetTypeName, string assessmentGroupName, string assessmentSubGroupName, string revenueStreamName, string revenueSubStreamName, string assessmentItemCategoryName, string assessmentItemSubCategoryName, string agencyName, string assessmentItemName, string computationName, string taxAmount, string percentage, string taxBaseAmount, string activeText)
        {
            var assessmentItemReferenceNoParameter = assessmentItemReferenceNo != null ?
                new ObjectParameter("AssessmentItemReferenceNo", assessmentItemReferenceNo) :
                new ObjectParameter("AssessmentItemReferenceNo", typeof(string));
    
            var assetTypeNameParameter = assetTypeName != null ?
                new ObjectParameter("AssetTypeName", assetTypeName) :
                new ObjectParameter("AssetTypeName", typeof(string));
    
            var assessmentGroupNameParameter = assessmentGroupName != null ?
                new ObjectParameter("AssessmentGroupName", assessmentGroupName) :
                new ObjectParameter("AssessmentGroupName", typeof(string));
    
            var assessmentSubGroupNameParameter = assessmentSubGroupName != null ?
                new ObjectParameter("AssessmentSubGroupName", assessmentSubGroupName) :
                new ObjectParameter("AssessmentSubGroupName", typeof(string));
    
            var revenueStreamNameParameter = revenueStreamName != null ?
                new ObjectParameter("RevenueStreamName", revenueStreamName) :
                new ObjectParameter("RevenueStreamName", typeof(string));
    
            var revenueSubStreamNameParameter = revenueSubStreamName != null ?
                new ObjectParameter("RevenueSubStreamName", revenueSubStreamName) :
                new ObjectParameter("RevenueSubStreamName", typeof(string));
    
            var assessmentItemCategoryNameParameter = assessmentItemCategoryName != null ?
                new ObjectParameter("AssessmentItemCategoryName", assessmentItemCategoryName) :
                new ObjectParameter("AssessmentItemCategoryName", typeof(string));
    
            var assessmentItemSubCategoryNameParameter = assessmentItemSubCategoryName != null ?
                new ObjectParameter("AssessmentItemSubCategoryName", assessmentItemSubCategoryName) :
                new ObjectParameter("AssessmentItemSubCategoryName", typeof(string));
    
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var assessmentItemNameParameter = assessmentItemName != null ?
                new ObjectParameter("AssessmentItemName", assessmentItemName) :
                new ObjectParameter("AssessmentItemName", typeof(string));
    
            var computationNameParameter = computationName != null ?
                new ObjectParameter("ComputationName", computationName) :
                new ObjectParameter("ComputationName", typeof(string));
    
            var taxAmountParameter = taxAmount != null ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(string));
    
            var percentageParameter = percentage != null ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(string));
    
            var taxBaseAmountParameter = taxBaseAmount != null ?
                new ObjectParameter("TaxBaseAmount", taxBaseAmount) :
                new ObjectParameter("TaxBaseAmount", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessmentItemForRDMLoad_Result>("usp_SearchAssessmentItemForRDMLoad", assessmentItemReferenceNoParameter, assetTypeNameParameter, assessmentGroupNameParameter, assessmentSubGroupNameParameter, revenueStreamNameParameter, revenueSubStreamNameParameter, assessmentItemCategoryNameParameter, assessmentItemSubCategoryNameParameter, agencyNameParameter, assessmentItemNameParameter, computationNameParameter, taxAmountParameter, percentageParameter, taxBaseAmountParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchGovernmentForRDMLoad_Result> usp_SearchGovernmentForRDMLoad(string governmentRIN, string governmentName, string tIN, string governmentTypeName, string taxOfficeName, string taxPayerTypeName, string contactName, string contactEmail, string contactNumber, string notificationMethodName, string activeText)
        {
            var governmentRINParameter = governmentRIN != null ?
                new ObjectParameter("GovernmentRIN", governmentRIN) :
                new ObjectParameter("GovernmentRIN", typeof(string));
    
            var governmentNameParameter = governmentName != null ?
                new ObjectParameter("GovernmentName", governmentName) :
                new ObjectParameter("GovernmentName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var governmentTypeNameParameter = governmentTypeName != null ?
                new ObjectParameter("GovernmentTypeName", governmentTypeName) :
                new ObjectParameter("GovernmentTypeName", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchGovernmentForRDMLoad_Result>("usp_SearchGovernmentForRDMLoad", governmentRINParameter, governmentNameParameter, tINParameter, governmentTypeNameParameter, taxOfficeNameParameter, taxPayerTypeNameParameter, contactNameParameter, contactEmailParameter, contactNumberParameter, notificationMethodNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchIndividualForRDMLoad_Result> usp_SearchIndividualForRDMLoad(string individualRIN, string genderName, string titleName, string firstName, string middleName, string lastName, string tIN, string mobileNumber1, string mobileNumber2, string emailAddress1, string emailAddress2, string biometricDetails, string taxOfficeName, string maritalStatusName, string nationalityName, string taxPayerTypeName, string economicActivitiesName, string notificationMethodName, string activeText, string dOB)
        {
            var individualRINParameter = individualRIN != null ?
                new ObjectParameter("IndividualRIN", individualRIN) :
                new ObjectParameter("IndividualRIN", typeof(string));
    
            var genderNameParameter = genderName != null ?
                new ObjectParameter("GenderName", genderName) :
                new ObjectParameter("GenderName", typeof(string));
    
            var titleNameParameter = titleName != null ?
                new ObjectParameter("TitleName", titleName) :
                new ObjectParameter("TitleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var mobileNumber1Parameter = mobileNumber1 != null ?
                new ObjectParameter("MobileNumber1", mobileNumber1) :
                new ObjectParameter("MobileNumber1", typeof(string));
    
            var mobileNumber2Parameter = mobileNumber2 != null ?
                new ObjectParameter("MobileNumber2", mobileNumber2) :
                new ObjectParameter("MobileNumber2", typeof(string));
    
            var emailAddress1Parameter = emailAddress1 != null ?
                new ObjectParameter("EmailAddress1", emailAddress1) :
                new ObjectParameter("EmailAddress1", typeof(string));
    
            var emailAddress2Parameter = emailAddress2 != null ?
                new ObjectParameter("EmailAddress2", emailAddress2) :
                new ObjectParameter("EmailAddress2", typeof(string));
    
            var biometricDetailsParameter = biometricDetails != null ?
                new ObjectParameter("BiometricDetails", biometricDetails) :
                new ObjectParameter("BiometricDetails", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var maritalStatusNameParameter = maritalStatusName != null ?
                new ObjectParameter("MaritalStatusName", maritalStatusName) :
                new ObjectParameter("MaritalStatusName", typeof(string));
    
            var nationalityNameParameter = nationalityName != null ?
                new ObjectParameter("NationalityName", nationalityName) :
                new ObjectParameter("NationalityName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var economicActivitiesNameParameter = economicActivitiesName != null ?
                new ObjectParameter("EconomicActivitiesName", economicActivitiesName) :
                new ObjectParameter("EconomicActivitiesName", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchIndividualForRDMLoad_Result>("usp_SearchIndividualForRDMLoad", individualRINParameter, genderNameParameter, titleNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, tINParameter, mobileNumber1Parameter, mobileNumber2Parameter, emailAddress1Parameter, emailAddress2Parameter, biometricDetailsParameter, taxOfficeNameParameter, maritalStatusNameParameter, nationalityNameParameter, taxPayerTypeNameParameter, economicActivitiesNameParameter, notificationMethodNameParameter, activeTextParameter, dOBParameter);
        }
    
        public virtual ObjectResult<usp_SearchMDAServiceItemForRDMLoad_Result> usp_SearchMDAServiceItemForRDMLoad(string mDAServiceItemReferenceNo, string revenueStreamName, string revenueSubStreamName, string assessmentItemCategoryName, string assessmentItemSubCategoryName, string agencyName, string mDAServiceItemName, string computationName, string serviceAmount, string percentage, string serviceBaseAmount, string activeText)
        {
            var mDAServiceItemReferenceNoParameter = mDAServiceItemReferenceNo != null ?
                new ObjectParameter("MDAServiceItemReferenceNo", mDAServiceItemReferenceNo) :
                new ObjectParameter("MDAServiceItemReferenceNo", typeof(string));
    
            var revenueStreamNameParameter = revenueStreamName != null ?
                new ObjectParameter("RevenueStreamName", revenueStreamName) :
                new ObjectParameter("RevenueStreamName", typeof(string));
    
            var revenueSubStreamNameParameter = revenueSubStreamName != null ?
                new ObjectParameter("RevenueSubStreamName", revenueSubStreamName) :
                new ObjectParameter("RevenueSubStreamName", typeof(string));
    
            var assessmentItemCategoryNameParameter = assessmentItemCategoryName != null ?
                new ObjectParameter("AssessmentItemCategoryName", assessmentItemCategoryName) :
                new ObjectParameter("AssessmentItemCategoryName", typeof(string));
    
            var assessmentItemSubCategoryNameParameter = assessmentItemSubCategoryName != null ?
                new ObjectParameter("AssessmentItemSubCategoryName", assessmentItemSubCategoryName) :
                new ObjectParameter("AssessmentItemSubCategoryName", typeof(string));
    
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var mDAServiceItemNameParameter = mDAServiceItemName != null ?
                new ObjectParameter("MDAServiceItemName", mDAServiceItemName) :
                new ObjectParameter("MDAServiceItemName", typeof(string));
    
            var computationNameParameter = computationName != null ?
                new ObjectParameter("ComputationName", computationName) :
                new ObjectParameter("ComputationName", typeof(string));
    
            var serviceAmountParameter = serviceAmount != null ?
                new ObjectParameter("ServiceAmount", serviceAmount) :
                new ObjectParameter("ServiceAmount", typeof(string));
    
            var percentageParameter = percentage != null ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(string));
    
            var serviceBaseAmountParameter = serviceBaseAmount != null ?
                new ObjectParameter("ServiceBaseAmount", serviceBaseAmount) :
                new ObjectParameter("ServiceBaseAmount", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchMDAServiceItemForRDMLoad_Result>("usp_SearchMDAServiceItemForRDMLoad", mDAServiceItemReferenceNoParameter, revenueStreamNameParameter, revenueSubStreamNameParameter, assessmentItemCategoryNameParameter, assessmentItemSubCategoryNameParameter, agencyNameParameter, mDAServiceItemNameParameter, computationNameParameter, serviceAmountParameter, percentageParameter, serviceBaseAmountParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchSpecialForRDMLoad_Result> usp_SearchSpecialForRDMLoad(string specialRIN, string specialTaxPayerName, string tIN, string taxOfficeName, string taxPayerTypeName, string contactName, string contactEmail, string contactNumber, string description, string notificationMethodName, string activeText)
        {
            var specialRINParameter = specialRIN != null ?
                new ObjectParameter("SpecialRIN", specialRIN) :
                new ObjectParameter("SpecialRIN", typeof(string));
    
            var specialTaxPayerNameParameter = specialTaxPayerName != null ?
                new ObjectParameter("SpecialTaxPayerName", specialTaxPayerName) :
                new ObjectParameter("SpecialTaxPayerName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchSpecialForRDMLoad_Result>("usp_SearchSpecialForRDMLoad", specialRINParameter, specialTaxPayerNameParameter, tINParameter, taxOfficeNameParameter, taxPayerTypeNameParameter, contactNameParameter, contactEmailParameter, contactNumberParameter, descriptionParameter, notificationMethodNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchCompanyForRDMLoad_Result> usp_SearchCompanyForRDMLoad(string tIN, string companyName, string companyRIN, string mobileNumber1, string mobileNumber2, string emailAddress1, string emailAddress2, string taxOfficeName, string taxPayerTypeName, string economicActivitiesName, string notificationMethodID, string activeText)
        {
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyRINParameter = companyRIN != null ?
                new ObjectParameter("CompanyRIN", companyRIN) :
                new ObjectParameter("CompanyRIN", typeof(string));
    
            var mobileNumber1Parameter = mobileNumber1 != null ?
                new ObjectParameter("MobileNumber1", mobileNumber1) :
                new ObjectParameter("MobileNumber1", typeof(string));
    
            var mobileNumber2Parameter = mobileNumber2 != null ?
                new ObjectParameter("MobileNumber2", mobileNumber2) :
                new ObjectParameter("MobileNumber2", typeof(string));
    
            var emailAddress1Parameter = emailAddress1 != null ?
                new ObjectParameter("EmailAddress1", emailAddress1) :
                new ObjectParameter("EmailAddress1", typeof(string));
    
            var emailAddress2Parameter = emailAddress2 != null ?
                new ObjectParameter("EmailAddress2", emailAddress2) :
                new ObjectParameter("EmailAddress2", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var economicActivitiesNameParameter = economicActivitiesName != null ?
                new ObjectParameter("EconomicActivitiesName", economicActivitiesName) :
                new ObjectParameter("EconomicActivitiesName", typeof(string));
    
            var notificationMethodIDParameter = notificationMethodID != null ?
                new ObjectParameter("NotificationMethodID", notificationMethodID) :
                new ObjectParameter("NotificationMethodID", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchCompanyForRDMLoad_Result>("usp_SearchCompanyForRDMLoad", tINParameter, companyNameParameter, companyRINParameter, mobileNumber1Parameter, mobileNumber2Parameter, emailAddress1Parameter, emailAddress2Parameter, taxOfficeNameParameter, taxPayerTypeNameParameter, economicActivitiesNameParameter, notificationMethodIDParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessmentRulesForRDMLoad_Result> usp_SearchAssessmentRulesForRDMLoad(string assessmentRuleCode, string profileReferenceNo, string assessmentRuleName, string ruleRunName, string paymentFrequencyName, string assessmentItemNames, string assessmentAmount, string taxYear, string settlementMethodNames, string paymentOptionName, string activeText)
        {
            var assessmentRuleCodeParameter = assessmentRuleCode != null ?
                new ObjectParameter("AssessmentRuleCode", assessmentRuleCode) :
                new ObjectParameter("AssessmentRuleCode", typeof(string));
    
            var profileReferenceNoParameter = profileReferenceNo != null ?
                new ObjectParameter("ProfileReferenceNo", profileReferenceNo) :
                new ObjectParameter("ProfileReferenceNo", typeof(string));
    
            var assessmentRuleNameParameter = assessmentRuleName != null ?
                new ObjectParameter("AssessmentRuleName", assessmentRuleName) :
                new ObjectParameter("AssessmentRuleName", typeof(string));
    
            var ruleRunNameParameter = ruleRunName != null ?
                new ObjectParameter("RuleRunName", ruleRunName) :
                new ObjectParameter("RuleRunName", typeof(string));
    
            var paymentFrequencyNameParameter = paymentFrequencyName != null ?
                new ObjectParameter("PaymentFrequencyName", paymentFrequencyName) :
                new ObjectParameter("PaymentFrequencyName", typeof(string));
    
            var assessmentItemNamesParameter = assessmentItemNames != null ?
                new ObjectParameter("AssessmentItemNames", assessmentItemNames) :
                new ObjectParameter("AssessmentItemNames", typeof(string));
    
            var assessmentAmountParameter = assessmentAmount != null ?
                new ObjectParameter("AssessmentAmount", assessmentAmount) :
                new ObjectParameter("AssessmentAmount", typeof(string));
    
            var taxYearParameter = taxYear != null ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(string));
    
            var settlementMethodNamesParameter = settlementMethodNames != null ?
                new ObjectParameter("SettlementMethodNames", settlementMethodNames) :
                new ObjectParameter("SettlementMethodNames", typeof(string));
    
            var paymentOptionNameParameter = paymentOptionName != null ?
                new ObjectParameter("PaymentOptionName", paymentOptionName) :
                new ObjectParameter("PaymentOptionName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessmentRulesForRDMLoad_Result>("usp_SearchAssessmentRulesForRDMLoad", assessmentRuleCodeParameter, profileReferenceNoParameter, assessmentRuleNameParameter, ruleRunNameParameter, paymentFrequencyNameParameter, assessmentItemNamesParameter, assessmentAmountParameter, taxYearParameter, settlementMethodNamesParameter, paymentOptionNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchMDAServiceForRDMLoad_Result> usp_SearchMDAServiceForRDMLoad(string mDAServiceCode, string mDAServiceName, string ruleRunName, string paymentFrequencyName, string mDAServiceItemNames, string serviceAmount, string taxYear, string settlementMethodNames, string paymentOptionName, string activeText)
        {
            var mDAServiceCodeParameter = mDAServiceCode != null ?
                new ObjectParameter("MDAServiceCode", mDAServiceCode) :
                new ObjectParameter("MDAServiceCode", typeof(string));
    
            var mDAServiceNameParameter = mDAServiceName != null ?
                new ObjectParameter("MDAServiceName", mDAServiceName) :
                new ObjectParameter("MDAServiceName", typeof(string));
    
            var ruleRunNameParameter = ruleRunName != null ?
                new ObjectParameter("RuleRunName", ruleRunName) :
                new ObjectParameter("RuleRunName", typeof(string));
    
            var paymentFrequencyNameParameter = paymentFrequencyName != null ?
                new ObjectParameter("PaymentFrequencyName", paymentFrequencyName) :
                new ObjectParameter("PaymentFrequencyName", typeof(string));
    
            var mDAServiceItemNamesParameter = mDAServiceItemNames != null ?
                new ObjectParameter("MDAServiceItemNames", mDAServiceItemNames) :
                new ObjectParameter("MDAServiceItemNames", typeof(string));
    
            var serviceAmountParameter = serviceAmount != null ?
                new ObjectParameter("ServiceAmount", serviceAmount) :
                new ObjectParameter("ServiceAmount", typeof(string));
    
            var taxYearParameter = taxYear != null ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(string));
    
            var settlementMethodNamesParameter = settlementMethodNames != null ?
                new ObjectParameter("SettlementMethodNames", settlementMethodNames) :
                new ObjectParameter("SettlementMethodNames", typeof(string));
    
            var paymentOptionNameParameter = paymentOptionName != null ?
                new ObjectParameter("PaymentOptionName", paymentOptionName) :
                new ObjectParameter("PaymentOptionName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchMDAServiceForRDMLoad_Result>("usp_SearchMDAServiceForRDMLoad", mDAServiceCodeParameter, mDAServiceNameParameter, ruleRunNameParameter, paymentFrequencyNameParameter, mDAServiceItemNamesParameter, serviceAmountParameter, taxYearParameter, settlementMethodNamesParameter, paymentOptionNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchProfileForRDMLoad_Result> usp_SearchProfileForRDMLoad(string profileReferenceNo, string assetTypeName, string profileSectorName, string profileSubSectorName, string profileGroup, string profileSubGroup, string profileSectorElementName, string profileSectorSubElementName, string profileAttributeName, string profileSubAttributeName, string taxPayerRoleName, string profileDescription, string taxPayerTypeName, string activeText)
        {
            var profileReferenceNoParameter = profileReferenceNo != null ?
                new ObjectParameter("ProfileReferenceNo", profileReferenceNo) :
                new ObjectParameter("ProfileReferenceNo", typeof(string));
    
            var assetTypeNameParameter = assetTypeName != null ?
                new ObjectParameter("AssetTypeName", assetTypeName) :
                new ObjectParameter("AssetTypeName", typeof(string));
    
            var profileSectorNameParameter = profileSectorName != null ?
                new ObjectParameter("ProfileSectorName", profileSectorName) :
                new ObjectParameter("ProfileSectorName", typeof(string));
    
            var profileSubSectorNameParameter = profileSubSectorName != null ?
                new ObjectParameter("ProfileSubSectorName", profileSubSectorName) :
                new ObjectParameter("ProfileSubSectorName", typeof(string));
    
            var profileGroupParameter = profileGroup != null ?
                new ObjectParameter("ProfileGroup", profileGroup) :
                new ObjectParameter("ProfileGroup", typeof(string));
    
            var profileSubGroupParameter = profileSubGroup != null ?
                new ObjectParameter("ProfileSubGroup", profileSubGroup) :
                new ObjectParameter("ProfileSubGroup", typeof(string));
    
            var profileSectorElementNameParameter = profileSectorElementName != null ?
                new ObjectParameter("ProfileSectorElementName", profileSectorElementName) :
                new ObjectParameter("ProfileSectorElementName", typeof(string));
    
            var profileSectorSubElementNameParameter = profileSectorSubElementName != null ?
                new ObjectParameter("ProfileSectorSubElementName", profileSectorSubElementName) :
                new ObjectParameter("ProfileSectorSubElementName", typeof(string));
    
            var profileAttributeNameParameter = profileAttributeName != null ?
                new ObjectParameter("ProfileAttributeName", profileAttributeName) :
                new ObjectParameter("ProfileAttributeName", typeof(string));
    
            var profileSubAttributeNameParameter = profileSubAttributeName != null ?
                new ObjectParameter("ProfileSubAttributeName", profileSubAttributeName) :
                new ObjectParameter("ProfileSubAttributeName", typeof(string));
    
            var taxPayerRoleNameParameter = taxPayerRoleName != null ?
                new ObjectParameter("TaxPayerRoleName", taxPayerRoleName) :
                new ObjectParameter("TaxPayerRoleName", typeof(string));
    
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchProfileForRDMLoad_Result>("usp_SearchProfileForRDMLoad", profileReferenceNoParameter, assetTypeNameParameter, profileSectorNameParameter, profileSubSectorNameParameter, profileGroupParameter, profileSubGroupParameter, profileSectorElementNameParameter, profileSectorSubElementNameParameter, profileAttributeNameParameter, profileSubAttributeNameParameter, taxPayerRoleNameParameter, profileDescriptionParameter, taxPayerTypeNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentDataForPT_Result> usp_GetAssessmentDataForPT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentDataForPT_Result>("usp_GetAssessmentDataForPT");
        }
    
        public virtual ObjectResult<usp_SearchBuildingForRDMLoad_Result> usp_SearchBuildingForRDMLoad(string buildingRIN, string buildingTagNumber, string buildingName, string buildingNumber, string streetName, string offStreetName, string townName, string lGAName, string wardName, string buildingTypeName, string buildingCompletionName, string buildingPurposeName, string buildingOwnershipName, string noOfUnits, string buildingSize_Length, string buildingSize_Width, string latitude, string longitude, string activeText)
        {
            var buildingRINParameter = buildingRIN != null ?
                new ObjectParameter("BuildingRIN", buildingRIN) :
                new ObjectParameter("BuildingRIN", typeof(string));
    
            var buildingTagNumberParameter = buildingTagNumber != null ?
                new ObjectParameter("BuildingTagNumber", buildingTagNumber) :
                new ObjectParameter("BuildingTagNumber", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var buildingNumberParameter = buildingNumber != null ?
                new ObjectParameter("BuildingNumber", buildingNumber) :
                new ObjectParameter("BuildingNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var offStreetNameParameter = offStreetName != null ?
                new ObjectParameter("OffStreetName", offStreetName) :
                new ObjectParameter("OffStreetName", typeof(string));
    
            var townNameParameter = townName != null ?
                new ObjectParameter("TownName", townName) :
                new ObjectParameter("TownName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var wardNameParameter = wardName != null ?
                new ObjectParameter("WardName", wardName) :
                new ObjectParameter("WardName", typeof(string));
    
            var buildingTypeNameParameter = buildingTypeName != null ?
                new ObjectParameter("BuildingTypeName", buildingTypeName) :
                new ObjectParameter("BuildingTypeName", typeof(string));
    
            var buildingCompletionNameParameter = buildingCompletionName != null ?
                new ObjectParameter("BuildingCompletionName", buildingCompletionName) :
                new ObjectParameter("BuildingCompletionName", typeof(string));
    
            var buildingPurposeNameParameter = buildingPurposeName != null ?
                new ObjectParameter("BuildingPurposeName", buildingPurposeName) :
                new ObjectParameter("BuildingPurposeName", typeof(string));
    
            var buildingOwnershipNameParameter = buildingOwnershipName != null ?
                new ObjectParameter("BuildingOwnershipName", buildingOwnershipName) :
                new ObjectParameter("BuildingOwnershipName", typeof(string));
    
            var noOfUnitsParameter = noOfUnits != null ?
                new ObjectParameter("NoOfUnits", noOfUnits) :
                new ObjectParameter("NoOfUnits", typeof(string));
    
            var buildingSize_LengthParameter = buildingSize_Length != null ?
                new ObjectParameter("BuildingSize_Length", buildingSize_Length) :
                new ObjectParameter("BuildingSize_Length", typeof(string));
    
            var buildingSize_WidthParameter = buildingSize_Width != null ?
                new ObjectParameter("BuildingSize_Width", buildingSize_Width) :
                new ObjectParameter("BuildingSize_Width", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBuildingForRDMLoad_Result>("usp_SearchBuildingForRDMLoad", buildingRINParameter, buildingTagNumberParameter, buildingNameParameter, buildingNumberParameter, streetNameParameter, offStreetNameParameter, townNameParameter, lGANameParameter, wardNameParameter, buildingTypeNameParameter, buildingCompletionNameParameter, buildingPurposeNameParameter, buildingOwnershipNameParameter, noOfUnitsParameter, buildingSize_LengthParameter, buildingSize_WidthParameter, latitudeParameter, longitudeParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchBuildingUnitForRDMLoad_Result> usp_SearchBuildingUnitForRDMLoad(string unitNumber, string unitPurposeName, string unitFunctionName, string unitOccupancyName, string sizeName, string activeText)
        {
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var unitPurposeNameParameter = unitPurposeName != null ?
                new ObjectParameter("UnitPurposeName", unitPurposeName) :
                new ObjectParameter("UnitPurposeName", typeof(string));
    
            var unitFunctionNameParameter = unitFunctionName != null ?
                new ObjectParameter("UnitFunctionName", unitFunctionName) :
                new ObjectParameter("UnitFunctionName", typeof(string));
    
            var unitOccupancyNameParameter = unitOccupancyName != null ?
                new ObjectParameter("UnitOccupancyName", unitOccupancyName) :
                new ObjectParameter("UnitOccupancyName", typeof(string));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBuildingUnitForRDMLoad_Result>("usp_SearchBuildingUnitForRDMLoad", unitNumberParameter, unitPurposeNameParameter, unitFunctionNameParameter, unitOccupancyNameParameter, sizeNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchBusinessForRDMLoad_Result> usp_SearchBusinessForRDMLoad(string businessRIN, string businessName, string businessTypeName, string lGAName, string businessCategoryName, string businessSectorName, string businessSubSectorName, string businessStructureName, string businessOperationName, string sizeName, string activeText)
        {
            var businessRINParameter = businessRIN != null ?
                new ObjectParameter("BusinessRIN", businessRIN) :
                new ObjectParameter("BusinessRIN", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessTypeNameParameter = businessTypeName != null ?
                new ObjectParameter("BusinessTypeName", businessTypeName) :
                new ObjectParameter("BusinessTypeName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var businessCategoryNameParameter = businessCategoryName != null ?
                new ObjectParameter("BusinessCategoryName", businessCategoryName) :
                new ObjectParameter("BusinessCategoryName", typeof(string));
    
            var businessSectorNameParameter = businessSectorName != null ?
                new ObjectParameter("BusinessSectorName", businessSectorName) :
                new ObjectParameter("BusinessSectorName", typeof(string));
    
            var businessSubSectorNameParameter = businessSubSectorName != null ?
                new ObjectParameter("BusinessSubSectorName", businessSubSectorName) :
                new ObjectParameter("BusinessSubSectorName", typeof(string));
    
            var businessStructureNameParameter = businessStructureName != null ?
                new ObjectParameter("BusinessStructureName", businessStructureName) :
                new ObjectParameter("BusinessStructureName", typeof(string));
    
            var businessOperationNameParameter = businessOperationName != null ?
                new ObjectParameter("BusinessOperationName", businessOperationName) :
                new ObjectParameter("BusinessOperationName", typeof(string));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBusinessForRDMLoad_Result>("usp_SearchBusinessForRDMLoad", businessRINParameter, businessNameParameter, businessTypeNameParameter, lGANameParameter, businessCategoryNameParameter, businessSectorNameParameter, businessSubSectorNameParameter, businessStructureNameParameter, businessOperationNameParameter, sizeNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchLandForRDMLoad_Result> usp_SearchLandForRDMLoad(string landRIN, string plotNumber, string streetName, string townName, string lGAName, string wardName, string landSize_Length, string landSize_Width, string c_OF_O_Ref, string landPurposeName, string landFunctionName, string landOwnershipName, string landDevelopmentName, string latitude, string longitude, string landStreetConditionName, string valueOfLand, string neighborhood, string activeText)
        {
            var landRINParameter = landRIN != null ?
                new ObjectParameter("LandRIN", landRIN) :
                new ObjectParameter("LandRIN", typeof(string));
    
            var plotNumberParameter = plotNumber != null ?
                new ObjectParameter("PlotNumber", plotNumber) :
                new ObjectParameter("PlotNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var townNameParameter = townName != null ?
                new ObjectParameter("TownName", townName) :
                new ObjectParameter("TownName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var wardNameParameter = wardName != null ?
                new ObjectParameter("WardName", wardName) :
                new ObjectParameter("WardName", typeof(string));
    
            var landSize_LengthParameter = landSize_Length != null ?
                new ObjectParameter("LandSize_Length", landSize_Length) :
                new ObjectParameter("LandSize_Length", typeof(string));
    
            var landSize_WidthParameter = landSize_Width != null ?
                new ObjectParameter("LandSize_Width", landSize_Width) :
                new ObjectParameter("LandSize_Width", typeof(string));
    
            var c_OF_O_RefParameter = c_OF_O_Ref != null ?
                new ObjectParameter("C_OF_O_Ref", c_OF_O_Ref) :
                new ObjectParameter("C_OF_O_Ref", typeof(string));
    
            var landPurposeNameParameter = landPurposeName != null ?
                new ObjectParameter("LandPurposeName", landPurposeName) :
                new ObjectParameter("LandPurposeName", typeof(string));
    
            var landFunctionNameParameter = landFunctionName != null ?
                new ObjectParameter("LandFunctionName", landFunctionName) :
                new ObjectParameter("LandFunctionName", typeof(string));
    
            var landOwnershipNameParameter = landOwnershipName != null ?
                new ObjectParameter("LandOwnershipName", landOwnershipName) :
                new ObjectParameter("LandOwnershipName", typeof(string));
    
            var landDevelopmentNameParameter = landDevelopmentName != null ?
                new ObjectParameter("LandDevelopmentName", landDevelopmentName) :
                new ObjectParameter("LandDevelopmentName", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var landStreetConditionNameParameter = landStreetConditionName != null ?
                new ObjectParameter("LandStreetConditionName", landStreetConditionName) :
                new ObjectParameter("LandStreetConditionName", typeof(string));
    
            var valueOfLandParameter = valueOfLand != null ?
                new ObjectParameter("ValueOfLand", valueOfLand) :
                new ObjectParameter("ValueOfLand", typeof(string));
    
            var neighborhoodParameter = neighborhood != null ?
                new ObjectParameter("Neighborhood", neighborhood) :
                new ObjectParameter("Neighborhood", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchLandForRDMLoad_Result>("usp_SearchLandForRDMLoad", landRINParameter, plotNumberParameter, streetNameParameter, townNameParameter, lGANameParameter, wardNameParameter, landSize_LengthParameter, landSize_WidthParameter, c_OF_O_RefParameter, landPurposeNameParameter, landFunctionNameParameter, landOwnershipNameParameter, landDevelopmentNameParameter, latitudeParameter, longitudeParameter, landStreetConditionNameParameter, valueOfLandParameter, neighborhoodParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchVehicleForRDMLoad_Result> usp_SearchVehicleForRDMLoad(string vehicleRIN, string vehicleRegNumber, string vIN, string vehicleTypeName, string vehicleSubTypeName, string lGAName, string vehiclePurposeName, string vehicleFunctionName, string vehicleOwnershipName, string vehicleDescription, string activeText)
        {
            var vehicleRINParameter = vehicleRIN != null ?
                new ObjectParameter("VehicleRIN", vehicleRIN) :
                new ObjectParameter("VehicleRIN", typeof(string));
    
            var vehicleRegNumberParameter = vehicleRegNumber != null ?
                new ObjectParameter("VehicleRegNumber", vehicleRegNumber) :
                new ObjectParameter("VehicleRegNumber", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var vehicleTypeNameParameter = vehicleTypeName != null ?
                new ObjectParameter("VehicleTypeName", vehicleTypeName) :
                new ObjectParameter("VehicleTypeName", typeof(string));
    
            var vehicleSubTypeNameParameter = vehicleSubTypeName != null ?
                new ObjectParameter("VehicleSubTypeName", vehicleSubTypeName) :
                new ObjectParameter("VehicleSubTypeName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var vehiclePurposeNameParameter = vehiclePurposeName != null ?
                new ObjectParameter("VehiclePurposeName", vehiclePurposeName) :
                new ObjectParameter("VehiclePurposeName", typeof(string));
    
            var vehicleFunctionNameParameter = vehicleFunctionName != null ?
                new ObjectParameter("VehicleFunctionName", vehicleFunctionName) :
                new ObjectParameter("VehicleFunctionName", typeof(string));
    
            var vehicleOwnershipNameParameter = vehicleOwnershipName != null ?
                new ObjectParameter("VehicleOwnershipName", vehicleOwnershipName) :
                new ObjectParameter("VehicleOwnershipName", typeof(string));
    
            var vehicleDescriptionParameter = vehicleDescription != null ?
                new ObjectParameter("VehicleDescription", vehicleDescription) :
                new ObjectParameter("VehicleDescription", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchVehicleForRDMLoad_Result>("usp_SearchVehicleForRDMLoad", vehicleRINParameter, vehicleRegNumberParameter, vINParameter, vehicleTypeNameParameter, vehicleSubTypeNameParameter, lGANameParameter, vehiclePurposeNameParameter, vehicleFunctionNameParameter, vehicleOwnershipNameParameter, vehicleDescriptionParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxPayerLiabilityStatus_Result> usp_RPT_TaxPayerLiabilityStatus(string taxPayerRIN, Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxPayerRINParameter = taxPayerRIN != null ?
                new ObjectParameter("TaxPayerRIN", taxPayerRIN) :
                new ObjectParameter("TaxPayerRIN", typeof(string));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxPayerLiabilityStatus_Result>("usp_RPT_TaxPayerLiabilityStatus", taxPayerRINParameter, taxYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxPayerLiabilityStatus_Bills_Result> usp_RPT_TaxPayerLiabilityStatus_Bills(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxPayerLiabilityStatus_Bills_Result>("usp_RPT_TaxPayerLiabilityStatus_Bills", taxPayerIDParameter, taxPayerTypeIDParameter, taxYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxPayerLiabilityStatus_Payment_Result> usp_RPT_TaxPayerLiabilityStatus_Payment(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxPayerLiabilityStatus_Payment_Result>("usp_RPT_TaxPayerLiabilityStatus_Payment", taxPayerIDParameter, taxPayerTypeIDParameter, taxYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetRevenueStreamBillByTaxOffice_Result> usp_GetRevenueStreamBillByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> revenueStreamID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRevenueStreamBillByTaxOffice_Result>("usp_GetRevenueStreamBillByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRevenueStreamBillDetailByTaxOffice_Result> usp_GetRevenueStreamBillDetailByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> revenueStreamID, Nullable<int> taxOfficeID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRevenueStreamBillDetailByTaxOffice_Result>("usp_GetRevenueStreamBillDetailByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter, revenueStreamIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPAYERevenueStreamBillByTaxOffice_Result> usp_GetPAYERevenueStreamBillByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYERevenueStreamBillByTaxOffice_Result>("usp_GetPAYERevenueStreamBillByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetPAYERevenueStreamBillDetailByTaxOffice_Result> usp_GetPAYERevenueStreamBillDetailByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taxOfficeID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYERevenueStreamBillDetailByTaxOffice_Result>("usp_GetPAYERevenueStreamBillDetailByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchCompany_Result> usp_SearchCompany(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string tIN, string companyName, string companyRIN, string mobileNumber1, string mobileNumber2, string emailAddress1, string emailAddress2, string taxOfficeName, string taxPayerTypeName, string economicActivitiesName, string notificationMethodName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyRINParameter = companyRIN != null ?
                new ObjectParameter("CompanyRIN", companyRIN) :
                new ObjectParameter("CompanyRIN", typeof(string));
    
            var mobileNumber1Parameter = mobileNumber1 != null ?
                new ObjectParameter("MobileNumber1", mobileNumber1) :
                new ObjectParameter("MobileNumber1", typeof(string));
    
            var mobileNumber2Parameter = mobileNumber2 != null ?
                new ObjectParameter("MobileNumber2", mobileNumber2) :
                new ObjectParameter("MobileNumber2", typeof(string));
    
            var emailAddress1Parameter = emailAddress1 != null ?
                new ObjectParameter("EmailAddress1", emailAddress1) :
                new ObjectParameter("EmailAddress1", typeof(string));
    
            var emailAddress2Parameter = emailAddress2 != null ?
                new ObjectParameter("EmailAddress2", emailAddress2) :
                new ObjectParameter("EmailAddress2", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var economicActivitiesNameParameter = economicActivitiesName != null ?
                new ObjectParameter("EconomicActivitiesName", economicActivitiesName) :
                new ObjectParameter("EconomicActivitiesName", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchCompany_Result>("usp_SearchCompany", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, tINParameter, companyNameParameter, companyRINParameter, mobileNumber1Parameter, mobileNumber2Parameter, emailAddress1Parameter, emailAddress2Parameter, taxOfficeNameParameter, taxPayerTypeNameParameter, economicActivitiesNameParameter, notificationMethodNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchIndividual_Result> usp_SearchIndividual(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string individualRIN, string genderName, string titleName, string firstName, string middleName, string lastName, string tIN, string mobileNumber1, string mobileNumber2, string emailAddress1, string emailAddress2, string biometricDetails, string taxOfficeName, string maritalStatusName, string nationalityName, string taxPayerTypeName, string economicActivitiesName, string notificationMethodName, string activeText, string dOB)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var individualRINParameter = individualRIN != null ?
                new ObjectParameter("IndividualRIN", individualRIN) :
                new ObjectParameter("IndividualRIN", typeof(string));
    
            var genderNameParameter = genderName != null ?
                new ObjectParameter("GenderName", genderName) :
                new ObjectParameter("GenderName", typeof(string));
    
            var titleNameParameter = titleName != null ?
                new ObjectParameter("TitleName", titleName) :
                new ObjectParameter("TitleName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var mobileNumber1Parameter = mobileNumber1 != null ?
                new ObjectParameter("MobileNumber1", mobileNumber1) :
                new ObjectParameter("MobileNumber1", typeof(string));
    
            var mobileNumber2Parameter = mobileNumber2 != null ?
                new ObjectParameter("MobileNumber2", mobileNumber2) :
                new ObjectParameter("MobileNumber2", typeof(string));
    
            var emailAddress1Parameter = emailAddress1 != null ?
                new ObjectParameter("EmailAddress1", emailAddress1) :
                new ObjectParameter("EmailAddress1", typeof(string));
    
            var emailAddress2Parameter = emailAddress2 != null ?
                new ObjectParameter("EmailAddress2", emailAddress2) :
                new ObjectParameter("EmailAddress2", typeof(string));
    
            var biometricDetailsParameter = biometricDetails != null ?
                new ObjectParameter("BiometricDetails", biometricDetails) :
                new ObjectParameter("BiometricDetails", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var maritalStatusNameParameter = maritalStatusName != null ?
                new ObjectParameter("MaritalStatusName", maritalStatusName) :
                new ObjectParameter("MaritalStatusName", typeof(string));
    
            var nationalityNameParameter = nationalityName != null ?
                new ObjectParameter("NationalityName", nationalityName) :
                new ObjectParameter("NationalityName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var economicActivitiesNameParameter = economicActivitiesName != null ?
                new ObjectParameter("EconomicActivitiesName", economicActivitiesName) :
                new ObjectParameter("EconomicActivitiesName", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            var dOBParameter = dOB != null ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchIndividual_Result>("usp_SearchIndividual", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, individualRINParameter, genderNameParameter, titleNameParameter, firstNameParameter, middleNameParameter, lastNameParameter, tINParameter, mobileNumber1Parameter, mobileNumber2Parameter, emailAddress1Parameter, emailAddress2Parameter, biometricDetailsParameter, taxOfficeNameParameter, maritalStatusNameParameter, nationalityNameParameter, taxPayerTypeNameParameter, economicActivitiesNameParameter, notificationMethodNameParameter, activeTextParameter, dOBParameter);
        }
    
        public virtual ObjectResult<usp_SearchGovernment_Result> usp_SearchGovernment(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string governmentRIN, string governmentName, string tIN, string governmentTypeName, string taxOfficeName, string taxPayerTypeName, string contactName, string contactEmail, string contactNumber, string notificationMethodName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var governmentRINParameter = governmentRIN != null ?
                new ObjectParameter("GovernmentRIN", governmentRIN) :
                new ObjectParameter("GovernmentRIN", typeof(string));
    
            var governmentNameParameter = governmentName != null ?
                new ObjectParameter("GovernmentName", governmentName) :
                new ObjectParameter("GovernmentName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var governmentTypeNameParameter = governmentTypeName != null ?
                new ObjectParameter("GovernmentTypeName", governmentTypeName) :
                new ObjectParameter("GovernmentTypeName", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchGovernment_Result>("usp_SearchGovernment", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, governmentRINParameter, governmentNameParameter, tINParameter, governmentTypeNameParameter, taxOfficeNameParameter, taxPayerTypeNameParameter, contactNameParameter, contactEmailParameter, contactNumberParameter, notificationMethodNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchSpecial_Result> usp_SearchSpecial(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string specialRIN, string specialTaxPayerName, string tIN, string taxOfficeName, string taxPayerTypeName, string contactName, string contactEmail, string contactNumber, string description, string notificationMethodName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var specialRINParameter = specialRIN != null ?
                new ObjectParameter("SpecialRIN", specialRIN) :
                new ObjectParameter("SpecialRIN", typeof(string));
    
            var specialTaxPayerNameParameter = specialTaxPayerName != null ?
                new ObjectParameter("SpecialTaxPayerName", specialTaxPayerName) :
                new ObjectParameter("SpecialTaxPayerName", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchSpecial_Result>("usp_SearchSpecial", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, specialRINParameter, specialTaxPayerNameParameter, tINParameter, taxOfficeNameParameter, taxPayerTypeNameParameter, contactNameParameter, contactEmailParameter, contactNumberParameter, descriptionParameter, notificationMethodNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchBuilding_Result> usp_SearchBuilding(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string buildingRIN, string buildingTagNumber, string buildingName, string buildingNumber, string streetName, string offStreetName, string townName, string lGAName, string wardName, string buildingTypeName, string buildingCompletionName, string buildingPurposeName, string buildingOwnershipName, string noOfUnits, string buildingSize_Length, string buildingSize_Width, string latitude, string longitude, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var buildingRINParameter = buildingRIN != null ?
                new ObjectParameter("BuildingRIN", buildingRIN) :
                new ObjectParameter("BuildingRIN", typeof(string));
    
            var buildingTagNumberParameter = buildingTagNumber != null ?
                new ObjectParameter("BuildingTagNumber", buildingTagNumber) :
                new ObjectParameter("BuildingTagNumber", typeof(string));
    
            var buildingNameParameter = buildingName != null ?
                new ObjectParameter("BuildingName", buildingName) :
                new ObjectParameter("BuildingName", typeof(string));
    
            var buildingNumberParameter = buildingNumber != null ?
                new ObjectParameter("BuildingNumber", buildingNumber) :
                new ObjectParameter("BuildingNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var offStreetNameParameter = offStreetName != null ?
                new ObjectParameter("OffStreetName", offStreetName) :
                new ObjectParameter("OffStreetName", typeof(string));
    
            var townNameParameter = townName != null ?
                new ObjectParameter("TownName", townName) :
                new ObjectParameter("TownName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var wardNameParameter = wardName != null ?
                new ObjectParameter("WardName", wardName) :
                new ObjectParameter("WardName", typeof(string));
    
            var buildingTypeNameParameter = buildingTypeName != null ?
                new ObjectParameter("BuildingTypeName", buildingTypeName) :
                new ObjectParameter("BuildingTypeName", typeof(string));
    
            var buildingCompletionNameParameter = buildingCompletionName != null ?
                new ObjectParameter("BuildingCompletionName", buildingCompletionName) :
                new ObjectParameter("BuildingCompletionName", typeof(string));
    
            var buildingPurposeNameParameter = buildingPurposeName != null ?
                new ObjectParameter("BuildingPurposeName", buildingPurposeName) :
                new ObjectParameter("BuildingPurposeName", typeof(string));
    
            var buildingOwnershipNameParameter = buildingOwnershipName != null ?
                new ObjectParameter("BuildingOwnershipName", buildingOwnershipName) :
                new ObjectParameter("BuildingOwnershipName", typeof(string));
    
            var noOfUnitsParameter = noOfUnits != null ?
                new ObjectParameter("NoOfUnits", noOfUnits) :
                new ObjectParameter("NoOfUnits", typeof(string));
    
            var buildingSize_LengthParameter = buildingSize_Length != null ?
                new ObjectParameter("BuildingSize_Length", buildingSize_Length) :
                new ObjectParameter("BuildingSize_Length", typeof(string));
    
            var buildingSize_WidthParameter = buildingSize_Width != null ?
                new ObjectParameter("BuildingSize_Width", buildingSize_Width) :
                new ObjectParameter("BuildingSize_Width", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBuilding_Result>("usp_SearchBuilding", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, buildingRINParameter, buildingTagNumberParameter, buildingNameParameter, buildingNumberParameter, streetNameParameter, offStreetNameParameter, townNameParameter, lGANameParameter, wardNameParameter, buildingTypeNameParameter, buildingCompletionNameParameter, buildingPurposeNameParameter, buildingOwnershipNameParameter, noOfUnitsParameter, buildingSize_LengthParameter, buildingSize_WidthParameter, latitudeParameter, longitudeParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchBusiness_Result> usp_SearchBusiness(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string businessRIN, string businessName, string businessTypeName, string lGAName, string businessCategoryName, string businessSectorName, string businessSubSectorName, string businessStructureName, string businessOperationName, string sizeName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var businessRINParameter = businessRIN != null ?
                new ObjectParameter("BusinessRIN", businessRIN) :
                new ObjectParameter("BusinessRIN", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessTypeNameParameter = businessTypeName != null ?
                new ObjectParameter("BusinessTypeName", businessTypeName) :
                new ObjectParameter("BusinessTypeName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var businessCategoryNameParameter = businessCategoryName != null ?
                new ObjectParameter("BusinessCategoryName", businessCategoryName) :
                new ObjectParameter("BusinessCategoryName", typeof(string));
    
            var businessSectorNameParameter = businessSectorName != null ?
                new ObjectParameter("BusinessSectorName", businessSectorName) :
                new ObjectParameter("BusinessSectorName", typeof(string));
    
            var businessSubSectorNameParameter = businessSubSectorName != null ?
                new ObjectParameter("BusinessSubSectorName", businessSubSectorName) :
                new ObjectParameter("BusinessSubSectorName", typeof(string));
    
            var businessStructureNameParameter = businessStructureName != null ?
                new ObjectParameter("BusinessStructureName", businessStructureName) :
                new ObjectParameter("BusinessStructureName", typeof(string));
    
            var businessOperationNameParameter = businessOperationName != null ?
                new ObjectParameter("BusinessOperationName", businessOperationName) :
                new ObjectParameter("BusinessOperationName", typeof(string));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBusiness_Result>("usp_SearchBusiness", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, businessRINParameter, businessNameParameter, businessTypeNameParameter, lGANameParameter, businessCategoryNameParameter, businessSectorNameParameter, businessSubSectorNameParameter, businessStructureNameParameter, businessOperationNameParameter, sizeNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchLand_Result> usp_SearchLand(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string landRIN, string plotNumber, string streetName, string townName, string lGAName, string wardName, string landSize_Length, string landSize_Width, string c_OF_O_Ref, string landPurposeName, string landFunctionName, string landOwnershipName, string landDevelopmentName, string latitude, string longitude, string landStreetConditionName, string valueOfLand, string neighborhood, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var landRINParameter = landRIN != null ?
                new ObjectParameter("LandRIN", landRIN) :
                new ObjectParameter("LandRIN", typeof(string));
    
            var plotNumberParameter = plotNumber != null ?
                new ObjectParameter("PlotNumber", plotNumber) :
                new ObjectParameter("PlotNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var townNameParameter = townName != null ?
                new ObjectParameter("TownName", townName) :
                new ObjectParameter("TownName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var wardNameParameter = wardName != null ?
                new ObjectParameter("WardName", wardName) :
                new ObjectParameter("WardName", typeof(string));
    
            var landSize_LengthParameter = landSize_Length != null ?
                new ObjectParameter("LandSize_Length", landSize_Length) :
                new ObjectParameter("LandSize_Length", typeof(string));
    
            var landSize_WidthParameter = landSize_Width != null ?
                new ObjectParameter("LandSize_Width", landSize_Width) :
                new ObjectParameter("LandSize_Width", typeof(string));
    
            var c_OF_O_RefParameter = c_OF_O_Ref != null ?
                new ObjectParameter("C_OF_O_Ref", c_OF_O_Ref) :
                new ObjectParameter("C_OF_O_Ref", typeof(string));
    
            var landPurposeNameParameter = landPurposeName != null ?
                new ObjectParameter("LandPurposeName", landPurposeName) :
                new ObjectParameter("LandPurposeName", typeof(string));
    
            var landFunctionNameParameter = landFunctionName != null ?
                new ObjectParameter("LandFunctionName", landFunctionName) :
                new ObjectParameter("LandFunctionName", typeof(string));
    
            var landOwnershipNameParameter = landOwnershipName != null ?
                new ObjectParameter("LandOwnershipName", landOwnershipName) :
                new ObjectParameter("LandOwnershipName", typeof(string));
    
            var landDevelopmentNameParameter = landDevelopmentName != null ?
                new ObjectParameter("LandDevelopmentName", landDevelopmentName) :
                new ObjectParameter("LandDevelopmentName", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var landStreetConditionNameParameter = landStreetConditionName != null ?
                new ObjectParameter("LandStreetConditionName", landStreetConditionName) :
                new ObjectParameter("LandStreetConditionName", typeof(string));
    
            var valueOfLandParameter = valueOfLand != null ?
                new ObjectParameter("ValueOfLand", valueOfLand) :
                new ObjectParameter("ValueOfLand", typeof(string));
    
            var neighborhoodParameter = neighborhood != null ?
                new ObjectParameter("Neighborhood", neighborhood) :
                new ObjectParameter("Neighborhood", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchLand_Result>("usp_SearchLand", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, landRINParameter, plotNumberParameter, streetNameParameter, townNameParameter, lGANameParameter, wardNameParameter, landSize_LengthParameter, landSize_WidthParameter, c_OF_O_RefParameter, landPurposeNameParameter, landFunctionNameParameter, landOwnershipNameParameter, landDevelopmentNameParameter, latitudeParameter, longitudeParameter, landStreetConditionNameParameter, valueOfLandParameter, neighborhoodParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchVehicle_Result> usp_SearchVehicle(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string vehicleRIN, string vehicleRegNumber, string vIN, string vehicleTypeName, string vehicleSubTypeName, string lGAName, string vehiclePurposeName, string vehicleFunctionName, string vehicleOwnershipName, string vehicleDescription, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var vehicleRINParameter = vehicleRIN != null ?
                new ObjectParameter("VehicleRIN", vehicleRIN) :
                new ObjectParameter("VehicleRIN", typeof(string));
    
            var vehicleRegNumberParameter = vehicleRegNumber != null ?
                new ObjectParameter("VehicleRegNumber", vehicleRegNumber) :
                new ObjectParameter("VehicleRegNumber", typeof(string));
    
            var vINParameter = vIN != null ?
                new ObjectParameter("VIN", vIN) :
                new ObjectParameter("VIN", typeof(string));
    
            var vehicleTypeNameParameter = vehicleTypeName != null ?
                new ObjectParameter("VehicleTypeName", vehicleTypeName) :
                new ObjectParameter("VehicleTypeName", typeof(string));
    
            var vehicleSubTypeNameParameter = vehicleSubTypeName != null ?
                new ObjectParameter("VehicleSubTypeName", vehicleSubTypeName) :
                new ObjectParameter("VehicleSubTypeName", typeof(string));
    
            var lGANameParameter = lGAName != null ?
                new ObjectParameter("LGAName", lGAName) :
                new ObjectParameter("LGAName", typeof(string));
    
            var vehiclePurposeNameParameter = vehiclePurposeName != null ?
                new ObjectParameter("VehiclePurposeName", vehiclePurposeName) :
                new ObjectParameter("VehiclePurposeName", typeof(string));
    
            var vehicleFunctionNameParameter = vehicleFunctionName != null ?
                new ObjectParameter("VehicleFunctionName", vehicleFunctionName) :
                new ObjectParameter("VehicleFunctionName", typeof(string));
    
            var vehicleOwnershipNameParameter = vehicleOwnershipName != null ?
                new ObjectParameter("VehicleOwnershipName", vehicleOwnershipName) :
                new ObjectParameter("VehicleOwnershipName", typeof(string));
    
            var vehicleDescriptionParameter = vehicleDescription != null ?
                new ObjectParameter("VehicleDescription", vehicleDescription) :
                new ObjectParameter("VehicleDescription", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchVehicle_Result>("usp_SearchVehicle", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, vehicleRINParameter, vehicleRegNumberParameter, vINParameter, vehicleTypeNameParameter, vehicleSubTypeNameParameter, lGANameParameter, vehiclePurposeNameParameter, vehicleFunctionNameParameter, vehicleOwnershipNameParameter, vehicleDescriptionParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchBuildingUnit_Result> usp_SearchBuildingUnit(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string unitNumber, string unitPurposeName, string unitFunctionName, string unitOccupancyName, string sizeName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var unitNumberParameter = unitNumber != null ?
                new ObjectParameter("UnitNumber", unitNumber) :
                new ObjectParameter("UnitNumber", typeof(string));
    
            var unitPurposeNameParameter = unitPurposeName != null ?
                new ObjectParameter("UnitPurposeName", unitPurposeName) :
                new ObjectParameter("UnitPurposeName", typeof(string));
    
            var unitFunctionNameParameter = unitFunctionName != null ?
                new ObjectParameter("UnitFunctionName", unitFunctionName) :
                new ObjectParameter("UnitFunctionName", typeof(string));
    
            var unitOccupancyNameParameter = unitOccupancyName != null ?
                new ObjectParameter("UnitOccupancyName", unitOccupancyName) :
                new ObjectParameter("UnitOccupancyName", typeof(string));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBuildingUnit_Result>("usp_SearchBuildingUnit", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, unitNumberParameter, unitPurposeNameParameter, unitFunctionNameParameter, unitOccupancyNameParameter, sizeNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessmentItem_Result> usp_SearchAssessmentItem(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string assessmentItemReferenceNo, string assetTypeName, string assessmentGroupName, string assessmentSubGroupName, string revenueStreamName, string revenueSubStreamName, string assessmentItemCategoryName, string assessmentItemSubCategoryName, string agencyName, string assessmentItemName, string computationName, string taxAmount, string percentage, string taxBaseAmount, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var assessmentItemReferenceNoParameter = assessmentItemReferenceNo != null ?
                new ObjectParameter("AssessmentItemReferenceNo", assessmentItemReferenceNo) :
                new ObjectParameter("AssessmentItemReferenceNo", typeof(string));
    
            var assetTypeNameParameter = assetTypeName != null ?
                new ObjectParameter("AssetTypeName", assetTypeName) :
                new ObjectParameter("AssetTypeName", typeof(string));
    
            var assessmentGroupNameParameter = assessmentGroupName != null ?
                new ObjectParameter("AssessmentGroupName", assessmentGroupName) :
                new ObjectParameter("AssessmentGroupName", typeof(string));
    
            var assessmentSubGroupNameParameter = assessmentSubGroupName != null ?
                new ObjectParameter("AssessmentSubGroupName", assessmentSubGroupName) :
                new ObjectParameter("AssessmentSubGroupName", typeof(string));
    
            var revenueStreamNameParameter = revenueStreamName != null ?
                new ObjectParameter("RevenueStreamName", revenueStreamName) :
                new ObjectParameter("RevenueStreamName", typeof(string));
    
            var revenueSubStreamNameParameter = revenueSubStreamName != null ?
                new ObjectParameter("RevenueSubStreamName", revenueSubStreamName) :
                new ObjectParameter("RevenueSubStreamName", typeof(string));
    
            var assessmentItemCategoryNameParameter = assessmentItemCategoryName != null ?
                new ObjectParameter("AssessmentItemCategoryName", assessmentItemCategoryName) :
                new ObjectParameter("AssessmentItemCategoryName", typeof(string));
    
            var assessmentItemSubCategoryNameParameter = assessmentItemSubCategoryName != null ?
                new ObjectParameter("AssessmentItemSubCategoryName", assessmentItemSubCategoryName) :
                new ObjectParameter("AssessmentItemSubCategoryName", typeof(string));
    
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var assessmentItemNameParameter = assessmentItemName != null ?
                new ObjectParameter("AssessmentItemName", assessmentItemName) :
                new ObjectParameter("AssessmentItemName", typeof(string));
    
            var computationNameParameter = computationName != null ?
                new ObjectParameter("ComputationName", computationName) :
                new ObjectParameter("ComputationName", typeof(string));
    
            var taxAmountParameter = taxAmount != null ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(string));
    
            var percentageParameter = percentage != null ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(string));
    
            var taxBaseAmountParameter = taxBaseAmount != null ?
                new ObjectParameter("TaxBaseAmount", taxBaseAmount) :
                new ObjectParameter("TaxBaseAmount", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessmentItem_Result>("usp_SearchAssessmentItem", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, assessmentItemReferenceNoParameter, assetTypeNameParameter, assessmentGroupNameParameter, assessmentSubGroupNameParameter, revenueStreamNameParameter, revenueSubStreamNameParameter, assessmentItemCategoryNameParameter, assessmentItemSubCategoryNameParameter, agencyNameParameter, assessmentItemNameParameter, computationNameParameter, taxAmountParameter, percentageParameter, taxBaseAmountParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessmentRules_Result> usp_SearchAssessmentRules(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string assessmentRuleCode, string profileReferenceNo, string assessmentRuleName, string ruleRunName, string paymentFrequencyName, string assessmentItemNames, string assessmentAmount, string taxYear, string settlementMethodNames, string paymentOptionName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var assessmentRuleCodeParameter = assessmentRuleCode != null ?
                new ObjectParameter("AssessmentRuleCode", assessmentRuleCode) :
                new ObjectParameter("AssessmentRuleCode", typeof(string));
    
            var profileReferenceNoParameter = profileReferenceNo != null ?
                new ObjectParameter("ProfileReferenceNo", profileReferenceNo) :
                new ObjectParameter("ProfileReferenceNo", typeof(string));
    
            var assessmentRuleNameParameter = assessmentRuleName != null ?
                new ObjectParameter("AssessmentRuleName", assessmentRuleName) :
                new ObjectParameter("AssessmentRuleName", typeof(string));
    
            var ruleRunNameParameter = ruleRunName != null ?
                new ObjectParameter("RuleRunName", ruleRunName) :
                new ObjectParameter("RuleRunName", typeof(string));
    
            var paymentFrequencyNameParameter = paymentFrequencyName != null ?
                new ObjectParameter("PaymentFrequencyName", paymentFrequencyName) :
                new ObjectParameter("PaymentFrequencyName", typeof(string));
    
            var assessmentItemNamesParameter = assessmentItemNames != null ?
                new ObjectParameter("AssessmentItemNames", assessmentItemNames) :
                new ObjectParameter("AssessmentItemNames", typeof(string));
    
            var assessmentAmountParameter = assessmentAmount != null ?
                new ObjectParameter("AssessmentAmount", assessmentAmount) :
                new ObjectParameter("AssessmentAmount", typeof(string));
    
            var taxYearParameter = taxYear != null ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(string));
    
            var settlementMethodNamesParameter = settlementMethodNames != null ?
                new ObjectParameter("SettlementMethodNames", settlementMethodNames) :
                new ObjectParameter("SettlementMethodNames", typeof(string));
    
            var paymentOptionNameParameter = paymentOptionName != null ?
                new ObjectParameter("PaymentOptionName", paymentOptionName) :
                new ObjectParameter("PaymentOptionName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessmentRules_Result>("usp_SearchAssessmentRules", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, assessmentRuleCodeParameter, profileReferenceNoParameter, assessmentRuleNameParameter, ruleRunNameParameter, paymentFrequencyNameParameter, assessmentItemNamesParameter, assessmentAmountParameter, taxYearParameter, settlementMethodNamesParameter, paymentOptionNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchMDAService_Result> usp_SearchMDAService(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string mDAServiceCode, string mDAServiceName, string ruleRunName, string paymentFrequencyName, string mDAServiceItemNames, string serviceAmount, string taxYear, string settlementMethodNames, string paymentOptionName, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var mDAServiceCodeParameter = mDAServiceCode != null ?
                new ObjectParameter("MDAServiceCode", mDAServiceCode) :
                new ObjectParameter("MDAServiceCode", typeof(string));
    
            var mDAServiceNameParameter = mDAServiceName != null ?
                new ObjectParameter("MDAServiceName", mDAServiceName) :
                new ObjectParameter("MDAServiceName", typeof(string));
    
            var ruleRunNameParameter = ruleRunName != null ?
                new ObjectParameter("RuleRunName", ruleRunName) :
                new ObjectParameter("RuleRunName", typeof(string));
    
            var paymentFrequencyNameParameter = paymentFrequencyName != null ?
                new ObjectParameter("PaymentFrequencyName", paymentFrequencyName) :
                new ObjectParameter("PaymentFrequencyName", typeof(string));
    
            var mDAServiceItemNamesParameter = mDAServiceItemNames != null ?
                new ObjectParameter("MDAServiceItemNames", mDAServiceItemNames) :
                new ObjectParameter("MDAServiceItemNames", typeof(string));
    
            var serviceAmountParameter = serviceAmount != null ?
                new ObjectParameter("ServiceAmount", serviceAmount) :
                new ObjectParameter("ServiceAmount", typeof(string));
    
            var taxYearParameter = taxYear != null ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(string));
    
            var settlementMethodNamesParameter = settlementMethodNames != null ?
                new ObjectParameter("SettlementMethodNames", settlementMethodNames) :
                new ObjectParameter("SettlementMethodNames", typeof(string));
    
            var paymentOptionNameParameter = paymentOptionName != null ?
                new ObjectParameter("PaymentOptionName", paymentOptionName) :
                new ObjectParameter("PaymentOptionName", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchMDAService_Result>("usp_SearchMDAService", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, mDAServiceCodeParameter, mDAServiceNameParameter, ruleRunNameParameter, paymentFrequencyNameParameter, mDAServiceItemNamesParameter, serviceAmountParameter, taxYearParameter, settlementMethodNamesParameter, paymentOptionNameParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchMDAServiceItem_Result> usp_SearchMDAServiceItem(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string mDAServiceItemReferenceNo, string revenueStreamName, string revenueSubStreamName, string assessmentItemCategoryName, string assessmentItemSubCategoryName, string agencyName, string mDAServiceItemName, string computationName, string serviceAmount, string percentage, string serviceBaseAmount, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var mDAServiceItemReferenceNoParameter = mDAServiceItemReferenceNo != null ?
                new ObjectParameter("MDAServiceItemReferenceNo", mDAServiceItemReferenceNo) :
                new ObjectParameter("MDAServiceItemReferenceNo", typeof(string));
    
            var revenueStreamNameParameter = revenueStreamName != null ?
                new ObjectParameter("RevenueStreamName", revenueStreamName) :
                new ObjectParameter("RevenueStreamName", typeof(string));
    
            var revenueSubStreamNameParameter = revenueSubStreamName != null ?
                new ObjectParameter("RevenueSubStreamName", revenueSubStreamName) :
                new ObjectParameter("RevenueSubStreamName", typeof(string));
    
            var assessmentItemCategoryNameParameter = assessmentItemCategoryName != null ?
                new ObjectParameter("AssessmentItemCategoryName", assessmentItemCategoryName) :
                new ObjectParameter("AssessmentItemCategoryName", typeof(string));
    
            var assessmentItemSubCategoryNameParameter = assessmentItemSubCategoryName != null ?
                new ObjectParameter("AssessmentItemSubCategoryName", assessmentItemSubCategoryName) :
                new ObjectParameter("AssessmentItemSubCategoryName", typeof(string));
    
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var mDAServiceItemNameParameter = mDAServiceItemName != null ?
                new ObjectParameter("MDAServiceItemName", mDAServiceItemName) :
                new ObjectParameter("MDAServiceItemName", typeof(string));
    
            var computationNameParameter = computationName != null ?
                new ObjectParameter("ComputationName", computationName) :
                new ObjectParameter("ComputationName", typeof(string));
    
            var serviceAmountParameter = serviceAmount != null ?
                new ObjectParameter("ServiceAmount", serviceAmount) :
                new ObjectParameter("ServiceAmount", typeof(string));
    
            var percentageParameter = percentage != null ?
                new ObjectParameter("Percentage", percentage) :
                new ObjectParameter("Percentage", typeof(string));
    
            var serviceBaseAmountParameter = serviceBaseAmount != null ?
                new ObjectParameter("ServiceBaseAmount", serviceBaseAmount) :
                new ObjectParameter("ServiceBaseAmount", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchMDAServiceItem_Result>("usp_SearchMDAServiceItem", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, mDAServiceItemReferenceNoParameter, revenueStreamNameParameter, revenueSubStreamNameParameter, assessmentItemCategoryNameParameter, assessmentItemSubCategoryNameParameter, agencyNameParameter, mDAServiceItemNameParameter, computationNameParameter, serviceAmountParameter, percentageParameter, serviceBaseAmountParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessment_Result> usp_SearchAssessment(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string assessmentRefNo, string assessmentDate, string taxPayerTypeName, string taxPayerRIN, string taxPayerName, string assessmentAmount, string settlementDueDate, string settlementDate, string settlementStatus, string assessmentNotes, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var assessmentRefNoParameter = assessmentRefNo != null ?
                new ObjectParameter("AssessmentRefNo", assessmentRefNo) :
                new ObjectParameter("AssessmentRefNo", typeof(string));
    
            var assessmentDateParameter = assessmentDate != null ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var taxPayerRINParameter = taxPayerRIN != null ?
                new ObjectParameter("TaxPayerRIN", taxPayerRIN) :
                new ObjectParameter("TaxPayerRIN", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var assessmentAmountParameter = assessmentAmount != null ?
                new ObjectParameter("AssessmentAmount", assessmentAmount) :
                new ObjectParameter("AssessmentAmount", typeof(string));
    
            var settlementDueDateParameter = settlementDueDate != null ?
                new ObjectParameter("SettlementDueDate", settlementDueDate) :
                new ObjectParameter("SettlementDueDate", typeof(string));
    
            var settlementDateParameter = settlementDate != null ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(string));
    
            var settlementStatusParameter = settlementStatus != null ?
                new ObjectParameter("SettlementStatus", settlementStatus) :
                new ObjectParameter("SettlementStatus", typeof(string));
    
            var assessmentNotesParameter = assessmentNotes != null ?
                new ObjectParameter("AssessmentNotes", assessmentNotes) :
                new ObjectParameter("AssessmentNotes", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessment_Result>("usp_SearchAssessment", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, assessmentRefNoParameter, assessmentDateParameter, taxPayerTypeNameParameter, taxPayerRINParameter, taxPayerNameParameter, assessmentAmountParameter, settlementDueDateParameter, settlementDateParameter, settlementStatusParameter, assessmentNotesParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchServiceBill_Result> usp_SearchServiceBill(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string serviceBillRefNo, string serviceBillDate, string taxPayerTypeName, string taxPayerRIN, string taxPayerName, string serviceBillAmount, string settlementDueDate, string settlementDate, string settlementStatus, string serviceBillNotes, string activeText)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var serviceBillRefNoParameter = serviceBillRefNo != null ?
                new ObjectParameter("ServiceBillRefNo", serviceBillRefNo) :
                new ObjectParameter("ServiceBillRefNo", typeof(string));
    
            var serviceBillDateParameter = serviceBillDate != null ?
                new ObjectParameter("ServiceBillDate", serviceBillDate) :
                new ObjectParameter("ServiceBillDate", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var taxPayerRINParameter = taxPayerRIN != null ?
                new ObjectParameter("TaxPayerRIN", taxPayerRIN) :
                new ObjectParameter("TaxPayerRIN", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var serviceBillAmountParameter = serviceBillAmount != null ?
                new ObjectParameter("ServiceBillAmount", serviceBillAmount) :
                new ObjectParameter("ServiceBillAmount", typeof(string));
    
            var settlementDueDateParameter = settlementDueDate != null ?
                new ObjectParameter("SettlementDueDate", settlementDueDate) :
                new ObjectParameter("SettlementDueDate", typeof(string));
    
            var settlementDateParameter = settlementDate != null ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(string));
    
            var settlementStatusParameter = settlementStatus != null ?
                new ObjectParameter("SettlementStatus", settlementStatus) :
                new ObjectParameter("SettlementStatus", typeof(string));
    
            var serviceBillNotesParameter = serviceBillNotes != null ?
                new ObjectParameter("ServiceBillNotes", serviceBillNotes) :
                new ObjectParameter("ServiceBillNotes", typeof(string));
    
            var activeTextParameter = activeText != null ?
                new ObjectParameter("ActiveText", activeText) :
                new ObjectParameter("ActiveText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchServiceBill_Result>("usp_SearchServiceBill", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, serviceBillRefNoParameter, serviceBillDateParameter, taxPayerTypeNameParameter, taxPayerRINParameter, taxPayerNameParameter, serviceBillAmountParameter, settlementDueDateParameter, settlementDateParameter, settlementStatusParameter, serviceBillNotesParameter, activeTextParameter);
        }
    
        public virtual ObjectResult<usp_SearchNotification_Result> usp_SearchNotification(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string notificationRefNo, string notificationDate, string notificationMethodName, string notificationTypeName, string eventRefNo, string taxPayerTypeName, string taxPayerName, string statusName)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var notificationRefNoParameter = notificationRefNo != null ?
                new ObjectParameter("NotificationRefNo", notificationRefNo) :
                new ObjectParameter("NotificationRefNo", typeof(string));
    
            var notificationDateParameter = notificationDate != null ?
                new ObjectParameter("NotificationDate", notificationDate) :
                new ObjectParameter("NotificationDate", typeof(string));
    
            var notificationMethodNameParameter = notificationMethodName != null ?
                new ObjectParameter("NotificationMethodName", notificationMethodName) :
                new ObjectParameter("NotificationMethodName", typeof(string));
    
            var notificationTypeNameParameter = notificationTypeName != null ?
                new ObjectParameter("NotificationTypeName", notificationTypeName) :
                new ObjectParameter("NotificationTypeName", typeof(string));
    
            var eventRefNoParameter = eventRefNo != null ?
                new ObjectParameter("EventRefNo", eventRefNo) :
                new ObjectParameter("EventRefNo", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var statusNameParameter = statusName != null ?
                new ObjectParameter("StatusName", statusName) :
                new ObjectParameter("StatusName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchNotification_Result>("usp_SearchNotification", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, notificationRefNoParameter, notificationDateParameter, notificationMethodNameParameter, notificationTypeNameParameter, eventRefNoParameter, taxPayerTypeNameParameter, taxPayerNameParameter, statusNameParameter);
        }
    
        public virtual ObjectResult<usp_SearchSettlement_Result> usp_SearchSettlement(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string settlementRefNo, string settlementDate, string billRefNo, string billAmount, string settlementAmount, string settlementMethodName, string settlementStatus, string settlementNotes)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var settlementRefNoParameter = settlementRefNo != null ?
                new ObjectParameter("SettlementRefNo", settlementRefNo) :
                new ObjectParameter("SettlementRefNo", typeof(string));
    
            var settlementDateParameter = settlementDate != null ?
                new ObjectParameter("SettlementDate", settlementDate) :
                new ObjectParameter("SettlementDate", typeof(string));
    
            var billRefNoParameter = billRefNo != null ?
                new ObjectParameter("BillRefNo", billRefNo) :
                new ObjectParameter("BillRefNo", typeof(string));
    
            var billAmountParameter = billAmount != null ?
                new ObjectParameter("BillAmount", billAmount) :
                new ObjectParameter("BillAmount", typeof(string));
    
            var settlementAmountParameter = settlementAmount != null ?
                new ObjectParameter("SettlementAmount", settlementAmount) :
                new ObjectParameter("SettlementAmount", typeof(string));
    
            var settlementMethodNameParameter = settlementMethodName != null ?
                new ObjectParameter("SettlementMethodName", settlementMethodName) :
                new ObjectParameter("SettlementMethodName", typeof(string));
    
            var settlementStatusParameter = settlementStatus != null ?
                new ObjectParameter("SettlementStatus", settlementStatus) :
                new ObjectParameter("SettlementStatus", typeof(string));
    
            var settlementNotesParameter = settlementNotes != null ?
                new ObjectParameter("SettlementNotes", settlementNotes) :
                new ObjectParameter("SettlementNotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchSettlement_Result>("usp_SearchSettlement", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, settlementRefNoParameter, settlementDateParameter, billRefNoParameter, billAmountParameter, settlementAmountParameter, settlementMethodNameParameter, settlementStatusParameter, settlementNotesParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetAllocatedTaxPayerList_Result> usp_RPT_GetAllocatedTaxPayerList(Nullable<int> taxOfficeID, Nullable<int> taxOfficerID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetAllocatedTaxPayerList_Result>("usp_RPT_GetAllocatedTaxPayerList", taxOfficeIDParameter, taxOfficerIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetUnallocatedTaxPayerList_Result> usp_RPT_GetUnallocatedTaxPayerList(Nullable<int> taxOfficeID, Nullable<int> taxPayerTypeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetUnallocatedTaxPayerList_Result>("usp_RPT_GetUnallocatedTaxPayerList", taxOfficeIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetTaxPayerStatusManager_Result> usp_RPT_GetTaxPayerStatusManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetTaxPayerStatusManager_Result>("usp_RPT_GetTaxPayerStatusManager");
        }
    
        public virtual ObjectResult<usp_RPT_GetTaxPayerStatusManager_TaxPayerList_Result> usp_RPT_GetTaxPayerStatusManager_TaxPayerList(Nullable<int> taxOfficeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetTaxPayerStatusManager_TaxPayerList_Result>("usp_RPT_GetTaxPayerStatusManager_TaxPayerList", taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerReviewNotes_Result> usp_GetTaxPayerReviewNotes(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerReviewNotes_Result>("usp_GetTaxPayerReviewNotes", taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerforTaxOfficer_Result> usp_GetTaxPayerforTaxOfficer(Nullable<int> taxOfficeID, Nullable<int> taxOfficerID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerforTaxOfficer_Result>("usp_GetTaxPayerforTaxOfficer", taxOfficeIDParameter, taxOfficerIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficeManagerStatus_Result> usp_RPT_TaxOfficeManagerStatus(Nullable<int> taxOfficeID, Nullable<int> taxPayerTypeID, Nullable<int> reviewStatusID, Nullable<int> tOManagerID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var reviewStatusIDParameter = reviewStatusID.HasValue ?
                new ObjectParameter("ReviewStatusID", reviewStatusID) :
                new ObjectParameter("ReviewStatusID", typeof(int));
    
            var tOManagerIDParameter = tOManagerID.HasValue ?
                new ObjectParameter("TOManagerID", tOManagerID) :
                new ObjectParameter("TOManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficeManagerStatus_Result>("usp_RPT_TaxOfficeManagerStatus", taxOfficeIDParameter, taxPayerTypeIDParameter, reviewStatusIDParameter, tOManagerIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficerStatus_Result> usp_RPT_TaxOfficerStatus(Nullable<int> taxOfficeID, Nullable<int> taxPayerTypeID, Nullable<int> reviewStatusID, Nullable<int> taxOfficerID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var reviewStatusIDParameter = reviewStatusID.HasValue ?
                new ObjectParameter("ReviewStatusID", reviewStatusID) :
                new ObjectParameter("ReviewStatusID", typeof(int));
    
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficerStatus_Result>("usp_RPT_TaxOfficerStatus", taxOfficeIDParameter, taxPayerTypeIDParameter, reviewStatusIDParameter, taxOfficerIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficeManagerSummary_Result> usp_RPT_TaxOfficeManagerSummary(Nullable<int> taxOfficeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficeManagerSummary_Result>("usp_RPT_TaxOfficeManagerSummary", taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficerSummary_Result> usp_RPT_TaxOfficerSummary(Nullable<int> taxOfficeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficerSummary_Result>("usp_RPT_TaxOfficerSummary", taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerforTaxOfficeManager_Result> usp_GetTaxPayerforTaxOfficeManager(Nullable<int> taxOfficeID, Nullable<int> tOManagerID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var tOManagerIDParameter = tOManagerID.HasValue ?
                new ObjectParameter("TOManagerID", tOManagerID) :
                new ObjectParameter("TOManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerforTaxOfficeManager_Result>("usp_GetTaxPayerforTaxOfficeManager", taxOfficeIDParameter, tOManagerIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_ManagerReviewStatusSummary_Result> usp_RPT_ManagerReviewStatusSummary(Nullable<int> taxOfficeID, Nullable<int> tOManagerID, Nullable<int> reviewStatusID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var tOManagerIDParameter = tOManagerID.HasValue ?
                new ObjectParameter("TOManagerID", tOManagerID) :
                new ObjectParameter("TOManagerID", typeof(int));
    
            var reviewStatusIDParameter = reviewStatusID.HasValue ?
                new ObjectParameter("ReviewStatusID", reviewStatusID) :
                new ObjectParameter("ReviewStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_ManagerReviewStatusSummary_Result>("usp_RPT_ManagerReviewStatusSummary", taxOfficeIDParameter, tOManagerIDParameter, reviewStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_ReviewStatusSummary_Result> usp_RPT_ReviewStatusSummary(Nullable<int> taxOfficeID, Nullable<int> taxPayerTypeID, Nullable<int> reviewStatusID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var reviewStatusIDParameter = reviewStatusID.HasValue ?
                new ObjectParameter("ReviewStatusID", reviewStatusID) :
                new ObjectParameter("ReviewStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_ReviewStatusSummary_Result>("usp_RPT_ReviewStatusSummary", taxOfficeIDParameter, taxPayerTypeIDParameter, reviewStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_StaffReviewStatusSummary_Result> usp_RPT_StaffReviewStatusSummary(Nullable<int> taxOfficeID, Nullable<int> taxOfficerID, Nullable<int> reviewStatusID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            var reviewStatusIDParameter = reviewStatusID.HasValue ?
                new ObjectParameter("ReviewStatusID", reviewStatusID) :
                new ObjectParameter("ReviewStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_StaffReviewStatusSummary_Result>("usp_RPT_StaffReviewStatusSummary", taxOfficeIDParameter, taxOfficerIDParameter, reviewStatusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficerMonthlyPayment_Result> usp_RPT_TaxOfficerMonthlyPayment(Nullable<int> taxOfficeID, Nullable<int> taxOfficerID, Nullable<int> tOManagerID, Nullable<int> year)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            var tOManagerIDParameter = tOManagerID.HasValue ?
                new ObjectParameter("TOManagerID", tOManagerID) :
                new ObjectParameter("TOManagerID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficerMonthlyPayment_Result>("usp_RPT_TaxOfficerMonthlyPayment", taxOfficeIDParameter, taxOfficerIDParameter, tOManagerIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxOfficerTargetList_Result> usp_GetTaxOfficerTargetList(Nullable<int> taxOfficerID, Nullable<int> taxOfficeID, Nullable<int> taxYear)
        {
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxOfficerTargetList_Result>("usp_GetTaxOfficerTargetList", taxOfficerIDParameter, taxOfficeIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxOfficeTargetList_Result> usp_GetTaxOfficeTargetList(Nullable<int> taxOfficeID, Nullable<int> taxYear)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxOfficeTargetList_Result>("usp_GetTaxOfficeTargetList", taxOfficeIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<usp_RPT_MonthlyTaxOfficeTarget_Result> usp_RPT_MonthlyTaxOfficeTarget(Nullable<int> taxOfficeID, Nullable<int> year)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_MonthlyTaxOfficeTarget_Result>("usp_RPT_MonthlyTaxOfficeTarget", taxOfficeIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<usp_RPT_RevenueStreamByTaxOfficeTarget_Result> usp_RPT_RevenueStreamByTaxOfficeTarget(Nullable<int> revenueStreamID, Nullable<int> year, Nullable<int> month, Nullable<int> taxOfficeID)
        {
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_RevenueStreamByTaxOfficeTarget_Result>("usp_RPT_RevenueStreamByTaxOfficeTarget", revenueStreamIDParameter, yearParameter, monthParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficeByRevenueStreamTarget_Result> usp_RPT_TaxOfficeByRevenueStreamTarget(Nullable<int> taxOfficeID, Nullable<int> year, Nullable<int> month)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficeByRevenueStreamTarget_Result>("usp_RPT_TaxOfficeByRevenueStreamTarget", taxOfficeIDParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<usp_SearchPaymentAccount_Result> usp_SearchPaymentAccount(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string paymentRefNo, string paymentDate, string taxPayerTypeName, string taxPayerRIN, string taxPayerName, string amount, string revenueStreamName, string revenueSubStreamName, string agencyName, string settlementMethodName, string settlementStatusName, string notes, string transactionRefNo)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var paymentRefNoParameter = paymentRefNo != null ?
                new ObjectParameter("PaymentRefNo", paymentRefNo) :
                new ObjectParameter("PaymentRefNo", typeof(string));
    
            var paymentDateParameter = paymentDate != null ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(string));
    
            var taxPayerTypeNameParameter = taxPayerTypeName != null ?
                new ObjectParameter("TaxPayerTypeName", taxPayerTypeName) :
                new ObjectParameter("TaxPayerTypeName", typeof(string));
    
            var taxPayerRINParameter = taxPayerRIN != null ?
                new ObjectParameter("TaxPayerRIN", taxPayerRIN) :
                new ObjectParameter("TaxPayerRIN", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            var revenueStreamNameParameter = revenueStreamName != null ?
                new ObjectParameter("RevenueStreamName", revenueStreamName) :
                new ObjectParameter("RevenueStreamName", typeof(string));
    
            var revenueSubStreamNameParameter = revenueSubStreamName != null ?
                new ObjectParameter("RevenueSubStreamName", revenueSubStreamName) :
                new ObjectParameter("RevenueSubStreamName", typeof(string));
    
            var agencyNameParameter = agencyName != null ?
                new ObjectParameter("AgencyName", agencyName) :
                new ObjectParameter("AgencyName", typeof(string));
    
            var settlementMethodNameParameter = settlementMethodName != null ?
                new ObjectParameter("SettlementMethodName", settlementMethodName) :
                new ObjectParameter("SettlementMethodName", typeof(string));
    
            var settlementStatusNameParameter = settlementStatusName != null ?
                new ObjectParameter("SettlementStatusName", settlementStatusName) :
                new ObjectParameter("SettlementStatusName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var transactionRefNoParameter = transactionRefNo != null ?
                new ObjectParameter("TransactionRefNo", transactionRefNo) :
                new ObjectParameter("TransactionRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchPaymentAccount_Result>("usp_SearchPaymentAccount", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, paymentRefNoParameter, paymentDateParameter, taxPayerTypeNameParameter, taxPayerRINParameter, taxPayerNameParameter, amountParameter, revenueStreamNameParameter, revenueSubStreamNameParameter, agencyNameParameter, settlementMethodNameParameter, settlementStatusNameParameter, notesParameter, transactionRefNoParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetPaymentChannelByRevenueStream_Result> usp_RPT_GetPaymentChannelByRevenueStream(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> revenueStreamID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetPaymentChannelByRevenueStream_Result>("usp_RPT_GetPaymentChannelByRevenueStream", taxYearParameter, fromDateParameter, toDateParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetRevenueStreamByPaymentChannel_Result> usp_RPT_GetRevenueStreamByPaymentChannel(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> settlementMethodID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var settlementMethodIDParameter = settlementMethodID.HasValue ?
                new ObjectParameter("SettlementMethodID", settlementMethodID) :
                new ObjectParameter("SettlementMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetRevenueStreamByPaymentChannel_Result>("usp_RPT_GetRevenueStreamByPaymentChannel", taxYearParameter, fromDateParameter, toDateParameter, settlementMethodIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_RevenueStreamByTaxOfficerTarget_Result> usp_RPT_RevenueStreamByTaxOfficerTarget(Nullable<int> taxOfficeID, Nullable<int> revenueStreamID, Nullable<int> year, Nullable<int> month)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_RevenueStreamByTaxOfficerTarget_Result>("usp_RPT_RevenueStreamByTaxOfficerTarget", taxOfficeIDParameter, revenueStreamIDParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficerByRevenueStreamTarget_Result> usp_RPT_TaxOfficerByRevenueStreamTarget(Nullable<int> taxOfficerID, Nullable<int> year, Nullable<int> month)
        {
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficerByRevenueStreamTarget_Result>("usp_RPT_TaxOfficerByRevenueStreamTarget", taxOfficerIDParameter, yearParameter, monthParameter);
        }
    
        public virtual ObjectResult<usp_GetLandChart_Result> usp_GetLandChart(Nullable<int> filterType)
        {
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLandChart_Result>("usp_GetLandChart", filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBuildingChart_Result> usp_GetBuildingChart(Nullable<int> filterType)
        {
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBuildingChart_Result>("usp_GetBuildingChart", filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessChart_Result> usp_GetBusinessChart(Nullable<int> filterType)
        {
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessChart_Result>("usp_GetBusinessChart", filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetVehicleChart_Result> usp_GetVehicleChart(Nullable<int> filterType)
        {
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetVehicleChart_Result>("usp_GetVehicleChart", filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBillAgingChart_Result> usp_GetBillAgingChart(Nullable<int> billTypeID, Nullable<int> taxPayerTypeID, Nullable<int> filterType)
        {
            var billTypeIDParameter = billTypeID.HasValue ?
                new ObjectParameter("BillTypeID", billTypeID) :
                new ObjectParameter("BillTypeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillAgingChart_Result>("usp_GetBillAgingChart", billTypeIDParameter, taxPayerTypeIDParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBillChart_Result> usp_GetTaxPayerBillChart(Nullable<int> billTypeID, Nullable<int> taxPayerTypeID, Nullable<int> filterType)
        {
            var billTypeIDParameter = billTypeID.HasValue ?
                new ObjectParameter("BillTypeID", billTypeID) :
                new ObjectParameter("BillTypeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBillChart_Result>("usp_GetTaxPayerBillChart", billTypeIDParameter, taxPayerTypeIDParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerSettlementChart_Result> usp_GetTaxPayerSettlementChart(Nullable<int> billTypeID, Nullable<int> taxPayerTypeID, Nullable<int> filterType)
        {
            var billTypeIDParameter = billTypeID.HasValue ?
                new ObjectParameter("BillTypeID", billTypeID) :
                new ObjectParameter("BillTypeID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerSettlementChart_Result>("usp_GetTaxPayerSettlementChart", billTypeIDParameter, taxPayerTypeIDParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetBillChart_Result> usp_GetBillChart(Nullable<int> billTypeID, Nullable<int> statusID, Nullable<int> filterType)
        {
            var billTypeIDParameter = billTypeID.HasValue ?
                new ObjectParameter("BillTypeID", billTypeID) :
                new ObjectParameter("BillTypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var filterTypeParameter = filterType.HasValue ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillChart_Result>("usp_GetBillChart", billTypeIDParameter, statusIDParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<usp_GetLateChargeList_Result> usp_GetLateChargeList(Nullable<int> lateChargeID, Nullable<int> revenueStreamID)
        {
            var lateChargeIDParameter = lateChargeID.HasValue ?
                new ObjectParameter("LateChargeID", lateChargeID) :
                new ObjectParameter("LateChargeID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetLateChargeList_Result>("usp_GetLateChargeList", lateChargeIDParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentAdjustmentList_Result> usp_GetAssessmentAdjustmentList(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentAdjustmentList_Result>("usp_GetAssessmentAdjustmentList", assessmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentLateChargeList_Result> usp_GetAssessmentLateChargeList(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentLateChargeList_Result>("usp_GetAssessmentLateChargeList", assessmentIDParameter);
        }
    
        public virtual int usp_UpdateAssessmentAmount(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateAssessmentAmount", assessmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleItemListForLateCharges_Result> usp_GetAssessmentRuleItemListForLateCharges(Nullable<int> assessmentID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleItemListForLateCharges_Result>("usp_GetAssessmentRuleItemListForLateCharges", assessmentIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBillAdjustmentList_Result> usp_GetServiceBillAdjustmentList(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBillAdjustmentList_Result>("usp_GetServiceBillAdjustmentList", serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBillItemListForLateCharges_Result> usp_GetServiceBillItemListForLateCharges(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBillItemListForLateCharges_Result>("usp_GetServiceBillItemListForLateCharges", serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBillLateChargeList_Result> usp_GetServiceBillLateChargeList(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBillLateChargeList_Result>("usp_GetServiceBillLateChargeList", serviceBillIDParameter);
        }
    
        public virtual int usp_UpdateServiceBillAmount(Nullable<int> serviceBillID)
        {
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateServiceBillAmount", serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryReceiptList_Result> usp_GetTreasuryReceiptList(Nullable<long> receiptID, Nullable<long> assessmentID, Nullable<long> serviceBillID, Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, string documentUrl, Nullable<int> statusID)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(long));
    
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(long));
    
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(long));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var documentUrlParameter = documentUrl != null ?
                new ObjectParameter("DocumentUrl", documentUrl) :
                new ObjectParameter("DocumentUrl", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryReceiptList_Result>("usp_GetTreasuryReceiptList", receiptIDParameter, assessmentIDParameter, serviceBillIDParameter, taxPayerTypeIDParameter, taxPayerIDParameter, documentUrlParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchTreasuryReceipt_Result> usp_SearchTreasuryReceipt(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string receiptRefNo, string receiptDate, string billRefNo, string receiptAmount, string receiptStatus)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var receiptRefNoParameter = receiptRefNo != null ?
                new ObjectParameter("ReceiptRefNo", receiptRefNo) :
                new ObjectParameter("ReceiptRefNo", typeof(string));
    
            var receiptDateParameter = receiptDate != null ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(string));
    
            var billRefNoParameter = billRefNo != null ?
                new ObjectParameter("BillRefNo", billRefNo) :
                new ObjectParameter("BillRefNo", typeof(string));
    
            var receiptAmountParameter = receiptAmount != null ?
                new ObjectParameter("ReceiptAmount", receiptAmount) :
                new ObjectParameter("ReceiptAmount", typeof(string));
    
            var receiptStatusParameter = receiptStatus != null ?
                new ObjectParameter("ReceiptStatus", receiptStatus) :
                new ObjectParameter("ReceiptStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchTreasuryReceipt_Result>("usp_SearchTreasuryReceipt", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, receiptRefNoParameter, receiptDateParameter, billRefNoParameter, receiptAmountParameter, receiptStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleItemDetails_Result> usp_GetAssessmentRuleItemDetails(Nullable<long> aAIID)
        {
            var aAIIDParameter = aAIID.HasValue ?
                new ObjectParameter("AAIID", aAIID) :
                new ObjectParameter("AAIID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleItemDetails_Result>("usp_GetAssessmentRuleItemDetails", aAIIDParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceBillItemDetails_Result> usp_GetServiceBillItemDetails(Nullable<long> sBSIID)
        {
            var sBSIIDParameter = sBSIID.HasValue ?
                new ObjectParameter("SBSIID", sBSIID) :
                new ObjectParameter("SBSIID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceBillItemDetails_Result>("usp_GetServiceBillItemDetails", sBSIIDParameter);
        }
    
        public virtual ObjectResult<usp_EM_GetBankList_Result> usp_EM_GetBankList(string bankName, Nullable<int> bankID, string bankIds, Nullable<int> intStatus, string includeBankIds, string excludeBankIds)
        {
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var bankIdsParameter = bankIds != null ?
                new ObjectParameter("BankIds", bankIds) :
                new ObjectParameter("BankIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeBankIdsParameter = includeBankIds != null ?
                new ObjectParameter("IncludeBankIds", includeBankIds) :
                new ObjectParameter("IncludeBankIds", typeof(string));
    
            var excludeBankIdsParameter = excludeBankIds != null ?
                new ObjectParameter("ExcludeBankIds", excludeBankIds) :
                new ObjectParameter("ExcludeBankIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EM_GetBankList_Result>("usp_EM_GetBankList", bankNameParameter, bankIDParameter, bankIdsParameter, intStatusParameter, includeBankIdsParameter, excludeBankIdsParameter);
        }
    
        public virtual ObjectResult<usp_EM_GetCategoryList_Result> usp_EM_GetCategoryList(string categoryName, Nullable<int> categoryID, string categoryIds, Nullable<int> intStatus, string includeCategoryIds, string excludeCategoryIds)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryIdsParameter = categoryIds != null ?
                new ObjectParameter("CategoryIds", categoryIds) :
                new ObjectParameter("CategoryIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeCategoryIdsParameter = includeCategoryIds != null ?
                new ObjectParameter("IncludeCategoryIds", includeCategoryIds) :
                new ObjectParameter("IncludeCategoryIds", typeof(string));
    
            var excludeCategoryIdsParameter = excludeCategoryIds != null ?
                new ObjectParameter("ExcludeCategoryIds", excludeCategoryIds) :
                new ObjectParameter("ExcludeCategoryIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EM_GetCategoryList_Result>("usp_EM_GetCategoryList", categoryNameParameter, categoryIDParameter, categoryIdsParameter, intStatusParameter, includeCategoryIdsParameter, excludeCategoryIdsParameter);
        }
    
        public virtual ObjectResult<usp_EM_GetDataSourceList_Result> usp_EM_GetDataSourceList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EM_GetDataSourceList_Result>("usp_EM_GetDataSourceList");
        }
    
        public virtual ObjectResult<usp_EM_GetIGRClassificationList_Result> usp_EM_GetIGRClassificationList(Nullable<int> revenueHeadID, Nullable<int> categoryID, Nullable<long> iGRClassificationID, Nullable<int> intStatus)
        {
            var revenueHeadIDParameter = revenueHeadID.HasValue ?
                new ObjectParameter("RevenueHeadID", revenueHeadID) :
                new ObjectParameter("RevenueHeadID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var iGRClassificationIDParameter = iGRClassificationID.HasValue ?
                new ObjectParameter("IGRClassificationID", iGRClassificationID) :
                new ObjectParameter("IGRClassificationID", typeof(long));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EM_GetIGRClassificationList_Result>("usp_EM_GetIGRClassificationList", revenueHeadIDParameter, categoryIDParameter, iGRClassificationIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_EM_GetRevenueHeadList_Result> usp_EM_GetRevenueHeadList(string revenueHeadName, Nullable<int> revenueHeadID, Nullable<int> categoryID, string revenueHeadIds, Nullable<int> intStatus, string includeRevenueHeadIds, string excludeRevenueHeadIds)
        {
            var revenueHeadNameParameter = revenueHeadName != null ?
                new ObjectParameter("RevenueHeadName", revenueHeadName) :
                new ObjectParameter("RevenueHeadName", typeof(string));
    
            var revenueHeadIDParameter = revenueHeadID.HasValue ?
                new ObjectParameter("RevenueHeadID", revenueHeadID) :
                new ObjectParameter("RevenueHeadID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var revenueHeadIdsParameter = revenueHeadIds != null ?
                new ObjectParameter("RevenueHeadIds", revenueHeadIds) :
                new ObjectParameter("RevenueHeadIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeRevenueHeadIdsParameter = includeRevenueHeadIds != null ?
                new ObjectParameter("IncludeRevenueHeadIds", includeRevenueHeadIds) :
                new ObjectParameter("IncludeRevenueHeadIds", typeof(string));
    
            var excludeRevenueHeadIdsParameter = excludeRevenueHeadIds != null ?
                new ObjectParameter("ExcludeRevenueHeadIds", excludeRevenueHeadIds) :
                new ObjectParameter("ExcludeRevenueHeadIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EM_GetRevenueHeadList_Result>("usp_EM_GetRevenueHeadList", revenueHeadNameParameter, revenueHeadIDParameter, categoryIDParameter, revenueHeadIdsParameter, intStatusParameter, includeRevenueHeadIdsParameter, excludeRevenueHeadIdsParameter);
        }
    
        public virtual ObjectResult<usp_EM_GetClassificationDataSourceList_Result> usp_EM_GetClassificationDataSourceList(Nullable<long> iGRClassificationID)
        {
            var iGRClassificationIDParameter = iGRClassificationID.HasValue ?
                new ObjectParameter("IGRClassificationID", iGRClassificationID) :
                new ObjectParameter("IGRClassificationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EM_GetClassificationDataSourceList_Result>("usp_EM_GetClassificationDataSourceList", iGRClassificationIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchTCCDetails_Result> usp_SearchTCCDetails(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string taxPayerName, string taxPayerRIN, string tIN, string taxYear, string tCCTaxPaid)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var taxPayerRINParameter = taxPayerRIN != null ?
                new ObjectParameter("TaxPayerRIN", taxPayerRIN) :
                new ObjectParameter("TaxPayerRIN", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var taxYearParameter = taxYear != null ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(string));
    
            var tCCTaxPaidParameter = tCCTaxPaid != null ?
                new ObjectParameter("TCCTaxPaid", tCCTaxPaid) :
                new ObjectParameter("TCCTaxPaid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchTCCDetails_Result>("usp_SearchTCCDetails", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, taxPayerNameParameter, taxPayerRINParameter, tINParameter, taxYearParameter, tCCTaxPaidParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerLiabilityByTaxYear_Result> usp_GetTaxPayerLiabilityByTaxYear(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<int> taxYear)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerLiabilityByTaxYear_Result>("usp_GetTaxPayerLiabilityByTaxYear", taxPayerTypeIDParameter, taxPayerIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<usp_GetRequestIncomeStreamList_Result> usp_GetRequestIncomeStreamList(Nullable<long> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRequestIncomeStreamList_Result>("usp_GetRequestIncomeStreamList", requestIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_InvidualLiabilityStatus_Result> usp_RPT_InvidualLiabilityStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_InvidualLiabilityStatus_Result>("usp_RPT_InvidualLiabilityStatus");
        }
    
        public virtual ObjectResult<usp_GetAdminRequestStageList_Result> usp_GetAdminRequestStageList(Nullable<long> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAdminRequestStageList_Result>("usp_GetAdminRequestStageList", requestIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTCCRequestDetails_Result> usp_GetTCCRequestDetails(Nullable<long> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTCCRequestDetails_Result>("usp_GetTCCRequestDetails", requestIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchTCCRequest_Result> usp_SearchTCCRequest(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, Nullable<int> statusID, Nullable<int> taxOfficeID)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchTCCRequest_Result>("usp_SearchTCCRequest", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, statusIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTCCDetail_Result> usp_GetTCCDetail(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> taxYear)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTCCDetail_Result>("usp_GetTCCDetail", taxPayerIDParameter, taxPayerTypeIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxClearanceCertificateDetails_Result> usp_GetTaxClearanceCertificateDetails(Nullable<long> tCCID, Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> taxYear, string requestRefNo)
        {
            var tCCIDParameter = tCCID.HasValue ?
                new ObjectParameter("TCCID", tCCID) :
                new ObjectParameter("TCCID", typeof(long));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var requestRefNoParameter = requestRefNo != null ?
                new ObjectParameter("RequestRefNo", requestRefNo) :
                new ObjectParameter("RequestRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxClearanceCertificateDetails_Result>("usp_GetTaxClearanceCertificateDetails", tCCIDParameter, taxPayerIDParameter, taxPayerTypeIDParameter, taxYearParameter, requestRefNoParameter);
        }
    
        public virtual ObjectResult<usp_SearchTaxClearanceCertificate_Result> usp_SearchTaxClearanceCertificate(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchTaxClearanceCertificate_Result>("usp_SearchTaxClearanceCertificate", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_GetTCCDetailForGenerate_Result> usp_GetTCCDetailForGenerate(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<int> taxYear, string requestRefNo)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var requestRefNoParameter = requestRefNo != null ?
                new ObjectParameter("RequestRefNo", requestRefNo) :
                new ObjectParameter("RequestRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTCCDetailForGenerate_Result>("usp_GetTCCDetailForGenerate", taxPayerIDParameter, taxPayerTypeIDParameter, taxYearParameter, requestRefNoParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetPaymentDetail_Result> usp_RPT_GetPaymentDetail(Nullable<int> taxYear, Nullable<int> settlementMethodID, Nullable<int> revenueStreamID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var settlementMethodIDParameter = settlementMethodID.HasValue ?
                new ObjectParameter("SettlementMethodID", settlementMethodID) :
                new ObjectParameter("SettlementMethodID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetPaymentDetail_Result>("usp_RPT_GetPaymentDetail", taxYearParameter, settlementMethodIDParameter, revenueStreamIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerProfileForExport_Result> usp_GetTaxPayerProfileForExport(string profileIds, Nullable<int> year)
        {
            var profileIdsParameter = profileIds != null ?
                new ObjectParameter("ProfileIds", profileIds) :
                new ObjectParameter("ProfileIds", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerProfileForExport_Result>("usp_GetTaxPayerProfileForExport", profileIdsParameter, yearParameter);
        }
    
        public virtual ObjectResult<usp_GetSettlementWithoutReceipt_Result> usp_GetSettlementWithoutReceipt(Nullable<long> assessmentID, Nullable<long> serviceBillID)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(long));
    
            var serviceBillIDParameter = serviceBillID.HasValue ?
                new ObjectParameter("ServiceBillID", serviceBillID) :
                new ObjectParameter("ServiceBillID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettlementWithoutReceipt_Result>("usp_GetSettlementWithoutReceipt", assessmentIDParameter, serviceBillIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBasedOnTaxOfficeForExport_Result> usp_GetTaxPayerBasedOnTaxOfficeForExport(Nullable<int> taxOfficeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBasedOnTaxOfficeForExport_Result>("usp_GetTaxPayerBasedOnTaxOfficeForExport", taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetTaxPayerTypeByTaxOffice_Result> usp_RPT_GetTaxPayerTypeByTaxOffice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetTaxPayerTypeByTaxOffice_Result>("usp_RPT_GetTaxPayerTypeByTaxOffice");
        }
    
        public virtual ObjectResult<usp_GetAssetBasedOnTaxOfficeForExport_Result> usp_GetAssetBasedOnTaxOfficeForExport(Nullable<int> taxOfficeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssetBasedOnTaxOfficeForExport_Result>("usp_GetAssetBasedOnTaxOfficeForExport", taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetAssetDetailByTaxOffice_Result> usp_RPT_GetAssetDetailByTaxOffice(Nullable<int> taxOfficeID)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetAssetDetailByTaxOffice_Result>("usp_RPT_GetAssetDetailByTaxOffice", taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetAssetTypeByTaxOffice_Result> usp_RPT_GetAssetTypeByTaxOffice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetAssetTypeByTaxOffice_Result>("usp_RPT_GetAssetTypeByTaxOffice");
        }
    
        public virtual ObjectResult<usp_GetDemandNoticeList_Result> usp_GetDemandNoticeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDemandNoticeList_Result>("usp_GetDemandNoticeList");
        }
    
        public virtual ObjectResult<usp_GetPaymentChargeList_Result> usp_GetPaymentChargeList(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentChargeList_Result>("usp_GetPaymentChargeList", taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetRevenueStreamByTaxOfficerTargetDetail_Result> usp_RPT_GetRevenueStreamByTaxOfficerTargetDetail(Nullable<int> taxYear, Nullable<int> taxMonth, Nullable<int> taxOfficerID, Nullable<int> revenueStreamID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            var taxOfficerIDParameter = taxOfficerID.HasValue ?
                new ObjectParameter("TaxOfficerID", taxOfficerID) :
                new ObjectParameter("TaxOfficerID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetRevenueStreamByTaxOfficerTargetDetail_Result>("usp_RPT_GetRevenueStreamByTaxOfficerTargetDetail", taxYearParameter, taxMonthParameter, taxOfficerIDParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetTaxPayerMonthlyPayment_Result> usp_RPT_GetTaxPayerMonthlyPayment(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<int> taxYear, Nullable<int> revenueStreamID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetTaxPayerMonthlyPayment_Result>("usp_RPT_GetTaxPayerMonthlyPayment", taxPayerTypeIDParameter, taxPayerIDParameter, taxYearParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_GetTaxPayerMonthlyPaymentDetail_Result> usp_RPT_GetTaxPayerMonthlyPaymentDetail(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<int> taxYear, Nullable<int> taxMonth, Nullable<int> revenueStreamID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_GetTaxPayerMonthlyPaymentDetail_Result>("usp_RPT_GetTaxPayerMonthlyPaymentDetail", taxPayerTypeIDParameter, taxPayerIDParameter, taxYearParameter, taxMonthParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_BusinessSectorAssessmentDetail_Result> usp_RPT_BusinessSectorAssessmentDetail(Nullable<int> taxYear, Nullable<int> businessSectorID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var businessSectorIDParameter = businessSectorID.HasValue ?
                new ObjectParameter("BusinessSectorID", businessSectorID) :
                new ObjectParameter("BusinessSectorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_BusinessSectorAssessmentDetail_Result>("usp_RPT_BusinessSectorAssessmentDetail", taxYearParameter, businessSectorIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_BusinessSectorAssessmentSummary_Result> usp_RPT_BusinessSectorAssessmentSummary(Nullable<int> taxYear, Nullable<int> businessTypeID, Nullable<int> businessCategoryID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var businessTypeIDParameter = businessTypeID.HasValue ?
                new ObjectParameter("BusinessTypeID", businessTypeID) :
                new ObjectParameter("BusinessTypeID", typeof(int));
    
            var businessCategoryIDParameter = businessCategoryID.HasValue ?
                new ObjectParameter("BusinessCategoryID", businessCategoryID) :
                new ObjectParameter("BusinessCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_BusinessSectorAssessmentSummary_Result>("usp_RPT_BusinessSectorAssessmentSummary", taxYearParameter, businessTypeIDParameter, businessCategoryIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficeAssessmentDetail_Result> usp_RPT_TaxOfficeAssessmentDetail(Nullable<int> taxOfficeID, Nullable<int> taxYear)
        {
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficeAssessmentDetail_Result>("usp_RPT_TaxOfficeAssessmentDetail", taxOfficeIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxOfficeAssessmentSummary_Result> usp_RPT_TaxOfficeAssessmentSummary(Nullable<int> taxYear)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxOfficeAssessmentSummary_Result>("usp_RPT_TaxOfficeAssessmentSummary", taxYearParameter);
        }
    
        public virtual ObjectResult<usp_SFTP_GetDataSubmissionList_Result> usp_SFTP_GetDataSubmissionList(Nullable<int> dataSubmitterID, Nullable<int> dataSubmissionTypeID, Nullable<int> dataSubmissionID)
        {
            var dataSubmitterIDParameter = dataSubmitterID.HasValue ?
                new ObjectParameter("DataSubmitterID", dataSubmitterID) :
                new ObjectParameter("DataSubmitterID", typeof(int));
    
            var dataSubmissionTypeIDParameter = dataSubmissionTypeID.HasValue ?
                new ObjectParameter("DataSubmissionTypeID", dataSubmissionTypeID) :
                new ObjectParameter("DataSubmissionTypeID", typeof(int));
    
            var dataSubmissionIDParameter = dataSubmissionID.HasValue ?
                new ObjectParameter("DataSubmissionID", dataSubmissionID) :
                new ObjectParameter("DataSubmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SFTP_GetDataSubmissionList_Result>("usp_SFTP_GetDataSubmissionList", dataSubmitterIDParameter, dataSubmissionTypeIDParameter, dataSubmissionIDParameter);
        }
    
        public virtual ObjectResult<usp_SFTP_GetDataSubmissionTypeList_Result> usp_SFTP_GetDataSubmissionTypeList(string dataSubmissionTypeName, Nullable<int> dataSubmissionTypeID, string dataSubmissionTypeIds, Nullable<int> intStatus, string includeDataSubmissionTypeIds, string excludeDataSubmissionTypeIds)
        {
            var dataSubmissionTypeNameParameter = dataSubmissionTypeName != null ?
                new ObjectParameter("DataSubmissionTypeName", dataSubmissionTypeName) :
                new ObjectParameter("DataSubmissionTypeName", typeof(string));
    
            var dataSubmissionTypeIDParameter = dataSubmissionTypeID.HasValue ?
                new ObjectParameter("DataSubmissionTypeID", dataSubmissionTypeID) :
                new ObjectParameter("DataSubmissionTypeID", typeof(int));
    
            var dataSubmissionTypeIdsParameter = dataSubmissionTypeIds != null ?
                new ObjectParameter("DataSubmissionTypeIds", dataSubmissionTypeIds) :
                new ObjectParameter("DataSubmissionTypeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeDataSubmissionTypeIdsParameter = includeDataSubmissionTypeIds != null ?
                new ObjectParameter("IncludeDataSubmissionTypeIds", includeDataSubmissionTypeIds) :
                new ObjectParameter("IncludeDataSubmissionTypeIds", typeof(string));
    
            var excludeDataSubmissionTypeIdsParameter = excludeDataSubmissionTypeIds != null ?
                new ObjectParameter("ExcludeDataSubmissionTypeIds", excludeDataSubmissionTypeIds) :
                new ObjectParameter("ExcludeDataSubmissionTypeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SFTP_GetDataSubmissionTypeList_Result>("usp_SFTP_GetDataSubmissionTypeList", dataSubmissionTypeNameParameter, dataSubmissionTypeIDParameter, dataSubmissionTypeIdsParameter, intStatusParameter, includeDataSubmissionTypeIdsParameter, excludeDataSubmissionTypeIdsParameter);
        }
    
        public virtual ObjectResult<usp_SFTP_GetDataSubmitterList_Result> usp_SFTP_GetDataSubmitterList(string dataSubmitterName, Nullable<int> dataSubmitterID, Nullable<int> intStatus)
        {
            var dataSubmitterNameParameter = dataSubmitterName != null ?
                new ObjectParameter("DataSubmitterName", dataSubmitterName) :
                new ObjectParameter("DataSubmitterName", typeof(string));
    
            var dataSubmitterIDParameter = dataSubmitterID.HasValue ?
                new ObjectParameter("DataSubmitterID", dataSubmitterID) :
                new ObjectParameter("DataSubmitterID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SFTP_GetDataSubmitterList_Result>("usp_SFTP_GetDataSubmitterList", dataSubmitterNameParameter, dataSubmitterIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetTCCRequestList_Result> usp_GetTCCRequestList(Nullable<int> taxPayerID, Nullable<int> statusID, Nullable<int> taxOfficeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTCCRequestList_Result>("usp_GetTCCRequestList", taxPayerIDParameter, statusIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateTypeFieldList_Result> usp_GetCertificateTypeFieldList(Nullable<int> certificateTypeID, Nullable<int> intStatus)
        {
            var certificateTypeIDParameter = certificateTypeID.HasValue ?
                new ObjectParameter("CertificateTypeID", certificateTypeID) :
                new ObjectParameter("CertificateTypeID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("IntStatus", intStatus) :
                new ObjectParameter("IntStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateTypeFieldList_Result>("usp_GetCertificateTypeFieldList", certificateTypeIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateTypeItemList_Result> usp_GetCertificateTypeItemList(Nullable<int> certificateTypeID, Nullable<int> intStatus)
        {
            var certificateTypeIDParameter = certificateTypeID.HasValue ?
                new ObjectParameter("CertificateTypeID", certificateTypeID) :
                new ObjectParameter("CertificateTypeID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("IntStatus", intStatus) :
                new ObjectParameter("IntStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateTypeItemList_Result>("usp_GetCertificateTypeItemList", certificateTypeIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerProfileTypeForExport_Result> usp_GetTaxPayerProfileTypeForExport(Nullable<int> profileTypeID, Nullable<int> year)
        {
            var profileTypeIDParameter = profileTypeID.HasValue ?
                new ObjectParameter("ProfileTypeID", profileTypeID) :
                new ObjectParameter("ProfileTypeID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerProfileTypeForExport_Result>("usp_GetTaxPayerProfileTypeForExport", profileTypeIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateTypeList_Result> usp_GetCertificateTypeList(string certificateTypeName, Nullable<int> taxYear, Nullable<int> certificateTypeID, Nullable<int> intStatus)
        {
            var certificateTypeNameParameter = certificateTypeName != null ?
                new ObjectParameter("CertificateTypeName", certificateTypeName) :
                new ObjectParameter("CertificateTypeName", typeof(string));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var certificateTypeIDParameter = certificateTypeID.HasValue ?
                new ObjectParameter("CertificateTypeID", certificateTypeID) :
                new ObjectParameter("CertificateTypeID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateTypeList_Result>("usp_GetCertificateTypeList", certificateTypeNameParameter, taxYearParameter, certificateTypeIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateDetails_Result> usp_GetCertificateDetails(Nullable<long> certificateID)
        {
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateDetails_Result>("usp_GetCertificateDetails", certificateIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateFieldList_Result> usp_GetCertificateFieldList(Nullable<int> certificateTypeID, Nullable<long> certificateID)
        {
            var certificateTypeIDParameter = certificateTypeID.HasValue ?
                new ObjectParameter("CertificateTypeID", certificateTypeID) :
                new ObjectParameter("CertificateTypeID", typeof(int));
    
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateFieldList_Result>("usp_GetCertificateFieldList", certificateTypeIDParameter, certificateIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateItemList_Result> usp_GetCertificateItemList(Nullable<long> certificateID)
        {
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateItemList_Result>("usp_GetCertificateItemList", certificateIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchCertificate_Result> usp_SearchCertificate(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter, string statusID)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            var statusIDParameter = statusID != null ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchCertificate_Result>("usp_SearchCertificate", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerDetails_Result> usp_GetTaxPayerDetails(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerDetails_Result>("usp_GetTaxPayerDetails", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerAssetForTCC_Result> usp_GetTaxPayerAssetForTCC(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerAssetForTCC_Result>("usp_GetTaxPayerAssetForTCC", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleInformationForTCC_Result> usp_GetAssessmentRuleInformationForTCC(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleInformationForTCC_Result>("usp_GetAssessmentRuleInformationForTCC", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerBillForTCC_Result> usp_GetTaxPayerBillForTCC(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerBillForTCC_Result>("usp_GetTaxPayerBillForTCC", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerPaymentForTCC_Result> usp_GetTaxPayerPaymentForTCC(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerPaymentForTCC_Result>("usp_GetTaxPayerPaymentForTCC", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerProfileInformationForTCC_Result> usp_GetTaxPayerProfileInformationForTCC(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerProfileInformationForTCC_Result>("usp_GetTaxPayerProfileInformationForTCC", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerLiabilityForTCC_Result> usp_GetTaxPayerLiabilityForTCC(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID, Nullable<int> taxYear)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerLiabilityForTCC_Result>("usp_GetTaxPayerLiabilityForTCC", taxPayerTypeIDParameter, taxPayerIDParameter, taxYearParameter);
        }
    
        public virtual ObjectResult<usp_GetProfileDropDownForCertificate_Result> usp_GetProfileDropDownForCertificate(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<long> certificateTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var certificateTypeIDParameter = certificateTypeID.HasValue ?
                new ObjectParameter("CertificateTypeID", certificateTypeID) :
                new ObjectParameter("CertificateTypeID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetProfileDropDownForCertificate_Result>("usp_GetProfileDropDownForCertificate", taxPayerIDParameter, taxPayerTypeIDParameter, certificateTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleInformationForCertificate_Result> usp_GetAssessmentRuleInformationForCertificate(Nullable<long> certificateID)
        {
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleInformationForCertificate_Result>("usp_GetAssessmentRuleInformationForCertificate", certificateIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAdminCertificateStageList_Result> usp_GetAdminCertificateStageList(Nullable<long> certificateID)
        {
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAdminCertificateStageList_Result>("usp_GetAdminCertificateStageList", certificateIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCertificateDetailForGenerate_Result> usp_GetCertificateDetailForGenerate(Nullable<long> certificateID)
        {
            var certificateIDParameter = certificateID.HasValue ?
                new ObjectParameter("CertificateID", certificateID) :
                new ObjectParameter("CertificateID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCertificateDetailForGenerate_Result>("usp_GetCertificateDetailForGenerate", certificateIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentByRevenueStreamDetail_Result> usp_GetPaymentByRevenueStreamDetail(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> paymentType, Nullable<int> revenueStreamID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentByRevenueStreamDetail_Result>("usp_GetPaymentByRevenueStreamDetail", taxYearParameter, fromDateParameter, toDateParameter, paymentTypeParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillByRevenueStreamDetail_Result> usp_GetBillByRevenueStreamDetail(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> billType, Nullable<int> billStatusID, Nullable<int> revenueStreamID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var billStatusIDParameter = billStatusID.HasValue ?
                new ObjectParameter("BillStatusID", billStatusID) :
                new ObjectParameter("BillStatusID", typeof(int));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillByRevenueStreamDetail_Result>("usp_GetBillByRevenueStreamDetail", taxYearParameter, fromDateParameter, toDateParameter, billTypeParameter, billStatusIDParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessmentForSideMenu_Result> usp_SearchAssessmentForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessmentForSideMenu_Result>("usp_SearchAssessmentForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchAssessmentRuleForSideMenu_Result> usp_SearchAssessmentRuleForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchAssessmentRuleForSideMenu_Result>("usp_SearchAssessmentRuleForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchBuildingForSideMenu_Result> usp_SearchBuildingForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBuildingForSideMenu_Result>("usp_SearchBuildingForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchBusinessForSideMenu_Result> usp_SearchBusinessForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchBusinessForSideMenu_Result>("usp_SearchBusinessForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchCompanyForSideMenu_Result> usp_SearchCompanyForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchCompanyForSideMenu_Result>("usp_SearchCompanyForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchGovernmentForSideMenu_Result> usp_SearchGovernmentForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchGovernmentForSideMenu_Result>("usp_SearchGovernmentForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchIndividualForSideMenu_Result> usp_SearchIndividualForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchIndividualForSideMenu_Result>("usp_SearchIndividualForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchLandForSideMenu_Result> usp_SearchLandForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchLandForSideMenu_Result>("usp_SearchLandForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchMDAServiceForSideMenu_Result> usp_SearchMDAServiceForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchMDAServiceForSideMenu_Result>("usp_SearchMDAServiceForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchServiceBillForSideMenu_Result> usp_SearchServiceBillForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchServiceBillForSideMenu_Result>("usp_SearchServiceBillForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_SearchVehicleForSideMenu_Result> usp_SearchVehicleForSideMenu(string whereCondition, string orderBy, string orderByDirection, Nullable<int> pageNumber, Nullable<int> pageSize, string mainFilter)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var orderByDirectionParameter = orderByDirection != null ?
                new ObjectParameter("OrderByDirection", orderByDirection) :
                new ObjectParameter("OrderByDirection", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var mainFilterParameter = mainFilter != null ?
                new ObjectParameter("MainFilter", mainFilter) :
                new ObjectParameter("MainFilter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SearchVehicleForSideMenu_Result>("usp_SearchVehicleForSideMenu", whereConditionParameter, orderByParameter, orderByDirectionParameter, pageNumberParameter, pageSizeParameter, mainFilterParameter);
        }
    
        public virtual ObjectResult<usp_GetPaymentByTaxOfficeDetail_Result> usp_GetPaymentByTaxOfficeDetail(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> paymentType, Nullable<int> taxOfficeID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPaymentByTaxOfficeDetail_Result>("usp_GetPaymentByTaxOfficeDetail", taxYearParameter, fromDateParameter, toDateParameter, paymentTypeParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetBillByTaxOfficeDetail_Result> usp_GetBillByTaxOfficeDetail(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> billType, Nullable<int> billStatusID, Nullable<int> taxOfficeID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var billStatusIDParameter = billStatusID.HasValue ?
                new ObjectParameter("BillStatusID", billStatusID) :
                new ObjectParameter("BillStatusID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBillByTaxOfficeDetail_Result>("usp_GetBillByTaxOfficeDetail", taxYearParameter, fromDateParameter, toDateParameter, billTypeParameter, billStatusIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetSettlementItemDetails_Result> usp_GetSettlementItemDetails(Nullable<long> sIID)
        {
            var sIIDParameter = sIID.HasValue ?
                new ObjectParameter("SIID", sIID) :
                new ObjectParameter("SIID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetSettlementItemDetails_Result>("usp_GetSettlementItemDetails", sIIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAuditLog_Result> usp_GetAuditLog(Nullable<int> staffID, Nullable<int> aSLID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var aSLIDParameter = aSLID.HasValue ?
                new ObjectParameter("ASLID", aSLID) :
                new ObjectParameter("ASLID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAuditLog_Result>("usp_GetAuditLog", staffIDParameter, aSLIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerDocumentList_Result> usp_GetTaxPayerDocumentList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID, Nullable<long> tPDID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var tPDIDParameter = tPDID.HasValue ?
                new ObjectParameter("TPDID", tPDID) :
                new ObjectParameter("TPDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerDocumentList_Result>("usp_GetTaxPayerDocumentList", taxPayerIDParameter, taxPayerTypeIDParameter, tPDIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerMessageList_Result> usp_GetTaxPayerMessageList(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerMessageList_Result>("usp_GetTaxPayerMessageList", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetRequestNotesList_Result> usp_GetRequestNotesList(Nullable<long> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRequestNotesList_Result>("usp_GetRequestNotesList", requestIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryReceiptByRevenueStream_Result> usp_GetTreasuryReceiptByRevenueStream(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryReceiptByRevenueStream_Result>("usp_GetTreasuryReceiptByRevenueStream", taxYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryReceiptByRevenueStreamDetail_Result> usp_GetTreasuryReceiptByRevenueStreamDetail(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> revenueStreamID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryReceiptByRevenueStreamDetail_Result>("usp_GetTreasuryReceiptByRevenueStreamDetail", taxYearParameter, fromDateParameter, toDateParameter, revenueStreamIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryReceiptByTaxOffice_Result> usp_GetTreasuryReceiptByTaxOffice(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryReceiptByTaxOffice_Result>("usp_GetTreasuryReceiptByTaxOffice", taxYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetTreasuryReceiptByTaxOfficeDetail_Result> usp_GetTreasuryReceiptByTaxOfficeDetail(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taxOfficeID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTreasuryReceiptByTaxOfficeDetail_Result>("usp_GetTreasuryReceiptByTaxOfficeDetail", taxYearParameter, fromDateParameter, toDateParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_EmployerLiability_Result> usp_RPT_EmployerLiability()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_EmployerLiability_Result>("usp_RPT_EmployerLiability");
        }
    
        [DbFunction("EIRSEntities", "GetEmployerLiability")]
        public virtual IQueryable<GetEmployerLiability_Result> GetEmployerLiability(Nullable<int> individualID)
        {
            var individualIDParameter = individualID.HasValue ?
                new ObjectParameter("IndividualID", individualID) :
                new ObjectParameter("IndividualID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployerLiability_Result>("[EIRSEntities].[GetEmployerLiability](@IndividualID)", individualIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_EmployerPAYELiability_Result> usp_RPT_EmployerPAYELiability()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_EmployerPAYELiability_Result>("usp_RPT_EmployerPAYELiability");
        }
    
        public virtual ObjectResult<usp_GetPAYEAssessmentBill_Result> usp_GetPAYEAssessmentBill(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYEAssessmentBill_Result>("usp_GetPAYEAssessmentBill", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPAYEAssessmentRuleInformation_Result> usp_GetPAYEAssessmentRuleInformation(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYEAssessmentRuleInformation_Result>("usp_GetPAYEAssessmentRuleInformation", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPAYEEmployerStaff_Result> usp_GetPAYEEmployerStaff(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYEEmployerStaff_Result>("usp_GetPAYEEmployerStaff", assetIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPAYEPayment_Result> usp_GetPAYEPayment(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYEPayment_Result>("usp_GetPAYEPayment", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetPAYEProfileInformation_Result> usp_GetPAYEProfileInformation(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPAYEProfileInformation_Result>("usp_GetPAYEProfileInformation", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_MonthlyTCCCommissionList_Result> usp_RPT_MonthlyTCCCommissionList(Nullable<int> taxYear, Nullable<int> stageID, Nullable<int> statusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_MonthlyTCCCommissionList_Result>("usp_RPT_MonthlyTCCCommissionList", taxYearParameter, stageIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_MonthlyTCCRevokeDetail_Result> usp_RPT_MonthlyTCCRevokeDetail(Nullable<int> taxYear, Nullable<int> taxMonth, Nullable<int> stageID, Nullable<int> statusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_MonthlyTCCRevokeDetail_Result>("usp_RPT_MonthlyTCCRevokeDetail", taxYearParameter, taxMonthParameter, stageIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_MonthlyTCCRevokeList_Result> usp_RPT_MonthlyTCCRevokeList(Nullable<int> taxYear, Nullable<int> stageID, Nullable<int> statusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_MonthlyTCCRevokeList_Result>("usp_RPT_MonthlyTCCRevokeList", taxYearParameter, stageIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_MonthlyTCCSummary_Result> usp_RPT_MonthlyTCCSummary(Nullable<int> taxYear, Nullable<int> stageID, Nullable<int> statusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_MonthlyTCCSummary_Result>("usp_RPT_MonthlyTCCSummary", taxYearParameter, stageIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_ReviseBill_Result> usp_RPT_ReviseBill(Nullable<int> taxYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> revenueStreamID, Nullable<int> billType)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var revenueStreamIDParameter = revenueStreamID.HasValue ?
                new ObjectParameter("RevenueStreamID", revenueStreamID) :
                new ObjectParameter("RevenueStreamID", typeof(int));
    
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_ReviseBill_Result>("usp_RPT_ReviseBill", taxYearParameter, fromDateParameter, toDateParameter, revenueStreamIDParameter, billTypeParameter);
        }
    
        public virtual ObjectResult<usp_RPT_MonthlyTCCSummaryDetail_Result> usp_RPT_MonthlyTCCSummaryDetail(Nullable<int> taxYear, Nullable<int> taxMonth, Nullable<int> stageID, Nullable<int> statusID)
        {
            var taxYearParameter = taxYear.HasValue ?
                new ObjectParameter("TaxYear", taxYear) :
                new ObjectParameter("TaxYear", typeof(int));
    
            var taxMonthParameter = taxMonth.HasValue ?
                new ObjectParameter("TaxMonth", taxMonth) :
                new ObjectParameter("TaxMonth", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_MonthlyTCCSummaryDetail_Result>("usp_RPT_MonthlyTCCSummaryDetail", taxYearParameter, taxMonthParameter, stageIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<usp_GetIndividualLiabilityDetail_Result> usp_GetIndividualLiabilityDetail(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetIndividualLiabilityDetail_Result>("usp_GetIndividualLiabilityDetail", taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual int usp_PRT_TaxPayerCaptureAnalysis(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taxPayerTypeID, Nullable<int> taxOfficeID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PRT_TaxPayerCaptureAnalysis", fromDateParameter, toDateParameter, taxPayerTypeIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_RPT_TaxPayerCaptureAnalysis_Result> usp_RPT_TaxPayerCaptureAnalysis(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taxPayerTypeID, Nullable<int> taxOfficeID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RPT_TaxPayerCaptureAnalysis_Result>("usp_RPT_TaxPayerCaptureAnalysis", fromDateParameter, toDateParameter, taxPayerTypeIDParameter, taxOfficeIDParameter);
        }
    
        public virtual ObjectResult<usp_GetAssessmentRuleBasedOnProfileForSupplierNew_Result> usp_GetAssessmentRuleBasedOnProfileForSupplierNew(string profileDescription, Nullable<int> vehiclePurposeID, Nullable<int> year, string businessSector, string businessCategory, string taxPayerName, Nullable<int> searchType)
        {
            var profileDescriptionParameter = profileDescription != null ?
                new ObjectParameter("ProfileDescription", profileDescription) :
                new ObjectParameter("ProfileDescription", typeof(string));
    
            var vehiclePurposeIDParameter = vehiclePurposeID.HasValue ?
                new ObjectParameter("VehiclePurposeID", vehiclePurposeID) :
                new ObjectParameter("VehiclePurposeID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var businessSectorParameter = businessSector != null ?
                new ObjectParameter("BusinessSector", businessSector) :
                new ObjectParameter("BusinessSector", typeof(string));
    
            var businessCategoryParameter = businessCategory != null ?
                new ObjectParameter("BusinessCategory", businessCategory) :
                new ObjectParameter("BusinessCategory", typeof(string));
    
            var taxPayerNameParameter = taxPayerName != null ?
                new ObjectParameter("TaxPayerName", taxPayerName) :
                new ObjectParameter("TaxPayerName", typeof(string));
    
            var searchTypeParameter = searchType.HasValue ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAssessmentRuleBasedOnProfileForSupplierNew_Result>("usp_GetAssessmentRuleBasedOnProfileForSupplierNew", profileDescriptionParameter, vehiclePurposeIDParameter, yearParameter, businessSectorParameter, businessCategoryParameter, taxPayerNameParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<DirectAssessmentIncomeStreams_Result> DirectAssessmentIncomeStreams(Nullable<int> taxPayerTypeID, Nullable<int> taxPayerID)
        {
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DirectAssessmentIncomeStreams_Result>("DirectAssessmentIncomeStreams", taxPayerTypeIDParameter, taxPayerIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxPayerPaymentForTCCNEW_Result> usp_GetTaxPayerPaymentForTCCNEW(Nullable<int> taxPayerID, Nullable<int> taxPayerTypeID)
        {
            var taxPayerIDParameter = taxPayerID.HasValue ?
                new ObjectParameter("TaxPayerID", taxPayerID) :
                new ObjectParameter("TaxPayerID", typeof(int));
    
            var taxPayerTypeIDParameter = taxPayerTypeID.HasValue ?
                new ObjectParameter("TaxPayerTypeID", taxPayerTypeID) :
                new ObjectParameter("TaxPayerTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxPayerPaymentForTCCNEW_Result>("usp_GetTaxPayerPaymentForTCCNEW", taxPayerIDParameter, taxPayerTypeIDParameter);
        }
    
        public virtual ObjectResult<spZoneDetail_Result> spZoneDetail(Nullable<int> zoneID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spZoneDetail_Result>("spZoneDetail", zoneIDParameter);
        }
    
        public virtual ObjectResult<spZoneDetailNew_Result> spZoneDetailNew(Nullable<int> zoneID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spZoneDetailNew_Result>("spZoneDetailNew", zoneIDParameter);
        }
    
        public virtual ObjectResult<usp_GetTaxOfficeListNew_Result> usp_GetTaxOfficeListNew(string taxOfficeName, Nullable<int> taxOfficeID, Nullable<int> addressTypeID, string taxOfficeIds, Nullable<int> intStatus, string includeTaxOfficeIds, string excludeTaxOfficeIds)
        {
            var taxOfficeNameParameter = taxOfficeName != null ?
                new ObjectParameter("TaxOfficeName", taxOfficeName) :
                new ObjectParameter("TaxOfficeName", typeof(string));
    
            var taxOfficeIDParameter = taxOfficeID.HasValue ?
                new ObjectParameter("TaxOfficeID", taxOfficeID) :
                new ObjectParameter("TaxOfficeID", typeof(int));
    
            var addressTypeIDParameter = addressTypeID.HasValue ?
                new ObjectParameter("AddressTypeID", addressTypeID) :
                new ObjectParameter("AddressTypeID", typeof(int));
    
            var taxOfficeIdsParameter = taxOfficeIds != null ?
                new ObjectParameter("TaxOfficeIds", taxOfficeIds) :
                new ObjectParameter("TaxOfficeIds", typeof(string));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            var includeTaxOfficeIdsParameter = includeTaxOfficeIds != null ?
                new ObjectParameter("IncludeTaxOfficeIds", includeTaxOfficeIds) :
                new ObjectParameter("IncludeTaxOfficeIds", typeof(string));
    
            var excludeTaxOfficeIdsParameter = excludeTaxOfficeIds != null ?
                new ObjectParameter("ExcludeTaxOfficeIds", excludeTaxOfficeIds) :
                new ObjectParameter("ExcludeTaxOfficeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTaxOfficeListNew_Result>("usp_GetTaxOfficeListNew", taxOfficeNameParameter, taxOfficeIDParameter, addressTypeIDParameter, taxOfficeIdsParameter, intStatusParameter, includeTaxOfficeIdsParameter, excludeTaxOfficeIdsParameter);
        }
    
        public virtual ObjectResult<usp_GetBusinessListNewTy_Result> usp_GetBusinessListNewTy(Nullable<int> businessID, string businessRIN, string businessName, string businessAddress, Nullable<int> lGAID, Nullable<int> intStatus)
        {
            var businessIDParameter = businessID.HasValue ?
                new ObjectParameter("BusinessID", businessID) :
                new ObjectParameter("BusinessID", typeof(int));
    
            var businessRINParameter = businessRIN != null ?
                new ObjectParameter("BusinessRIN", businessRIN) :
                new ObjectParameter("BusinessRIN", typeof(string));
    
            var businessNameParameter = businessName != null ?
                new ObjectParameter("BusinessName", businessName) :
                new ObjectParameter("BusinessName", typeof(string));
    
            var businessAddressParameter = businessAddress != null ?
                new ObjectParameter("BusinessAddress", businessAddress) :
                new ObjectParameter("BusinessAddress", typeof(string));
    
            var lGAIDParameter = lGAID.HasValue ?
                new ObjectParameter("LGAID", lGAID) :
                new ObjectParameter("LGAID", typeof(int));
    
            var intStatusParameter = intStatus.HasValue ?
                new ObjectParameter("intStatus", intStatus) :
                new ObjectParameter("intStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetBusinessListNewTy_Result>("usp_GetBusinessListNewTy", businessIDParameter, businessRINParameter, businessNameParameter, businessAddressParameter, lGAIDParameter, intStatusParameter);
        }
    
        public virtual ObjectResult<usp_GetTccDownloadByYear_Result> usp_GetTccDownloadByYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTccDownloadByYear_Result>("usp_GetTccDownloadByYear");
        }
    }
}
